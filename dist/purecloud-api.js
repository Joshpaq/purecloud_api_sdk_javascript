(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}(g.purecloud || (g.purecloud = {})).platform = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* jshint node: true */

'use strict';

exports.AlertingApi = require('./partials/AlertingApi');
exports.ConversationsApi = require('./partials/ConversationsApi');
exports.AnalyticsApi = require('./partials/AnalyticsApi');
exports.QualityApi = require('./partials/QualityApi');
exports.RoutingApi = require('./partials/RoutingApi');
exports.UsersApi = require('./partials/UsersApi');
exports.AttributesApi = require('./partials/AttributesApi');
exports.AuthorizationApi = require('./partials/AuthorizationApi');
exports.UtilitiesApi = require('./partials/UtilitiesApi');
exports.TelephonyProvidersEdgeApi = require('./partials/TelephonyProvidersEdgeApi');
exports.ContentManagementApi = require('./partials/ContentManagementApi');
exports.RecordingApi = require('./partials/RecordingApi');
exports.FaxApi = require('./partials/FaxApi');
exports.GeolocationApi = require('./partials/GeolocationApi');
exports.GreetingsApi = require('./partials/GreetingsApi');
exports.GroupsApi = require('./partials/GroupsApi');
exports.SearchApi = require('./partials/SearchApi');
exports.IdentityProviderApi = require('./partials/IdentityProviderApi');
exports.LanguagesApi = require('./partials/LanguagesApi');
exports.LocationsApi = require('./partials/LocationsApi');
exports.NotificationsApi = require('./partials/NotificationsApi');
exports.OAuthApi = require('./partials/OAuthApi');
exports.OrganizationApi = require('./partials/OrganizationApi');
exports.OutboundApi = require('./partials/OutboundApi');
exports.PresenceApi = require('./partials/PresenceApi');
exports.ConfigurationApi = require('./partials/ConfigurationApi');
exports.ResponseManagementApi = require('./partials/ResponseManagementApi');
exports.SuggestApi = require('./partials/SuggestApi');
exports.StationsApi = require('./partials/StationsApi');
exports.TokensApi = require('./partials/TokensApi');
exports.UserRecordingsApi = require('./partials/UserRecordingsApi');
exports.VoicemailApi = require('./partials/VoicemailApi');
exports.PureCloudSession= require('./partials/purecloudsession');

},{"./partials/AlertingApi":2,"./partials/AnalyticsApi":3,"./partials/AttributesApi":4,"./partials/AuthorizationApi":5,"./partials/ConfigurationApi":6,"./partials/ContentManagementApi":7,"./partials/ConversationsApi":8,"./partials/FaxApi":9,"./partials/GeolocationApi":10,"./partials/GreetingsApi":11,"./partials/GroupsApi":12,"./partials/IdentityProviderApi":13,"./partials/LanguagesApi":14,"./partials/LocationsApi":15,"./partials/NotificationsApi":16,"./partials/OAuthApi":17,"./partials/OrganizationApi":18,"./partials/OutboundApi":19,"./partials/PresenceApi":20,"./partials/QualityApi":21,"./partials/RecordingApi":22,"./partials/ResponseManagementApi":23,"./partials/RoutingApi":24,"./partials/SearchApi":25,"./partials/StationsApi":26,"./partials/SuggestApi":27,"./partials/TelephonyProvidersEdgeApi":28,"./partials/TokensApi":29,"./partials/UserRecordingsApi":30,"./partials/UsersApi":31,"./partials/UtilitiesApi":32,"./partials/VoicemailApi":33,"./partials/purecloudsession":34}],2:[function(require,module,exports){
/**
* @class AlertingApi
* @example
* var api = new purecloud.platform.AlertingApi(pureCloudSession);
*/
function AlertingApi(session) {
    if(!(this instanceof AlertingApi)) {
        return new AlertingApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('AlertingApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get heart beat alert list.
  * @memberOf AlertingApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
AlertingApi.prototype.getHeartbeatAlerts = function getHeartbeatAlerts(){
    var requestPath = '/api/v2/alerting/heartbeat/alerts';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a heart beat alert
  * @memberOf AlertingApi
  * @instance
  * @param {string} alertId - Alert ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "senderId": "",
   "heartBeatTimeoutInMinutes": 0,
   "ruleId": "",
   "startDate": "",
   "endDate": "",
   "notificationUsers": [],
   "alertTypes": [],
   "ruleType": "",
   "ruleUri": "",
   "selfUri": ""
}
  */
AlertingApi.prototype.getHeartbeatAlertsAlertId = function getHeartbeatAlertsAlertId(alertId){
    var requestPath = '/api/v2/alerting/heartbeat/alerts/{alertId}';
    var requestQuery = {};
    var requestBody;

    if(alertId === undefined || alertId === null){
      throw new Error('Missing required  parameter: alertId');
    }
    requestPath = requestPath.replace('{alertId}', alertId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a heart beat alert
  * @memberOf AlertingApi
  * @instance
  * @param {string} alertId - Alert ID
  */
AlertingApi.prototype.deleteHeartbeatAlertsAlertId = function deleteHeartbeatAlertsAlertId(alertId){
    var requestPath = '/api/v2/alerting/heartbeat/alerts/{alertId}';
    var requestQuery = {};
    var requestBody;

    if(alertId === undefined || alertId === null){
      throw new Error('Missing required  parameter: alertId');
    }
    requestPath = requestPath.replace('{alertId}', alertId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a heart beat rule list.
  * @memberOf AlertingApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
AlertingApi.prototype.getHeartbeatRules = function getHeartbeatRules(){
    var requestPath = '/api/v2/alerting/heartbeat/rules';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a heart beat rule.
  * @memberOf AlertingApi
  * @instance
  * @param {} body - HeartBeatRule
  * @example
  * Body Example:
  * {
   "name": "",
   "senderId": "",
   "heartBeatTimeoutInMinutes": 0,
   "enabled": true,
   "notificationUsers": [],
   "alertTypes": [],
   "ruleType": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "senderId": "",
   "heartBeatTimeoutInMinutes": 0,
   "enabled": true,
   "inAlarm": true,
   "notificationUsers": [],
   "alertTypes": [],
   "ruleType": "",
   "selfUri": ""
}
  */
AlertingApi.prototype.postHeartbeatRules = function postHeartbeatRules(body){
    var requestPath = '/api/v2/alerting/heartbeat/rules';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a heart beat rule.
  * @memberOf AlertingApi
  * @instance
  * @param {string} ruleId - Rule ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "senderId": "",
   "heartBeatTimeoutInMinutes": 0,
   "enabled": true,
   "inAlarm": true,
   "notificationUsers": [],
   "alertTypes": [],
   "ruleType": "",
   "selfUri": ""
}
  */
AlertingApi.prototype.getHeartbeatRulesRuleId = function getHeartbeatRulesRuleId(ruleId){
    var requestPath = '/api/v2/alerting/heartbeat/rules/{ruleId}';
    var requestQuery = {};
    var requestBody;

    if(ruleId === undefined || ruleId === null){
      throw new Error('Missing required  parameter: ruleId');
    }
    requestPath = requestPath.replace('{ruleId}', ruleId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a heart beat rule
  * @memberOf AlertingApi
  * @instance
  * @param {string} ruleId - Rule ID
  * @param {} body - HeartBeatRule
  * @example
  * Body Example:
  * {
   "name": "",
   "senderId": "",
   "heartBeatTimeoutInMinutes": 0,
   "enabled": true,
   "notificationUsers": [],
   "alertTypes": [],
   "ruleType": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "senderId": "",
   "heartBeatTimeoutInMinutes": 0,
   "enabled": true,
   "inAlarm": true,
   "notificationUsers": [],
   "alertTypes": [],
   "ruleType": "",
   "selfUri": ""
}
  */
AlertingApi.prototype.putHeartbeatRulesRuleId = function putHeartbeatRulesRuleId(ruleId, body){
    var requestPath = '/api/v2/alerting/heartbeat/rules/{ruleId}';
    var requestQuery = {};
    var requestBody;

    if(ruleId === undefined || ruleId === null){
      throw new Error('Missing required  parameter: ruleId');
    }
    requestPath = requestPath.replace('{ruleId}', ruleId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a heart beat rule.
  * @memberOf AlertingApi
  * @instance
  * @param {string} ruleId - Rule ID
  */
AlertingApi.prototype.deleteHeartbeatRulesRuleId = function deleteHeartbeatRulesRuleId(ruleId){
    var requestPath = '/api/v2/alerting/heartbeat/rules/{ruleId}';
    var requestQuery = {};
    var requestBody;

    if(ruleId === undefined || ruleId === null){
      throw new Error('Missing required  parameter: ruleId');
    }
    requestPath = requestPath.replace('{ruleId}', ruleId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get interaction stats alert list.
  * @memberOf AlertingApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
AlertingApi.prototype.getInteractionstatsAlerts = function getInteractionstatsAlerts(){
    var requestPath = '/api/v2/alerting/interactionstats/alerts';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Gets user unread count of interaction stats alerts.
  * @memberOf AlertingApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "count": 0
}
  */
AlertingApi.prototype.getInteractionstatsAlertsUnread = function getInteractionstatsAlertsUnread(){
    var requestPath = '/api/v2/alerting/interactionstats/alerts/unread';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get an interaction stats alert
  * @memberOf AlertingApi
  * @instance
  * @param {string} alertId - Alert ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dimension": "",
   "dimensionValue": "",
   "metric": "",
   "mediaType": "",
   "numericRange": "",
   "statistic": "",
   "value": {},
   "ruleId": "",
   "unread": true,
   "startDate": "",
   "endDate": "",
   "notificationUsers": [],
   "alertTypes": [],
   "ruleUri": "",
   "selfUri": ""
}
  */
AlertingApi.prototype.getInteractionstatsAlertsAlertId = function getInteractionstatsAlertsAlertId(alertId){
    var requestPath = '/api/v2/alerting/interactionstats/alerts/{alertId}';
    var requestQuery = {};
    var requestBody;

    if(alertId === undefined || alertId === null){
      throw new Error('Missing required  parameter: alertId');
    }
    requestPath = requestPath.replace('{alertId}', alertId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an interaction stats alert read status
  * @memberOf AlertingApi
  * @instance
  * @param {string} alertId - Alert ID
  * @param {} body - InteractionStatsAlert
  * @example
  * Body Example:
  * {
   "unread": true
}
  * @example
  * 200 Response Example:
  * {
   "unread": true
}
  */
AlertingApi.prototype.putInteractionstatsAlertsAlertId = function putInteractionstatsAlertsAlertId(alertId, body){
    var requestPath = '/api/v2/alerting/interactionstats/alerts/{alertId}';
    var requestQuery = {};
    var requestBody;

    if(alertId === undefined || alertId === null){
      throw new Error('Missing required  parameter: alertId');
    }
    requestPath = requestPath.replace('{alertId}', alertId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete an interaction stats alert
  * @memberOf AlertingApi
  * @instance
  * @param {string} alertId - Alert ID
  */
AlertingApi.prototype.deleteInteractionstatsAlertsAlertId = function deleteInteractionstatsAlertsAlertId(alertId){
    var requestPath = '/api/v2/alerting/interactionstats/alerts/{alertId}';
    var requestQuery = {};
    var requestBody;

    if(alertId === undefined || alertId === null){
      throw new Error('Missing required  parameter: alertId');
    }
    requestPath = requestPath.replace('{alertId}', alertId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get an interaction stats rule list.
  * @memberOf AlertingApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
AlertingApi.prototype.getInteractionstatsRules = function getInteractionstatsRules(){
    var requestPath = '/api/v2/alerting/interactionstats/rules';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create an interaction stats rule.
  * @memberOf AlertingApi
  * @instance
  * @param {} body - AlertingRule
  * @example
  * Body Example:
  * {
   "name": "",
   "dimension": "",
   "dimensionValue": "",
   "metric": "",
   "mediaType": "",
   "numericRange": "",
   "statistic": "",
   "value": {},
   "enabled": true,
   "notificationUsers": [],
   "alertTypes": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dimension": "",
   "dimensionValue": "",
   "metric": "",
   "mediaType": "",
   "numericRange": "",
   "statistic": "",
   "value": {},
   "enabled": true,
   "inAlarm": true,
   "notificationUsers": [],
   "alertTypes": [],
   "selfUri": ""
}
  */
AlertingApi.prototype.postInteractionstatsRules = function postInteractionstatsRules(body){
    var requestPath = '/api/v2/alerting/interactionstats/rules';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get an interaction stats rule.
  * @memberOf AlertingApi
  * @instance
  * @param {string} ruleId - Rule ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dimension": "",
   "dimensionValue": "",
   "metric": "",
   "mediaType": "",
   "numericRange": "",
   "statistic": "",
   "value": {},
   "enabled": true,
   "inAlarm": true,
   "notificationUsers": [],
   "alertTypes": [],
   "selfUri": ""
}
  */
AlertingApi.prototype.getInteractionstatsRulesRuleId = function getInteractionstatsRulesRuleId(ruleId){
    var requestPath = '/api/v2/alerting/interactionstats/rules/{ruleId}';
    var requestQuery = {};
    var requestBody;

    if(ruleId === undefined || ruleId === null){
      throw new Error('Missing required  parameter: ruleId');
    }
    requestPath = requestPath.replace('{ruleId}', ruleId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an interaction stats rule
  * @memberOf AlertingApi
  * @instance
  * @param {string} ruleId - Rule ID
  * @param {} body - AlertingRule
  * @example
  * Body Example:
  * {
   "name": "",
   "dimension": "",
   "dimensionValue": "",
   "metric": "",
   "mediaType": "",
   "numericRange": "",
   "statistic": "",
   "value": {},
   "enabled": true,
   "notificationUsers": [],
   "alertTypes": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dimension": "",
   "dimensionValue": "",
   "metric": "",
   "mediaType": "",
   "numericRange": "",
   "statistic": "",
   "value": {},
   "enabled": true,
   "inAlarm": true,
   "notificationUsers": [],
   "alertTypes": [],
   "selfUri": ""
}
  */
AlertingApi.prototype.putInteractionstatsRulesRuleId = function putInteractionstatsRulesRuleId(ruleId, body){
    var requestPath = '/api/v2/alerting/interactionstats/rules/{ruleId}';
    var requestQuery = {};
    var requestBody;

    if(ruleId === undefined || ruleId === null){
      throw new Error('Missing required  parameter: ruleId');
    }
    requestPath = requestPath.replace('{ruleId}', ruleId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete an interaction stats rule.
  * @memberOf AlertingApi
  * @instance
  * @param {string} ruleId - Rule ID
  */
AlertingApi.prototype.deleteInteractionstatsRulesRuleId = function deleteInteractionstatsRulesRuleId(ruleId){
    var requestPath = '/api/v2/alerting/interactionstats/rules/{ruleId}';
    var requestQuery = {};
    var requestBody;

    if(ruleId === undefined || ruleId === null){
      throw new Error('Missing required  parameter: ruleId');
    }
    requestPath = requestPath.replace('{ruleId}', ruleId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};


module.exports = AlertingApi;

},{}],3:[function(require,module,exports){
/**
* @class AnalyticsApi
* @example
* var api = new purecloud.platform.AnalyticsApi(pureCloudSession);
*/
function AnalyticsApi(session) {
    if(!(this instanceof AnalyticsApi)) {
        return new AnalyticsApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('AnalyticsApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Query for conversation aggregates
  * @memberOf AnalyticsApi
  * @instance
  * @param {} body - query
  * @example
  * Body Example:
  * {
   "interval": "",
   "granularity": "",
   "groupBy": [],
   "filter": {
      "type": "",
      "clauses": [],
      "predicates": []
   },
   "metrics": [],
   "flattenMultivaluedDimensions": true
}
  * @example
  * 200 Response Example:
  * {
   "results": []
}
  */
AnalyticsApi.prototype.postConversationsAggregatesQuery = function postConversationsAggregatesQuery(body){
    var requestPath = '/api/v2/analytics/conversations/aggregates/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query for conversation details
  * @memberOf AnalyticsApi
  * @instance
  * @param {} body - query
  * @example
  * Body Example:
  * {
   "interval": "",
   "conversationFilters": [],
   "evaluationFilters": [],
   "segmentFilters": [],
   "aggregations": [],
   "paging": {
      "pageSize": 0,
      "pageNumber": 0
   },
   "order": "",
   "orderBy": ""
}
  * @example
  * 200 Response Example:
  * {
   "conversations": [],
   "aggregations": []
}
  */
AnalyticsApi.prototype.postConversationsDetailsQuery = function postConversationsDetailsQuery(body){
    var requestPath = '/api/v2/analytics/conversations/details/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a conversation by id
  * @memberOf AnalyticsApi
  * @instance
  * @param {string} conversationId - conversationId
  * @example
  * 200 Response Example:
  * {
   "conversationId": "",
   "conversationStart": "",
   "participants": [],
   "evaluations": []
}
  */
AnalyticsApi.prototype.getConversationsConversationIdDetails = function getConversationsConversationIdDetails(conversationId){
    var requestPath = '/api/v2/analytics/conversations/{conversationId}/details';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Index conversation properties
  * @memberOf AnalyticsApi
  * @instance
  * @param {string} conversationId - conversationId
  * @param {} body - request
  * @example
  * Body Example:
  * {
   "sessionId": "",
   "timestamp": 0,
   "properties": []
}
  * @example
  * 200 Response Example:
  * {
   "sessionId": "",
   "timestamp": 0,
   "properties": []
}
  */
AnalyticsApi.prototype.postConversationsConversationIdDetailsProperties = function postConversationsConversationIdDetailsProperties(conversationId, body){
    var requestPath = '/api/v2/analytics/conversations/{conversationId}/details/properties';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query for evaluation aggregates
  * @memberOf AnalyticsApi
  * @instance
  * @param {} body - query
  * @example
  * Body Example:
  * {
   "interval": "",
   "granularity": "",
   "groupBy": [],
   "filter": {
      "type": "",
      "clauses": [],
      "predicates": []
   },
   "metrics": [],
   "flattenMultivaluedDimensions": true
}
  * @example
  * 200 Response Example:
  * {
   "results": []
}
  */
AnalyticsApi.prototype.postEvaluationsAggregatesQuery = function postEvaluationsAggregatesQuery(body){
    var requestPath = '/api/v2/analytics/evaluations/aggregates/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query for queue observations
  * @memberOf AnalyticsApi
  * @instance
  * @param {} body - query
  * @example
  * Body Example:
  * {
   "filter": {
      "type": "",
      "clauses": [],
      "predicates": []
   },
   "metrics": []
}
  * @example
  * 200 Response Example:
  * {
   "systemToOrganizationMappings": {},
   "results": []
}
  */
AnalyticsApi.prototype.postQueuesObservationsQuery = function postQueuesObservationsQuery(body){
    var requestPath = '/api/v2/analytics/queues/observations/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get list of reporting metadata.
  * @memberOf AnalyticsApi
  * @instance
  * @param {integer} pageNumber - Page number
  * @param {integer} pageSize - Page size
  * @param {string} locale - Locale
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
AnalyticsApi.prototype.getReportingMetadata = function getReportingMetadata(pageNumber, pageSize, locale){
    var requestPath = '/api/v2/analytics/reporting/metadata';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageNumber"] = pageNumber;
    requestQuery["pageSize"] = pageSize;
    requestQuery["locale"] = locale;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of report formats
  * @description Get a list of report formats.
  * @memberOf AnalyticsApi
  * @instance
  */
AnalyticsApi.prototype.getReportingReportformats = function getReportingReportformats(){
    var requestPath = '/api/v2/analytics/reporting/reportformats';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of scheduled report jobs
  * @description Get a list of scheduled report jobs.
  * @memberOf AnalyticsApi
  * @instance
  * @param {integer} pageNumber - Page number
  * @param {integer} pageSize - Page size
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
AnalyticsApi.prototype.getReportingSchedules = function getReportingSchedules(pageNumber, pageSize){
    var requestPath = '/api/v2/analytics/reporting/schedules';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageNumber"] = pageNumber;
    requestQuery["pageSize"] = pageSize;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a scheduled report job
  * @description Create a scheduled report job.
  * @memberOf AnalyticsApi
  * @instance
  * @param {} body - ReportSchedule
  * @example
  * Body Example:
  * {
   "name": "",
   "quartzCronExpression": "",
   "nextFireTime": "",
   "dateCreated": "",
   "dateModified": "",
   "description": "",
   "timeZone": "",
   "timePeriod": "",
   "interval": "",
   "reportFormat": "",
   "locale": "",
   "enabled": true,
   "reportId": "",
   "parameters": {},
   "lastRun": {
      "name": "",
      "reportId": "",
      "runTime": "",
      "runStatus": "",
      "errorMessage": "",
      "runDurationMsec": 0,
      "reportUrl": "",
      "reportFormat": "",
      "scheduleUri": ""
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "quartzCronExpression": "",
   "nextFireTime": "",
   "dateCreated": "",
   "dateModified": "",
   "description": "",
   "timeZone": "",
   "timePeriod": "",
   "interval": "",
   "reportFormat": "",
   "locale": "",
   "enabled": true,
   "reportId": "",
   "parameters": {},
   "lastRun": {
      "id": "",
      "name": "",
      "reportId": "",
      "runTime": "",
      "runStatus": "",
      "errorMessage": "",
      "runDurationMsec": 0,
      "reportUrl": "",
      "reportFormat": "",
      "scheduleUri": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
AnalyticsApi.prototype.postReportingSchedules = function postReportingSchedules(body){
    var requestPath = '/api/v2/analytics/reporting/schedules';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a scheduled report job.
  * @memberOf AnalyticsApi
  * @instance
  * @param {string} scheduleId - Schedule ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "quartzCronExpression": "",
   "nextFireTime": "",
   "dateCreated": "",
   "dateModified": "",
   "description": "",
   "timeZone": "",
   "timePeriod": "",
   "interval": "",
   "reportFormat": "",
   "locale": "",
   "enabled": true,
   "reportId": "",
   "parameters": {},
   "lastRun": {
      "id": "",
      "name": "",
      "reportId": "",
      "runTime": "",
      "runStatus": "",
      "errorMessage": "",
      "runDurationMsec": 0,
      "reportUrl": "",
      "reportFormat": "",
      "scheduleUri": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
AnalyticsApi.prototype.getReportingSchedulesScheduleId = function getReportingSchedulesScheduleId(scheduleId){
    var requestPath = '/api/v2/analytics/reporting/schedules/{scheduleId}';
    var requestQuery = {};
    var requestBody;

    if(scheduleId === undefined || scheduleId === null){
      throw new Error('Missing required  parameter: scheduleId');
    }
    requestPath = requestPath.replace('{scheduleId}', scheduleId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a scheduled report job.
  * @memberOf AnalyticsApi
  * @instance
  * @param {string} scheduleId - Schedule ID
  * @param {} body - ReportSchedule
  * @example
  * Body Example:
  * {
   "name": "",
   "quartzCronExpression": "",
   "nextFireTime": "",
   "dateCreated": "",
   "dateModified": "",
   "description": "",
   "timeZone": "",
   "timePeriod": "",
   "interval": "",
   "reportFormat": "",
   "locale": "",
   "enabled": true,
   "reportId": "",
   "parameters": {},
   "lastRun": {
      "name": "",
      "reportId": "",
      "runTime": "",
      "runStatus": "",
      "errorMessage": "",
      "runDurationMsec": 0,
      "reportUrl": "",
      "reportFormat": "",
      "scheduleUri": ""
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "quartzCronExpression": "",
   "nextFireTime": "",
   "dateCreated": "",
   "dateModified": "",
   "description": "",
   "timeZone": "",
   "timePeriod": "",
   "interval": "",
   "reportFormat": "",
   "locale": "",
   "enabled": true,
   "reportId": "",
   "parameters": {},
   "lastRun": {
      "id": "",
      "name": "",
      "reportId": "",
      "runTime": "",
      "runStatus": "",
      "errorMessage": "",
      "runDurationMsec": 0,
      "reportUrl": "",
      "reportFormat": "",
      "scheduleUri": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
AnalyticsApi.prototype.putReportingSchedulesScheduleId = function putReportingSchedulesScheduleId(scheduleId, body){
    var requestPath = '/api/v2/analytics/reporting/schedules/{scheduleId}';
    var requestQuery = {};
    var requestBody;

    if(scheduleId === undefined || scheduleId === null){
      throw new Error('Missing required  parameter: scheduleId');
    }
    requestPath = requestPath.replace('{scheduleId}', scheduleId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a scheduled report job.
  * @memberOf AnalyticsApi
  * @instance
  * @param {string} scheduleId - Schedule ID
  */
AnalyticsApi.prototype.deleteReportingSchedulesScheduleId = function deleteReportingSchedulesScheduleId(scheduleId){
    var requestPath = '/api/v2/analytics/reporting/schedules/{scheduleId}';
    var requestQuery = {};
    var requestBody;

    if(scheduleId === undefined || scheduleId === null){
      throw new Error('Missing required  parameter: scheduleId');
    }
    requestPath = requestPath.replace('{scheduleId}', scheduleId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get list of completed scheduled report jobs.
  * @memberOf AnalyticsApi
  * @instance
  * @param {string} scheduleId - Schedule ID
  * @param {integer} pageNumber - 
  * @param {integer} pageSize - 
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
AnalyticsApi.prototype.getReportingSchedulesScheduleIdHistory = function getReportingSchedulesScheduleIdHistory(scheduleId, pageNumber, pageSize){
    var requestPath = '/api/v2/analytics/reporting/schedules/{scheduleId}/history';
    var requestQuery = {};
    var requestBody;

    if(scheduleId === undefined || scheduleId === null){
      throw new Error('Missing required  parameter: scheduleId');
    }
    requestPath = requestPath.replace('{scheduleId}', scheduleId);
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["pageSize"] = pageSize;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get most recently completed scheduled report job.
  * @memberOf AnalyticsApi
  * @instance
  * @param {string} scheduleId - Schedule ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "reportId": "",
   "runTime": "",
   "runStatus": "",
   "errorMessage": "",
   "runDurationMsec": 0,
   "reportUrl": "",
   "reportFormat": "",
   "scheduleUri": "",
   "selfUri": ""
}
  */
AnalyticsApi.prototype.getReportingSchedulesScheduleIdHistoryLatest = function getReportingSchedulesScheduleIdHistoryLatest(scheduleId){
    var requestPath = '/api/v2/analytics/reporting/schedules/{scheduleId}/history/latest';
    var requestQuery = {};
    var requestBody;

    if(scheduleId === undefined || scheduleId === null){
      throw new Error('Missing required  parameter: scheduleId');
    }
    requestPath = requestPath.replace('{scheduleId}', scheduleId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary A completed scheduled report job
  * @description A completed scheduled report job.
  * @memberOf AnalyticsApi
  * @instance
  * @param {string} runId - Run ID
  * @param {string} scheduleId - Schedule ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "reportId": "",
   "runTime": "",
   "runStatus": "",
   "errorMessage": "",
   "runDurationMsec": 0,
   "reportUrl": "",
   "reportFormat": "",
   "scheduleUri": "",
   "selfUri": ""
}
  */
AnalyticsApi.prototype.getReportingSchedulesScheduleIdHistoryRunId = function getReportingSchedulesScheduleIdHistoryRunId(runId, scheduleId){
    var requestPath = '/api/v2/analytics/reporting/schedules/{scheduleId}/history/{runId}';
    var requestQuery = {};
    var requestBody;

    if(runId === undefined || runId === null){
      throw new Error('Missing required  parameter: runId');
    }
    requestPath = requestPath.replace('{runId}', runId);
    if(scheduleId === undefined || scheduleId === null){
      throw new Error('Missing required  parameter: scheduleId');
    }
    requestPath = requestPath.replace('{scheduleId}', scheduleId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Place a scheduled report immediately into the reporting queue
  * @memberOf AnalyticsApi
  * @instance
  * @param {string} scheduleId - Schedule ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "selfUri": ""
}
  */
AnalyticsApi.prototype.postReportingSchedulesScheduleIdRunreport = function postReportingSchedulesScheduleIdRunreport(scheduleId){
    var requestPath = '/api/v2/analytics/reporting/schedules/{scheduleId}/runreport';
    var requestQuery = {};
    var requestBody;

    if(scheduleId === undefined || scheduleId === null){
      throw new Error('Missing required  parameter: scheduleId');
    }
    requestPath = requestPath.replace('{scheduleId}', scheduleId);
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of report time periods.
  * @memberOf AnalyticsApi
  * @instance
  */
AnalyticsApi.prototype.getReportingTimeperiods = function getReportingTimeperiods(){
    var requestPath = '/api/v2/analytics/reporting/timeperiods';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a reporting metadata.
  * @memberOf AnalyticsApi
  * @instance
  * @param {string} reportId - Report ID
  * @param {string} locale - Locale
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "title": "",
   "description": "",
   "keywords": [],
   "availableLocales": [],
   "parameters": [],
   "exampleUrl": "",
   "selfUri": ""
}
  */
AnalyticsApi.prototype.getReportingReportIdMetadata = function getReportingReportIdMetadata(reportId, locale){
    var requestPath = '/api/v2/analytics/reporting/{reportId}/metadata';
    var requestQuery = {};
    var requestBody;

    if(reportId === undefined || reportId === null){
      throw new Error('Missing required  parameter: reportId');
    }
    requestPath = requestPath.replace('{reportId}', reportId);
    requestQuery["locale"] = locale;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query for user aggregates
  * @memberOf AnalyticsApi
  * @instance
  * @param {} body - query
  * @example
  * Body Example:
  * {
   "interval": "",
   "granularity": "",
   "groupBy": [],
   "filter": {
      "type": "",
      "clauses": [],
      "predicates": []
   },
   "metrics": [],
   "flattenMultivaluedDimensions": true
}
  * @example
  * 200 Response Example:
  * {
   "systemToOrganizationMappings": {},
   "results": []
}
  */
AnalyticsApi.prototype.postUsersAggregatesQuery = function postUsersAggregatesQuery(body){
    var requestPath = '/api/v2/analytics/users/aggregates/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query for user observations
  * @memberOf AnalyticsApi
  * @instance
  * @param {} body - query
  * @example
  * Body Example:
  * {
   "filter": {
      "type": "",
      "clauses": [],
      "predicates": []
   },
   "metrics": []
}
  * @example
  * 200 Response Example:
  * {
   "results": []
}
  */
AnalyticsApi.prototype.postUsersObservationsQuery = function postUsersObservationsQuery(body){
    var requestPath = '/api/v2/analytics/users/observations/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};


module.exports = AnalyticsApi;

},{}],4:[function(require,module,exports){
/**
* @class AttributesApi
* @example
* var api = new purecloud.platform.AttributesApi(pureCloudSession);
*/
function AttributesApi(session) {
    if(!(this instanceof AttributesApi)) {
        return new AttributesApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('AttributesApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Gets a list of existing attributes.
  * @memberOf AttributesApi
  * @instance
  * @param {integer} pageNumber - Page number
  * @param {integer} pageSize - Page size
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
AttributesApi.prototype.getAttributes = function getAttributes(pageNumber, pageSize){
    var requestPath = '/api/v2/attributes';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageNumber"] = pageNumber;
    requestQuery["pageSize"] = pageSize;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create an attribute.
  * @memberOf AttributesApi
  * @instance
  * @param {} body - Attribute
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "description": "",
   "createdBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dateCreated": "",
   "modifiedBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dateModified": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "version": 0,
   "description": "",
   "createdBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dateCreated": "",
   "modifiedBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dateModified": "",
   "selfUri": ""
}
  */
AttributesApi.prototype.postAttributes = function postAttributes(body){
    var requestPath = '/api/v2/attributes';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query attributes
  * @memberOf AttributesApi
  * @instance
  * @param {} body - query
  * @example
  * Body Example:
  * {
   "query": "",
   "pageSize": 0,
   "pageNumber": 0
}
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
AttributesApi.prototype.postQuery = function postQuery(body){
    var requestPath = '/api/v2/attributes/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get details about an existing attribute.
  * @memberOf AttributesApi
  * @instance
  * @param {string} attributeId - Attribute ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "version": 0,
   "description": "",
   "createdBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dateCreated": "",
   "modifiedBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dateModified": "",
   "selfUri": ""
}
  */
AttributesApi.prototype.getAttributeId = function getAttributeId(attributeId){
    var requestPath = '/api/v2/attributes/{attributeId}';
    var requestQuery = {};
    var requestBody;

    if(attributeId === undefined || attributeId === null){
      throw new Error('Missing required  parameter: attributeId');
    }
    requestPath = requestPath.replace('{attributeId}', attributeId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an existing attribute.
  * @description Fields that can be updated: name, description. The most recent version is required for updates.
  * @memberOf AttributesApi
  * @instance
  * @param {string} attributeId - Attribute ID
  * @param {} body - Attribute
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "description": "",
   "createdBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dateCreated": "",
   "modifiedBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dateModified": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "version": 0,
   "description": "",
   "createdBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dateCreated": "",
   "modifiedBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dateModified": "",
   "selfUri": ""
}
  */
AttributesApi.prototype.putAttributeId = function putAttributeId(attributeId, body){
    var requestPath = '/api/v2/attributes/{attributeId}';
    var requestQuery = {};
    var requestBody;

    if(attributeId === undefined || attributeId === null){
      throw new Error('Missing required  parameter: attributeId');
    }
    requestPath = requestPath.replace('{attributeId}', attributeId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete an existing Attribute.
  * @description This will remove attribute.
  * @memberOf AttributesApi
  * @instance
  * @param {string} attributeId - Attribute ID
  */
AttributesApi.prototype.deleteAttributeId = function deleteAttributeId(attributeId){
    var requestPath = '/api/v2/attributes/{attributeId}';
    var requestQuery = {};
    var requestBody;

    if(attributeId === undefined || attributeId === null){
      throw new Error('Missing required  parameter: attributeId');
    }
    requestPath = requestPath.replace('{attributeId}', attributeId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};


module.exports = AttributesApi;

},{}],5:[function(require,module,exports){
/**
* @class AuthorizationApi
* @example
* var api = new purecloud.platform.AuthorizationApi(pureCloudSession);
*/
function AuthorizationApi(session) {
    if(!(this instanceof AuthorizationApi)) {
        return new AuthorizationApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('AuthorizationApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get all permissions.
  * @description Retrieve a list of all permission defined in the system.
  * @memberOf AuthorizationApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
AuthorizationApi.prototype.getPermissions = function getPermissions(pageSize, pageNumber){
    var requestPath = '/api/v2/authorization/permissions';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of enabled products
  * @description Gets the list of enabled products. Some example product names are: collaborateFree, collaboratePro, communicate, and engage.
  * @memberOf AuthorizationApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "pageCount": 0
}
  */
AuthorizationApi.prototype.getProducts = function getProducts(){
    var requestPath = '/api/v2/authorization/products';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Retrieve a list of all roles defined for the organization
  * @memberOf AuthorizationApi
  * @instance
  * @param {integer} pageSize - The total page size requested
  * @param {integer} pageNumber - The page number requested
  * @param {string} sortBy - variable name requested to sort by
  * @param {array} expand - variable name requested by expand list
  * @param {string} nextPage - next page token
  * @param {string} previousPage - Previous page token
  * @param {array} permission - 
  * @param {boolean} userCount - 
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
AuthorizationApi.prototype.getRoles = function getRoles(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, permission, userCount){
    var requestPath = '/api/v2/authorization/roles';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["expand"] = expand;
    requestQuery["nextPage"] = nextPage;
    requestQuery["previousPage"] = previousPage;
    requestQuery["permission"] = permission;
    requestQuery["userCount"] = userCount;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create an organization role.
  * @memberOf AuthorizationApi
  * @instance
  * @param {} body - Organization role
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "defaultRoleId": "",
   "permissions": [],
   "permissionPolicies": [],
   "userCount": 0,
   "roleNeedsUpdate": true,
   "default": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "defaultRoleId": "",
   "permissions": [],
   "permissionPolicies": [],
   "userCount": 0,
   "roleNeedsUpdate": true,
   "default": true,
   "selfUri": ""
}
  */
AuthorizationApi.prototype.postRoles = function postRoles(body){
    var requestPath = '/api/v2/authorization/roles';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Restores all default roles
  * @description This endpoint serves several purposes. 1. It provides the org with default roles. This is important for default roles that will be added after go-live (they can retroactively add the new default-role). Note: When not using a query param of force=true, it only adds the default roles not configured for the org; it does not overwrite roles. 2. Using the query param force=true, you can restore all default roles. Note: This does not have an effect on custom roles.
  * @memberOf AuthorizationApi
  * @instance
  * @param {boolean} force - Restore default roles
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
AuthorizationApi.prototype.postRolesDefault = function postRolesDefault(force){
    var requestPath = '/api/v2/authorization/roles/default';
    var requestQuery = {};
    var requestBody;

    requestQuery["force"] = force;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Restore specified default roles
  * @memberOf AuthorizationApi
  * @instance
  * @param {} body - Organization roles list
  * @example
  * Body Example:
  * [
 {
  "name": "",
  "description": "",
  "defaultRoleId": "",
  "permissions": [],
  "permissionPolicies": [],
  "userCount": 0,
  "roleNeedsUpdate": true,
  "default": true
 }
]
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
AuthorizationApi.prototype.putRolesDefault = function putRolesDefault(body){
    var requestPath = '/api/v2/authorization/roles/default';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get an org role to default role comparison comparison
  * @description Compares any organization role to a default role id and show differences
  * @memberOf AuthorizationApi
  * @instance
  * @param {string} leftRoleId - Left Role ID
  * @param {string} rightRoleId - Right Role id
  * @example
  * 200 Response Example:
  * {
   "removedPermissionPolicies": [],
   "addedPermissionPolicies": [],
   "samePermissionPolicies": [],
   "userOrgRole": {
      "id": "",
      "name": "",
      "description": "",
      "defaultRoleId": "",
      "permissions": [],
      "permissionPolicies": [],
      "userCount": 0,
      "roleNeedsUpdate": true,
      "default": true,
      "selfUri": ""
   },
   "roleFromDefault": {
      "id": "",
      "name": "",
      "description": "",
      "defaultRoleId": "",
      "permissions": [],
      "permissionPolicies": [],
      "userCount": 0,
      "roleNeedsUpdate": true,
      "default": true,
      "selfUri": ""
   }
}
  */
AuthorizationApi.prototype.getRolesLeftroleIdComparedefaultRightroleId = function getRolesLeftroleIdComparedefaultRightroleId(leftRoleId, rightRoleId){
    var requestPath = '/api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}';
    var requestQuery = {};
    var requestBody;

    if(leftRoleId === undefined || leftRoleId === null){
      throw new Error('Missing required  parameter: leftRoleId');
    }
    requestPath = requestPath.replace('{leftRoleId}', leftRoleId);
    if(rightRoleId === undefined || rightRoleId === null){
      throw new Error('Missing required  parameter: rightRoleId');
    }
    requestPath = requestPath.replace('{rightRoleId}', rightRoleId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get an unsaved org role to default role comparison
  * @description Allows users to compare their existing roles in an unsaved state to its default role
  * @memberOf AuthorizationApi
  * @instance
  * @param {string} leftRoleId - Left Role ID
  * @param {string} rightRoleId - Right Role id
  * @param {} body - Organization role
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "defaultRoleId": "",
   "permissions": [],
   "permissionPolicies": [],
   "userCount": 0,
   "roleNeedsUpdate": true,
   "default": true
}
  * @example
  * 200 Response Example:
  * {
   "removedPermissionPolicies": [],
   "addedPermissionPolicies": [],
   "samePermissionPolicies": [],
   "userOrgRole": {
      "id": "",
      "name": "",
      "description": "",
      "defaultRoleId": "",
      "permissions": [],
      "permissionPolicies": [],
      "userCount": 0,
      "roleNeedsUpdate": true,
      "default": true,
      "selfUri": ""
   },
   "roleFromDefault": {
      "id": "",
      "name": "",
      "description": "",
      "defaultRoleId": "",
      "permissions": [],
      "permissionPolicies": [],
      "userCount": 0,
      "roleNeedsUpdate": true,
      "default": true,
      "selfUri": ""
   }
}
  */
AuthorizationApi.prototype.postRolesLeftroleIdComparedefaultRightroleId = function postRolesLeftroleIdComparedefaultRightroleId(leftRoleId, rightRoleId, body){
    var requestPath = '/api/v2/authorization/roles/{leftRoleId}/comparedefault/{rightRoleId}';
    var requestQuery = {};
    var requestBody;

    if(leftRoleId === undefined || leftRoleId === null){
      throw new Error('Missing required  parameter: leftRoleId');
    }
    requestPath = requestPath.replace('{leftRoleId}', leftRoleId);
    if(rightRoleId === undefined || rightRoleId === null){
      throw new Error('Missing required  parameter: rightRoleId');
    }
    requestPath = requestPath.replace('{rightRoleId}', rightRoleId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a single organization role.
  * @description Get the organization role specified by its ID.
  * @memberOf AuthorizationApi
  * @instance
  * @param {string} roleId - Role ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "defaultRoleId": "",
   "permissions": [],
   "permissionPolicies": [],
   "userCount": 0,
   "roleNeedsUpdate": true,
   "default": true,
   "selfUri": ""
}
  */
AuthorizationApi.prototype.getRolesRoleId = function getRolesRoleId(roleId){
    var requestPath = '/api/v2/authorization/roles/{roleId}';
    var requestQuery = {};
    var requestBody;

    if(roleId === undefined || roleId === null){
      throw new Error('Missing required  parameter: roleId');
    }
    requestPath = requestPath.replace('{roleId}', roleId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an organization role.
  * @description Update
  * @memberOf AuthorizationApi
  * @instance
  * @param {string} roleId - Role ID
  * @param {} body - Organization role
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "defaultRoleId": "",
   "permissions": [],
   "permissionPolicies": [],
   "userCount": 0,
   "roleNeedsUpdate": true,
   "default": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "defaultRoleId": "",
   "permissions": [],
   "permissionPolicies": [],
   "userCount": 0,
   "roleNeedsUpdate": true,
   "default": true,
   "selfUri": ""
}
  */
AuthorizationApi.prototype.putRolesRoleId = function putRolesRoleId(roleId, body){
    var requestPath = '/api/v2/authorization/roles/{roleId}';
    var requestQuery = {};
    var requestBody;

    if(roleId === undefined || roleId === null){
      throw new Error('Missing required  parameter: roleId');
    }
    requestPath = requestPath.replace('{roleId}', roleId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete an organization role.
  * @memberOf AuthorizationApi
  * @instance
  * @param {string} roleId - Role ID
  */
AuthorizationApi.prototype.deleteRolesRoleId = function deleteRolesRoleId(roleId){
    var requestPath = '/api/v2/authorization/roles/{roleId}';
    var requestQuery = {};
    var requestBody;

    if(roleId === undefined || roleId === null){
      throw new Error('Missing required  parameter: roleId');
    }
    requestPath = requestPath.replace('{roleId}', roleId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Patch Organization Role for needsUpdate Field
  * @description Patch Organization Role for needsUpdate Field
  * @memberOf AuthorizationApi
  * @instance
  * @param {string} roleId - Role ID
  * @param {} body - Organization role
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "defaultRoleId": "",
   "permissions": [],
   "permissionPolicies": [],
   "userCount": 0,
   "roleNeedsUpdate": true,
   "default": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "defaultRoleId": "",
   "permissions": [],
   "permissionPolicies": [],
   "userCount": 0,
   "roleNeedsUpdate": true,
   "default": true,
   "selfUri": ""
}
  */
AuthorizationApi.prototype.patchRolesRoleId = function patchRolesRoleId(roleId, body){
    var requestPath = '/api/v2/authorization/roles/{roleId}';
    var requestQuery = {};
    var requestBody;

    if(roleId === undefined || roleId === null){
      throw new Error('Missing required  parameter: roleId');
    }
    requestPath = requestPath.replace('{roleId}', roleId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Sets the users for the role
  * @memberOf AuthorizationApi
  * @instance
  * @param {string} roleId - Role ID
  * @param {} body - List of user IDs
  */
AuthorizationApi.prototype.putRolesRoleIdUsersAdd = function putRolesRoleIdUsersAdd(roleId, body){
    var requestPath = '/api/v2/authorization/roles/{roleId}/users/add';
    var requestQuery = {};
    var requestBody;

    if(roleId === undefined || roleId === null){
      throw new Error('Missing required  parameter: roleId');
    }
    requestPath = requestPath.replace('{roleId}', roleId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Removes the users from the role
  * @memberOf AuthorizationApi
  * @instance
  * @param {string} roleId - Role ID
  * @param {} body - List of user IDs
  */
AuthorizationApi.prototype.putRolesRoleIdUsersRemove = function putRolesRoleIdUsersRemove(roleId, body){
    var requestPath = '/api/v2/authorization/roles/{roleId}/users/remove';
    var requestQuery = {};
    var requestBody;

    if(roleId === undefined || roleId === null){
      throw new Error('Missing required  parameter: roleId');
    }
    requestPath = requestPath.replace('{roleId}', roleId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Returns a listing of roles and permissions for a user.
  * @memberOf AuthorizationApi
  * @instance
  * @param {string} userId - User ID
  * @example
  * 200 Response Example:
  * {
   "roles": [],
   "permissions": [],
   "permissionPolicies": []
}
  */
AuthorizationApi.prototype.getUserIdRoles = function getUserIdRoles(userId){
    var requestPath = '/api/v2/users/{userId}/roles';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Sets the user's roles
  * @memberOf AuthorizationApi
  * @instance
  * @param {string} userId - User ID
  * @param {} body - List of roles
  * @example
  * 200 Response Example:
  * {
   "roles": [],
   "permissions": [],
   "permissionPolicies": []
}
  */
AuthorizationApi.prototype.putUserIdRoles = function putUserIdRoles(userId, body){
    var requestPath = '/api/v2/users/{userId}/roles';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Removes all the roles from the user.
  * @memberOf AuthorizationApi
  * @instance
  * @param {string} userId - User ID
  */
AuthorizationApi.prototype.deleteUserIdRoles = function deleteUserIdRoles(userId){
    var requestPath = '/api/v2/users/{userId}/roles';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};


module.exports = AuthorizationApi;

},{}],6:[function(require,module,exports){
/**
* @class ConfigurationApi
* @example
* var api = new purecloud.platform.ConfigurationApi(pureCloudSession);
*/
function ConfigurationApi(session) {
    if(!(this instanceof ConfigurationApi)) {
        return new ConfigurationApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('ConfigurationApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get encryption key list
  * @memberOf ConfigurationApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ConfigurationApi.prototype.getRecordingkeys = function getRecordingkeys(pageSize, pageNumber){
    var requestPath = '/api/v2/recording/recordingkeys';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create encryption key
  * @memberOf ConfigurationApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "createDate": "",
   "keydataSummary": "",
   "user": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "selfUri": ""
}
  */
ConfigurationApi.prototype.postRecordingkeys = function postRecordingkeys(){
    var requestPath = '/api/v2/recording/recordingkeys';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get key rotation schedule
  * @memberOf ConfigurationApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "period": "",
   "selfUri": ""
}
  */
ConfigurationApi.prototype.getRecordingkeysRotationschedule = function getRecordingkeysRotationschedule(){
    var requestPath = '/api/v2/recording/recordingkeys/rotationschedule';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update key rotation schedule
  * @memberOf ConfigurationApi
  * @instance
  * @param {} body - KeyRotationSchedule
  * @example
  * Body Example:
  * {
   "name": "",
   "period": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "period": "",
   "selfUri": ""
}
  */
ConfigurationApi.prototype.putRecordingkeysRotationschedule = function putRecordingkeysRotationschedule(body){
    var requestPath = '/api/v2/recording/recordingkeys/rotationschedule';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};


module.exports = ConfigurationApi;

},{}],7:[function(require,module,exports){
/**
* @class ContentManagementApi
* @example
* var api = new purecloud.platform.ContentManagementApi(pureCloudSession);
*/
function ContentManagementApi(session) {
    if(!(this instanceof ContentManagementApi)) {
        return new ContentManagementApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('ContentManagementApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Query audits
  * @memberOf ContentManagementApi
  * @instance
  * @param {} body - Allows for a filtered query returning facet information
  * @example
  * Body Example:
  * {
   "queryPhrase": "",
   "pageNumber": 0,
   "pageSize": 0,
   "facetNameRequests": [],
   "sort": [],
   "filters": [],
   "attributeFilters": [],
   "includeShares": true
}
  * @example
  * 200 Response Example:
  * {
   "results": {
      "pageSize": 0,
      "pageNumber": 0,
      "total": 0,
      "entities": [],
      "selfUri": "",
      "firstUri": "",
      "previousUri": "",
      "nextUri": "",
      "lastUri": "",
      "pageCount": 0
   },
   "facetInfo": {
      "attributes": [],
      "facets": []
   }
}
  */
ContentManagementApi.prototype.postAuditquery = function postAuditquery(body){
    var requestPath = '/api/v2/contentmanagement/auditquery';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of documents.
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} workspaceId - Workspace ID
  * @param {string} name - Name
  * @param {string} expand - Expand some document fields
  acl,
  workspace,
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortBy - name or dateCreated
  * @param {string} sortOrder - ascending or descending
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ContentManagementApi.prototype.getDocuments = function getDocuments(workspaceId, name, expand, pageSize, pageNumber, sortBy, sortOrder){
    var requestPath = '/api/v2/contentmanagement/documents';
    var requestQuery = {};
    var requestBody;

    if(workspaceId === undefined || workspaceId === null){
      throw new Error('Missing required  parameter: workspaceId');
    }
    requestQuery["workspaceId"] = workspaceId;
    requestQuery["name"] = name;
    requestQuery["expand"] = expand;
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Add a document.
  * @memberOf ContentManagementApi
  * @instance
  * @param {} body - Document
  * @param {string} copySource - Copy a document within a workspace or to a new workspace. Provide a document ID as the copy source.
  * @param {string} moveSource - Move a document to a new workspace. Provide a document ID as the move source.
  * @param {boolean} override - Override any lock on the source document
  * @example
  * Body Example:
  * {
   "name": "",
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "tags": [],
   "tagIds": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "changeNumber": 0,
   "dateCreated": "",
   "dateModified": "",
   "dateUploaded": "",
   "contentUri": "",
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "createdBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "uploadedBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "contentType": "",
   "contentLength": 0,
   "systemType": "",
   "filename": "",
   "pageCount": 0,
   "read": true,
   "callerAddress": "",
   "receiverAddress": "",
   "tags": [],
   "tagValues": [],
   "attributes": [],
   "thumbnails": [],
   "uploadStatus": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "uploadDestinationUri": "",
   "uploadMethod": "",
   "lockInfo": {
      "lockedBy": {},
      "dateCreated": "",
      "dateExpires": "",
      "action": ""
   },
   "acl": [],
   "sharingStatus": "",
   "sharingUri": "",
   "downloadSharingUri": "",
   "selfUri": ""
}
  */
ContentManagementApi.prototype.postDocuments = function postDocuments(body, copySource, moveSource, override){
    var requestPath = '/api/v2/contentmanagement/documents';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["copySource"] = copySource;
    requestQuery["moveSource"] = moveSource;
    requestQuery["override"] = override;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a document.
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} documentId - Document ID
  * @param {string} expand - Expand some document fields
  lockInfo,
  acl,
  workspace,
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "changeNumber": 0,
   "dateCreated": "",
   "dateModified": "",
   "dateUploaded": "",
   "contentUri": "",
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "createdBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "uploadedBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "contentType": "",
   "contentLength": 0,
   "systemType": "",
   "filename": "",
   "pageCount": 0,
   "read": true,
   "callerAddress": "",
   "receiverAddress": "",
   "tags": [],
   "tagValues": [],
   "attributes": [],
   "thumbnails": [],
   "uploadStatus": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "uploadDestinationUri": "",
   "uploadMethod": "",
   "lockInfo": {
      "lockedBy": {},
      "dateCreated": "",
      "dateExpires": "",
      "action": ""
   },
   "acl": [],
   "sharingStatus": "",
   "sharingUri": "",
   "downloadSharingUri": "",
   "selfUri": ""
}
  */
ContentManagementApi.prototype.getDocumentsDocumentId = function getDocumentsDocumentId(documentId, expand){
    var requestPath = '/api/v2/contentmanagement/documents/{documentId}';
    var requestQuery = {};
    var requestBody;

    if(documentId === undefined || documentId === null){
      throw new Error('Missing required  parameter: documentId');
    }
    requestPath = requestPath.replace('{documentId}', documentId);
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a document.
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} documentId - Document ID
  * @param {} body - Document
  * @param {string} expand - Expand some document fields
  acl,
  * @param {boolean} override - Override any lock on the document
  * @example
  * Body Example:
  * {
   "changeNumber": 0,
   "name": "",
   "read": true,
   "addTags": [],
   "removeTags": [],
   "addTagIds": [],
   "removeTagIds": [],
   "updateAttributes": [],
   "removeAttributes": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "changeNumber": 0,
   "dateCreated": "",
   "dateModified": "",
   "dateUploaded": "",
   "contentUri": "",
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "createdBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "uploadedBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "contentType": "",
   "contentLength": 0,
   "systemType": "",
   "filename": "",
   "pageCount": 0,
   "read": true,
   "callerAddress": "",
   "receiverAddress": "",
   "tags": [],
   "tagValues": [],
   "attributes": [],
   "thumbnails": [],
   "uploadStatus": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "uploadDestinationUri": "",
   "uploadMethod": "",
   "lockInfo": {
      "lockedBy": {},
      "dateCreated": "",
      "dateExpires": "",
      "action": ""
   },
   "acl": [],
   "sharingStatus": "",
   "sharingUri": "",
   "downloadSharingUri": "",
   "selfUri": ""
}
  */
ContentManagementApi.prototype.postDocumentsDocumentId = function postDocumentsDocumentId(documentId, body, expand, override){
    var requestPath = '/api/v2/contentmanagement/documents/{documentId}';
    var requestQuery = {};
    var requestBody;

    if(documentId === undefined || documentId === null){
      throw new Error('Missing required  parameter: documentId');
    }
    requestPath = requestPath.replace('{documentId}', documentId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["expand"] = expand;
    requestQuery["override"] = override;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a document.
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} documentId - Document ID
  * @param {boolean} override - Override any lock on the document
  */
ContentManagementApi.prototype.deleteDocumentsDocumentId = function deleteDocumentsDocumentId(documentId, override){
    var requestPath = '/api/v2/contentmanagement/documents/{documentId}';
    var requestQuery = {};
    var requestBody;

    if(documentId === undefined || documentId === null){
      throw new Error('Missing required  parameter: documentId');
    }
    requestPath = requestPath.replace('{documentId}', documentId);
    requestQuery["override"] = override;
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of audits for a document.
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} documentId - Document ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} transactionFilter - Transaction filter
  * @param {string} level - level
  * @param {string} sortBy - Sort by
  * @param {string} sortOrder - Sort order
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ContentManagementApi.prototype.getDocumentsDocumentIdAudits = function getDocumentsDocumentIdAudits(documentId, pageSize, pageNumber, transactionFilter, level, sortBy, sortOrder){
    var requestPath = '/api/v2/contentmanagement/documents/{documentId}/audits';
    var requestQuery = {};
    var requestBody;

    if(documentId === undefined || documentId === null){
      throw new Error('Missing required  parameter: documentId');
    }
    requestPath = requestPath.replace('{documentId}', documentId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["transactionFilter"] = transactionFilter;
    requestQuery["level"] = level;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Download a document.
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} documentId - Document ID
  * @param {string} disposition - Request how the content will be downloaded: attached as a file or inline. Default is attachment.
  attachment,
  inline,
  * @param {string} contentType - The requested format for the specified document. If supported, the document will be returned in that format. Example contentType=audio/wav
  * @example
  * 200 Response Example:
  * {
   "contentLocationUri": "",
   "imageUri": "",
   "thumbnails": []
}
  */
ContentManagementApi.prototype.getDocumentsDocumentIdContent = function getDocumentsDocumentIdContent(documentId, disposition, contentType){
    var requestPath = '/api/v2/contentmanagement/documents/{documentId}/content';
    var requestQuery = {};
    var requestBody;

    if(documentId === undefined || documentId === null){
      throw new Error('Missing required  parameter: documentId');
    }
    requestPath = requestPath.replace('{documentId}', documentId);
    requestQuery["disposition"] = disposition;
    requestQuery["contentType"] = contentType;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Replace the contents of a document.
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} documentId - Document ID
  * @param {} body - Replace Request
  * @param {boolean} override - Override any lock on the document
  * @example
  * Body Example:
  * {
   "changeNumber": 0,
   "name": "",
   "authToken": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "changeNumber": 0,
   "uploadStatus": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "uploadDestinationUri": "",
   "uploadMethod": ""
}
  */
ContentManagementApi.prototype.postDocumentsDocumentIdContent = function postDocumentsDocumentIdContent(documentId, body, override){
    var requestPath = '/api/v2/contentmanagement/documents/{documentId}/content';
    var requestQuery = {};
    var requestBody;

    if(documentId === undefined || documentId === null){
      throw new Error('Missing required  parameter: documentId');
    }
    requestPath = requestPath.replace('{documentId}', documentId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["override"] = override;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query content
  * @memberOf ContentManagementApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortBy - name or dateCreated
  * @param {string} sortOrder - ascending or descending
  * @param {string} queryPhrase - Phrase tokens are ANDed together over all searchable fields
  * @param {string} expand - Expand some document fields
  acl,
  workspace,
  * @example
  * 200 Response Example:
  * {
   "results": {
      "pageSize": 0,
      "pageNumber": 0,
      "total": 0,
      "entities": [],
      "selfUri": "",
      "firstUri": "",
      "previousUri": "",
      "nextUri": "",
      "lastUri": "",
      "pageCount": 0
   },
   "facetInfo": {
      "attributes": [],
      "facets": []
   }
}
  */
ContentManagementApi.prototype.getQuery = function getQuery(pageSize, pageNumber, sortBy, sortOrder, queryPhrase, expand){
    var requestPath = '/api/v2/contentmanagement/query';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    if(queryPhrase === undefined || queryPhrase === null){
      throw new Error('Missing required  parameter: queryPhrase');
    }
    requestQuery["queryPhrase"] = queryPhrase;
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query content
  * @memberOf ContentManagementApi
  * @instance
  * @param {} body - Allows for a filtered query returning facet information
  * @param {string} expand - Expand some document fields
  acl,
  workspace,
  * @example
  * Body Example:
  * {
   "queryPhrase": "",
   "pageNumber": 0,
   "pageSize": 0,
   "facetNameRequests": [],
   "sort": [],
   "filters": [],
   "attributeFilters": [],
   "includeShares": true
}
  * @example
  * 200 Response Example:
  * {
   "results": {
      "pageSize": 0,
      "pageNumber": 0,
      "total": 0,
      "entities": [],
      "selfUri": "",
      "firstUri": "",
      "previousUri": "",
      "nextUri": "",
      "lastUri": "",
      "pageCount": 0
   },
   "facetInfo": {
      "attributes": [],
      "facets": []
   }
}
  */
ContentManagementApi.prototype.postQuery = function postQuery(body, expand){
    var requestPath = '/api/v2/contentmanagement/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["expand"] = expand;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a List of Security Profiles
  * @memberOf ContentManagementApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ContentManagementApi.prototype.getSecurityprofiles = function getSecurityprofiles(){
    var requestPath = '/api/v2/contentmanagement/securityprofiles';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Security Profile
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} securityProfileId - Security Profile Id
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "permissions": [],
   "selfUri": ""
}
  */
ContentManagementApi.prototype.getSecurityprofilesSecurityprofileId = function getSecurityprofilesSecurityprofileId(securityProfileId){
    var requestPath = '/api/v2/contentmanagement/securityprofiles/{securityProfileId}';
    var requestQuery = {};
    var requestBody;

    if(securityProfileId === undefined || securityProfileId === null){
      throw new Error('Missing required  parameter: securityProfileId');
    }
    requestPath = requestPath.replace('{securityProfileId}', securityProfileId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get shared documents. Securely download a shared document.
  * @description This method requires the download sharing URI obtained in the get document response (downloadSharingUri). Documents may be shared between users in the same workspace. Documents may also be shared between any user by creating a content management share.
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} sharedId - Shared ID
  * @param {boolean} redirect - Turn on or off redirect
  * @param {string} disposition - Request how the share content will be downloaded: attached as a file or inline. Default is attachment.
  attachment,
  inline,
  none,
  * @param {string} contentType - The requested format for the specified document. If supported, the document will be returned in that format. Example contentType=audio/wav
  * @param {string} expand - Expand some document fields
  document.acl,
  */
ContentManagementApi.prototype.getSharedSharedId = function getSharedSharedId(sharedId, redirect, disposition, contentType, expand){
    var requestPath = '/api/v2/contentmanagement/shared/{sharedId}';
    var requestQuery = {};
    var requestBody;

    if(sharedId === undefined || sharedId === null){
      throw new Error('Missing required  parameter: sharedId');
    }
    requestPath = requestPath.replace('{sharedId}', sharedId);
    requestQuery["redirect"] = redirect;
    requestQuery["disposition"] = disposition;
    requestQuery["contentType"] = contentType;
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Gets a list of shares.  You must specify at least one filter (e.g. entityId).
  * @description Failing to specify a filter will return 400.
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} entityId - Filters the shares returned to only the entity specified by the value of this parameter.
  * @param {string} expand - Expand share fields
  member,
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ContentManagementApi.prototype.getShares = function getShares(entityId, expand, pageSize, pageNumber){
    var requestPath = '/api/v2/contentmanagement/shares';
    var requestQuery = {};
    var requestBody;

    requestQuery["entityId"] = entityId;
    requestQuery["expand"] = expand;
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Creates a new share or updates an existing share if the entity has already been shared
  * @memberOf ContentManagementApi
  * @instance
  * @param {} body - CreateShareRequest - entity id and type and a single member or list of members are required
  * @example
  * Body Example:
  * {
   "sharedEntityType": "",
   "sharedEntity": {
      "id": ""
   },
   "memberType": "",
   "member": {
      "id": ""
   },
   "members": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "sharedEntityType": "",
   "sharedEntity": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "memberType": "",
   "member": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "sharedBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "succeeded": [],
   "failed": [],
   "selfUri": ""
}
  */
ContentManagementApi.prototype.postShares = function postShares(body){
    var requestPath = '/api/v2/contentmanagement/shares';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Retrieve details about an existing share.
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} shareId - Share ID
  * @param {string} expand - Expand share fields
  member,
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "sharedEntityType": "",
   "sharedEntity": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "memberType": "",
   "member": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "sharedBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "user": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "group": {
      "id": "",
      "name": "",
      "description": "",
      "dateModified": "",
      "memberCount": 0,
      "state": "",
      "version": 0,
      "type": "",
      "images": [],
      "addresses": [],
      "rulesVisible": true,
      "visibility": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
ContentManagementApi.prototype.getSharesShareId = function getSharesShareId(shareId, expand){
    var requestPath = '/api/v2/contentmanagement/shares/{shareId}';
    var requestQuery = {};
    var requestBody;

    if(shareId === undefined || shareId === null){
      throw new Error('Missing required  parameter: shareId');
    }
    requestPath = requestPath.replace('{shareId}', shareId);
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Deletes an existing share.
  * @description This revokes sharing rights specified in the share record
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} shareId - Share ID
  */
ContentManagementApi.prototype.deleteSharesShareId = function deleteSharesShareId(shareId){
    var requestPath = '/api/v2/contentmanagement/shares/{shareId}';
    var requestQuery = {};
    var requestBody;

    if(shareId === undefined || shareId === null){
      throw new Error('Missing required  parameter: shareId');
    }
    requestPath = requestPath.replace('{shareId}', shareId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of statuses for pending operations
  * @memberOf ContentManagementApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ContentManagementApi.prototype.getStatus = function getStatus(pageSize, pageNumber){
    var requestPath = '/api/v2/contentmanagement/status';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a status.
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} statusId - Status ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "expiration": "",
   "userId": "",
   "statusCode": "",
   "commandType": "",
   "document": {
      "id": "",
      "name": "",
      "changeNumber": 0,
      "dateCreated": "",
      "dateModified": "",
      "dateUploaded": "",
      "contentUri": "",
      "workspace": {},
      "createdBy": {},
      "uploadedBy": {},
      "contentType": "",
      "contentLength": 0,
      "systemType": "",
      "filename": "",
      "pageCount": 0,
      "read": true,
      "callerAddress": "",
      "receiverAddress": "",
      "tags": [],
      "tagValues": [],
      "attributes": [],
      "thumbnails": [],
      "uploadStatus": {},
      "uploadDestinationUri": "",
      "uploadMethod": "",
      "lockInfo": {},
      "acl": [],
      "sharingStatus": "",
      "sharingUri": "",
      "downloadSharingUri": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
ContentManagementApi.prototype.getStatusStatusId = function getStatusStatusId(statusId){
    var requestPath = '/api/v2/contentmanagement/status/{statusId}';
    var requestQuery = {};
    var requestBody;

    if(statusId === undefined || statusId === null){
      throw new Error('Missing required  parameter: statusId');
    }
    requestPath = requestPath.replace('{statusId}', statusId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Cancel the command for this status
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} statusId - Status ID
  */
ContentManagementApi.prototype.deleteStatusStatusId = function deleteStatusStatusId(statusId){
    var requestPath = '/api/v2/contentmanagement/status/{statusId}';
    var requestQuery = {};
    var requestBody;

    if(statusId === undefined || statusId === null){
      throw new Error('Missing required  parameter: statusId');
    }
    requestPath = requestPath.replace('{statusId}', statusId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get usage details.
  * @memberOf ContentManagementApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "types": []
}
  */
ContentManagementApi.prototype.getUsage = function getUsage(){
    var requestPath = '/api/v2/contentmanagement/usage';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of workspaces.
  * @description Specifying 'content' access will return all workspaces the user has document access to, while 'admin' access will return all group workspaces the user has administrative rights to.
  * @memberOf ContentManagementApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} access - Requested access level
  content,
  admin,
  document:create,
  document:viewContent,
  document:viewMetadata,
  document:download,
  document:delete,
  document:update,
  document:share,
  document:shareView,
  document:email,
  document:print,
  document:auditView,
  document:replace,
  document:tag,
  tag:create,
  tag:view,
  tag:update,
  tag:apply,
  tag:remove,
  tag:delete,
  * @param {string} expand - Expand some workspace fields
  summary,
  acl,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ContentManagementApi.prototype.getWorkspaces = function getWorkspaces(pageSize, pageNumber, access, expand){
    var requestPath = '/api/v2/contentmanagement/workspaces';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["access"] = access;
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a group workspace
  * @memberOf ContentManagementApi
  * @instance
  * @param {} body - Workspace
  * @example
  * Body Example:
  * {
   "name": "",
   "bucket": "",
   "description": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "isCurrentUserWorkspace": true,
   "user": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "bucket": "",
   "dateCreated": "",
   "dateModified": "",
   "summary": {
      "totalDocumentCount": 0,
      "totalDocumentByteCount": 0
   },
   "acl": [],
   "description": "",
   "selfUri": ""
}
  */
ContentManagementApi.prototype.postWorkspaces = function postWorkspaces(body){
    var requestPath = '/api/v2/contentmanagement/workspaces';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a workspace.
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} workspaceId - Workspace ID
  * @param {string} expand - Expand some workspace fields
  summary,
  acl,
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "isCurrentUserWorkspace": true,
   "user": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "bucket": "",
   "dateCreated": "",
   "dateModified": "",
   "summary": {
      "totalDocumentCount": 0,
      "totalDocumentByteCount": 0
   },
   "acl": [],
   "description": "",
   "selfUri": ""
}
  */
ContentManagementApi.prototype.getWorkspacesWorkspaceId = function getWorkspacesWorkspaceId(workspaceId, expand){
    var requestPath = '/api/v2/contentmanagement/workspaces/{workspaceId}';
    var requestQuery = {};
    var requestBody;

    if(workspaceId === undefined || workspaceId === null){
      throw new Error('Missing required  parameter: workspaceId');
    }
    requestPath = requestPath.replace('{workspaceId}', workspaceId);
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a workspace
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} workspaceId - Workspace ID
  * @param {} body - Workspace
  * @example
  * Body Example:
  * {
   "name": "",
   "type": "",
   "isCurrentUserWorkspace": true,
   "user": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "bucket": "",
   "dateCreated": "",
   "dateModified": "",
   "summary": {
      "totalDocumentCount": 0,
      "totalDocumentByteCount": 0
   },
   "acl": [],
   "description": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "isCurrentUserWorkspace": true,
   "user": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "bucket": "",
   "dateCreated": "",
   "dateModified": "",
   "summary": {
      "totalDocumentCount": 0,
      "totalDocumentByteCount": 0
   },
   "acl": [],
   "description": "",
   "selfUri": ""
}
  */
ContentManagementApi.prototype.putWorkspacesWorkspaceId = function putWorkspacesWorkspaceId(workspaceId, body){
    var requestPath = '/api/v2/contentmanagement/workspaces/{workspaceId}';
    var requestQuery = {};
    var requestBody;

    if(workspaceId === undefined || workspaceId === null){
      throw new Error('Missing required  parameter: workspaceId');
    }
    requestPath = requestPath.replace('{workspaceId}', workspaceId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a workspace
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} workspaceId - Workspace ID
  * @param {string} moveChildrenToWorkspaceId - New location for objects in deleted workspace.
  */
ContentManagementApi.prototype.deleteWorkspacesWorkspaceId = function deleteWorkspacesWorkspaceId(workspaceId, moveChildrenToWorkspaceId){
    var requestPath = '/api/v2/contentmanagement/workspaces/{workspaceId}';
    var requestQuery = {};
    var requestBody;

    if(workspaceId === undefined || workspaceId === null){
      throw new Error('Missing required  parameter: workspaceId');
    }
    requestPath = requestPath.replace('{workspaceId}', workspaceId);
    requestQuery["moveChildrenToWorkspaceId"] = moveChildrenToWorkspaceId;
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list workspace members
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} workspaceId - Workspace ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} expand - Expand workspace member fields
  member,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ContentManagementApi.prototype.getWorkspacesWorkspaceIdMembers = function getWorkspacesWorkspaceIdMembers(workspaceId, pageSize, pageNumber, expand){
    var requestPath = '/api/v2/contentmanagement/workspaces/{workspaceId}/members';
    var requestQuery = {};
    var requestBody;

    if(workspaceId === undefined || workspaceId === null){
      throw new Error('Missing required  parameter: workspaceId');
    }
    requestPath = requestPath.replace('{workspaceId}', workspaceId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a workspace member
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} workspaceId - Workspace ID
  * @param {string} memberId - Member ID
  * @param {string} expand - Expand workspace member fields
  member,
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "memberType": "",
   "member": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "user": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "group": {
      "id": "",
      "name": "",
      "description": "",
      "dateModified": "",
      "memberCount": 0,
      "state": "",
      "version": 0,
      "type": "",
      "images": [],
      "addresses": [],
      "rulesVisible": true,
      "visibility": "",
      "selfUri": ""
   },
   "securityProfile": {
      "id": "",
      "name": "",
      "permissions": [],
      "selfUri": ""
   },
   "selfUri": ""
}
  */
ContentManagementApi.prototype.getWorkspacesWorkspaceIdMembersMemberId = function getWorkspacesWorkspaceIdMembersMemberId(workspaceId, memberId, expand){
    var requestPath = '/api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}';
    var requestQuery = {};
    var requestBody;

    if(workspaceId === undefined || workspaceId === null){
      throw new Error('Missing required  parameter: workspaceId');
    }
    requestPath = requestPath.replace('{workspaceId}', workspaceId);
    if(memberId === undefined || memberId === null){
      throw new Error('Missing required  parameter: memberId');
    }
    requestPath = requestPath.replace('{memberId}', memberId);
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Add a member to a workspace
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} workspaceId - Workspace ID
  * @param {string} memberId - Member ID
  * @param {} body - Workspace
  * @example
  * Body Example:
  * {
   "name": "",
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "memberType": "",
   "member": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "user": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "group": {
      "name": "",
      "description": "",
      "type": "",
      "images": [],
      "addresses": [],
      "rulesVisible": true,
      "visibility": ""
   },
   "securityProfile": {
      "name": "",
      "permissions": []
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "memberType": "",
   "member": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "user": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "group": {
      "id": "",
      "name": "",
      "description": "",
      "dateModified": "",
      "memberCount": 0,
      "state": "",
      "version": 0,
      "type": "",
      "images": [],
      "addresses": [],
      "rulesVisible": true,
      "visibility": "",
      "selfUri": ""
   },
   "securityProfile": {
      "id": "",
      "name": "",
      "permissions": [],
      "selfUri": ""
   },
   "selfUri": ""
}
  */
ContentManagementApi.prototype.putWorkspacesWorkspaceIdMembersMemberId = function putWorkspacesWorkspaceIdMembersMemberId(workspaceId, memberId, body){
    var requestPath = '/api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}';
    var requestQuery = {};
    var requestBody;

    if(workspaceId === undefined || workspaceId === null){
      throw new Error('Missing required  parameter: workspaceId');
    }
    requestPath = requestPath.replace('{workspaceId}', workspaceId);
    if(memberId === undefined || memberId === null){
      throw new Error('Missing required  parameter: memberId');
    }
    requestPath = requestPath.replace('{memberId}', memberId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a member from a workspace
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} workspaceId - Workspace ID
  * @param {string} memberId - Member ID
  */
ContentManagementApi.prototype.deleteWorkspacesWorkspaceIdMembersMemberId = function deleteWorkspacesWorkspaceIdMembersMemberId(workspaceId, memberId){
    var requestPath = '/api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}';
    var requestQuery = {};
    var requestBody;

    if(workspaceId === undefined || workspaceId === null){
      throw new Error('Missing required  parameter: workspaceId');
    }
    requestPath = requestPath.replace('{workspaceId}', workspaceId);
    if(memberId === undefined || memberId === null){
      throw new Error('Missing required  parameter: memberId');
    }
    requestPath = requestPath.replace('{memberId}', memberId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of workspace tags
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} workspaceId - Workspace ID
  * @param {string} value - filter the list of tags returned
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} expand - Expand some document fields
  acl,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ContentManagementApi.prototype.getWorkspacesWorkspaceIdTagvalues = function getWorkspacesWorkspaceIdTagvalues(workspaceId, value, pageSize, pageNumber, expand){
    var requestPath = '/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues';
    var requestQuery = {};
    var requestBody;

    if(workspaceId === undefined || workspaceId === null){
      throw new Error('Missing required  parameter: workspaceId');
    }
    requestPath = requestPath.replace('{workspaceId}', workspaceId);
    requestQuery["value"] = value;
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a workspace tag
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} workspaceId - Workspace ID
  * @param {} body - tag
  * @example
  * Body Example:
  * {
   "name": "",
   "inUse": true,
   "acl": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "inUse": true,
   "acl": [],
   "selfUri": ""
}
  */
ContentManagementApi.prototype.postWorkspacesWorkspaceIdTagvalues = function postWorkspacesWorkspaceIdTagvalues(workspaceId, body){
    var requestPath = '/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues';
    var requestQuery = {};
    var requestBody;

    if(workspaceId === undefined || workspaceId === null){
      throw new Error('Missing required  parameter: workspaceId');
    }
    requestPath = requestPath.replace('{workspaceId}', workspaceId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Perform a prefix query on tags in the workspace
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} workspaceId - Workspace ID
  * @param {} body - query
  * @param {string} expand - Expand some document fields
  acl,
  * @example
  * Body Example:
  * {
   "query": "",
   "pageNumber": 0,
   "pageSize": 0
}
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ContentManagementApi.prototype.postWorkspacesWorkspaceIdTagvaluesQuery = function postWorkspacesWorkspaceIdTagvaluesQuery(workspaceId, body, expand){
    var requestPath = '/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/query';
    var requestQuery = {};
    var requestBody;

    if(workspaceId === undefined || workspaceId === null){
      throw new Error('Missing required  parameter: workspaceId');
    }
    requestPath = requestPath.replace('{workspaceId}', workspaceId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["expand"] = expand;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a workspace tag
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} workspaceId - Workspace ID
  * @param {string} tagId - Tag ID
  * @param {string} expand - Expand some document fields
  acl,
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "inUse": true,
   "acl": [],
   "selfUri": ""
}
  */
ContentManagementApi.prototype.getWorkspacesWorkspaceIdTagvaluesTagId = function getWorkspacesWorkspaceIdTagvaluesTagId(workspaceId, tagId, expand){
    var requestPath = '/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}';
    var requestQuery = {};
    var requestBody;

    if(workspaceId === undefined || workspaceId === null){
      throw new Error('Missing required  parameter: workspaceId');
    }
    requestPath = requestPath.replace('{workspaceId}', workspaceId);
    if(tagId === undefined || tagId === null){
      throw new Error('Missing required  parameter: tagId');
    }
    requestPath = requestPath.replace('{tagId}', tagId);
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a workspace tag. Will update all documents with the new tag value.
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} workspaceId - Workspace ID
  * @param {string} tagId - Tag ID
  * @param {} body - Workspace
  * @example
  * Body Example:
  * {
   "name": "",
   "inUse": true,
   "acl": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "inUse": true,
   "acl": [],
   "selfUri": ""
}
  */
ContentManagementApi.prototype.putWorkspacesWorkspaceIdTagvaluesTagId = function putWorkspacesWorkspaceIdTagvaluesTagId(workspaceId, tagId, body){
    var requestPath = '/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}';
    var requestQuery = {};
    var requestBody;

    if(workspaceId === undefined || workspaceId === null){
      throw new Error('Missing required  parameter: workspaceId');
    }
    requestPath = requestPath.replace('{workspaceId}', workspaceId);
    if(tagId === undefined || tagId === null){
      throw new Error('Missing required  parameter: tagId');
    }
    requestPath = requestPath.replace('{tagId}', tagId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete workspace tag
  * @description Delete a tag from a workspace. Will remove this tag from all documents.
  * @memberOf ContentManagementApi
  * @instance
  * @param {string} workspaceId - Workspace ID
  * @param {string} tagId - Tag ID
  */
ContentManagementApi.prototype.deleteWorkspacesWorkspaceIdTagvaluesTagId = function deleteWorkspacesWorkspaceIdTagvaluesTagId(workspaceId, tagId){
    var requestPath = '/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}';
    var requestQuery = {};
    var requestBody;

    if(workspaceId === undefined || workspaceId === null){
      throw new Error('Missing required  parameter: workspaceId');
    }
    requestPath = requestPath.replace('{workspaceId}', workspaceId);
    if(tagId === undefined || tagId === null){
      throw new Error('Missing required  parameter: tagId');
    }
    requestPath = requestPath.replace('{tagId}', tagId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};


module.exports = ContentManagementApi;

},{}],8:[function(require,module,exports){
/**
* @class ConversationsApi
* @example
* var api = new purecloud.platform.ConversationsApi(pureCloudSession);
*/
function ConversationsApi(session) {
    if(!(this instanceof ConversationsApi)) {
        return new ConversationsApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('ConversationsApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Query for conversation aggregates
  * @memberOf ConversationsApi
  * @instance
  * @param {} body - query
  * @example
  * Body Example:
  * {
   "interval": "",
   "granularity": "",
   "groupBy": [],
   "filter": {
      "type": "",
      "clauses": [],
      "predicates": []
   },
   "metrics": [],
   "flattenMultivaluedDimensions": true
}
  * @example
  * 200 Response Example:
  * {
   "results": []
}
  */
ConversationsApi.prototype.postConversationsAggregatesQuery = function postConversationsAggregatesQuery(body){
    var requestPath = '/api/v2/analytics/conversations/aggregates/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query for conversation details
  * @memberOf ConversationsApi
  * @instance
  * @param {} body - query
  * @example
  * Body Example:
  * {
   "interval": "",
   "conversationFilters": [],
   "evaluationFilters": [],
   "segmentFilters": [],
   "aggregations": [],
   "paging": {
      "pageSize": 0,
      "pageNumber": 0
   },
   "order": "",
   "orderBy": ""
}
  * @example
  * 200 Response Example:
  * {
   "conversations": [],
   "aggregations": []
}
  */
ConversationsApi.prototype.postConversationsDetailsQuery = function postConversationsDetailsQuery(body){
    var requestPath = '/api/v2/analytics/conversations/details/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a conversation by id
  * @memberOf ConversationsApi
  * @instance
  * @param {string} conversationId - conversationId
  * @example
  * 200 Response Example:
  * {
   "conversationId": "",
   "conversationStart": "",
   "participants": [],
   "evaluations": []
}
  */
ConversationsApi.prototype.getConversationsConversationIdDetails = function getConversationsConversationIdDetails(conversationId){
    var requestPath = '/api/v2/analytics/conversations/{conversationId}/details';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Index conversation properties
  * @memberOf ConversationsApi
  * @instance
  * @param {string} conversationId - conversationId
  * @param {} body - request
  * @example
  * Body Example:
  * {
   "sessionId": "",
   "timestamp": 0,
   "properties": []
}
  * @example
  * 200 Response Example:
  * {
   "sessionId": "",
   "timestamp": 0,
   "properties": []
}
  */
ConversationsApi.prototype.postConversationsConversationIdDetailsProperties = function postConversationsConversationIdDetailsProperties(conversationId, body){
    var requestPath = '/api/v2/analytics/conversations/{conversationId}/details/properties';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get conversations
  * @memberOf ConversationsApi
  * @instance
  * @param {string} communicationType - Call or Chat communication filtering
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ConversationsApi.prototype.getConversations = function getConversations(communicationType){
    var requestPath = '/api/v2/conversations';
    var requestQuery = {};
    var requestBody;

    requestQuery["communicationType"] = communicationType;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get callback conversations
  * @memberOf ConversationsApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ConversationsApi.prototype.getCallbacks = function getCallbacks(){
    var requestPath = '/api/v2/conversations/callbacks';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a Callback
  * @memberOf ConversationsApi
  * @instance
  * @param {} body - Callback
  * @example
  * Body Example:
  * {
   "scriptId": "",
   "queueId": "",
   "routingData": {
      "queueId": "",
      "languageId": "",
      "priority": 0,
      "skillIds": [],
      "preferredAgentIds": []
   },
   "callbackUserName": "",
   "callbackNumbers": [],
   "callbackScheduledTime": "",
   "countryCode": "",
   "isAutomated": true,
   "automatedCallbackConfigId": "",
   "data": {}
}
  * @example
  * 200 Response Example:
  * {
   "conversation": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callbackIdentifiers": []
}
  */
ConversationsApi.prototype.postCallbacks = function postCallbacks(body){
    var requestPath = '/api/v2/conversations/callbacks';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get callback conversation
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callbackId - callbackId
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "participants": [],
   "otherMediaUris": [],
   "selfUri": ""
}
  */
ConversationsApi.prototype.getCallbacksCallbackId = function getCallbacksCallbackId(callbackId){
    var requestPath = '/api/v2/conversations/callbacks/{callbackId}';
    var requestQuery = {};
    var requestBody;

    if(callbackId === undefined || callbackId === null){
      throw new Error('Missing required  parameter: callbackId');
    }
    requestPath = requestPath.replace('{callbackId}', callbackId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a conversation by disconnecting all of the participants
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callbackId - callbackId
  * @param {} body - Conversation
  * @example
  * Body Example:
  * {
   "name": "",
   "startTime": "",
   "endTime": "",
   "address": "",
   "participants": [],
   "conversationIds": [],
   "maxParticipants": 0,
   "recordingState": "",
   "state": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "startTime": "",
   "endTime": "",
   "address": "",
   "participants": [],
   "conversationIds": [],
   "maxParticipants": 0,
   "recordingState": "",
   "state": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.patchCallbacksCallbackId = function patchCallbacksCallbackId(callbackId, body){
    var requestPath = '/api/v2/conversations/callbacks/{callbackId}';
    var requestQuery = {};
    var requestBody;

    if(callbackId === undefined || callbackId === null){
      throw new Error('Missing required  parameter: callbackId');
    }
    requestPath = requestPath.replace('{callbackId}', callbackId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update conversation participant
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callbackId - callbackId
  * @param {string} participantId - participantId
  * @param {} body - Participant
  * @example
  * Body Example:
  * {
   "wrapup": {
      "code": "",
      "name": "",
      "notes": "",
      "tags": [],
      "durationSeconds": 0,
      "endTime": "",
      "provisional": true
   },
   "state": "",
   "recording": true,
   "muted": true,
   "confined": true,
   "held": true,
   "wrapupSkipped": true
}
  */
ConversationsApi.prototype.patchCallbacksCallbackIdParticipantsParticipantId = function patchCallbacksCallbackIdParticipantsParticipantId(callbackId, participantId, body){
    var requestPath = '/api/v2/conversations/callbacks/{callbackId}/participants/{participantId}';
    var requestQuery = {};
    var requestBody;

    if(callbackId === undefined || callbackId === null){
      throw new Error('Missing required  parameter: callbackId');
    }
    requestPath = requestPath.replace('{callbackId}', callbackId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update the attributes on a conversation participant.
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callbackId - callbackId
  * @param {string} participantId - participantId
  * @param {} body - Attributes
  * @example
  * Body Example:
  * {
   "attributes": {}
}
  */
ConversationsApi.prototype.patchCallbacksCallbackIdParticipantsParticipantIdAttributes = function patchCallbacksCallbackIdParticipantsParticipantIdAttributes(callbackId, participantId, body){
    var requestPath = '/api/v2/conversations/callbacks/{callbackId}/participants/{participantId}/attributes';
    var requestQuery = {};
    var requestBody;

    if(callbackId === undefined || callbackId === null){
      throw new Error('Missing required  parameter: callbackId');
    }
    requestPath = requestPath.replace('{callbackId}', callbackId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update conversation participant's communication by disconnecting it.
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callbackId - callbackId
  * @param {string} participantId - participantId
  * @param {string} communicationId - communicationId
  * @param {} body - Participant
  * @example
  * Body Example:
  * {
   "wrapup": {
      "code": "",
      "name": "",
      "notes": "",
      "tags": [],
      "durationSeconds": 0,
      "endTime": "",
      "provisional": true
   },
   "state": "",
   "recording": true,
   "muted": true,
   "confined": true,
   "held": true,
   "wrapupSkipped": true
}
  */
ConversationsApi.prototype.patchCallbacksCallbackIdParticipantsParticipantIdCommunicationsCommunicationId = function patchCallbacksCallbackIdParticipantsParticipantIdCommunicationsCommunicationId(callbackId, participantId, communicationId, body){
    var requestPath = '/api/v2/conversations/callbacks/{callbackId}/participants/{participantId}/communications/{communicationId}';
    var requestQuery = {};
    var requestBody;

    if(callbackId === undefined || callbackId === null){
      throw new Error('Missing required  parameter: callbackId');
    }
    requestPath = requestPath.replace('{callbackId}', callbackId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(communicationId === undefined || communicationId === null){
      throw new Error('Missing required  parameter: communicationId');
    }
    requestPath = requestPath.replace('{communicationId}', communicationId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Replace this participant with the specified user and/or address
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callbackId - callbackId
  * @param {string} participantId - participantId
  * @param {} body - Transfer request
  * @example
  * Body Example:
  * {
   "userId": "",
   "address": "",
   "userName": "",
   "queueId": "",
   "voicemail": true
}
  */
ConversationsApi.prototype.postCallbacksCallbackIdParticipantsParticipantIdReplace = function postCallbacksCallbackIdParticipantsParticipantIdReplace(callbackId, participantId, body){
    var requestPath = '/api/v2/conversations/callbacks/{callbackId}/participants/{participantId}/replace';
    var requestQuery = {};
    var requestBody;

    if(callbackId === undefined || callbackId === null){
      throw new Error('Missing required  parameter: callbackId');
    }
    requestPath = requestPath.replace('{callbackId}', callbackId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the wrap-up for this conversation participant. 
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callbackId - callbackId
  * @param {string} participantId - participantId
  * @param {boolean} provisional - Indicates if the wrap-up code is provisional.
  * @example
  * 200 Response Example:
  * {
   "code": "",
   "name": "",
   "notes": "",
   "tags": [],
   "durationSeconds": 0,
   "endTime": "",
   "provisional": true
}
  */
ConversationsApi.prototype.getCallbacksCallbackIdParticipantsParticipantIdWrapup = function getCallbacksCallbackIdParticipantsParticipantIdWrapup(callbackId, participantId, provisional){
    var requestPath = '/api/v2/conversations/callbacks/{callbackId}/participants/{participantId}/wrapup';
    var requestQuery = {};
    var requestBody;

    if(callbackId === undefined || callbackId === null){
      throw new Error('Missing required  parameter: callbackId');
    }
    requestPath = requestPath.replace('{callbackId}', callbackId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    requestQuery["provisional"] = provisional;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get list of wrapup codes for this conversation participant
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callbackId - callbackId
  * @param {string} participantId - participantId
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "dateCreated": "",
  "dateModified": "",
  "modifiedBy": "",
  "createdBy": "",
  "selfUri": ""
 }
]
  */
ConversationsApi.prototype.getCallbacksCallbackIdParticipantsParticipantIdWrapupcodes = function getCallbacksCallbackIdParticipantsParticipantIdWrapupcodes(callbackId, participantId){
    var requestPath = '/api/v2/conversations/callbacks/{callbackId}/participants/{participantId}/wrapupcodes';
    var requestQuery = {};
    var requestBody;

    if(callbackId === undefined || callbackId === null){
      throw new Error('Missing required  parameter: callbackId');
    }
    requestPath = requestPath.replace('{callbackId}', callbackId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get recent conversations
  * @memberOf ConversationsApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ConversationsApi.prototype.getCalls = function getCalls(){
    var requestPath = '/api/v2/conversations/calls';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a call conversation
  * @memberOf ConversationsApi
  * @instance
  * @param {} body - Call request
  * @example
  * Body Example:
  * {
   "phoneNumber": "",
   "callFromQueueId": "",
   "callQueueId": "",
   "callUserId": "",
   "priority": 0,
   "languageId": "",
   "routingSkillsIds": [],
   "conversationIds": [],
   "participants": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.postCalls = function postCalls(body){
    var requestPath = '/api/v2/conversations/calls';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get call history
  * @memberOf ConversationsApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} interval - Interval string; format is ISO-8601. Separate start and end times with forward slash '/'
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ConversationsApi.prototype.getCallsHistory = function getCallsHistory(pageSize, pageNumber, interval){
    var requestPath = '/api/v2/conversations/calls/history';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["interval"] = interval;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the maximum number of participants that this user can have on a conference
  * @memberOf ConversationsApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "maxParticipants": 0
}
  */
ConversationsApi.prototype.getCallsMaximumconferenceparties = function getCallsMaximumconferenceparties(){
    var requestPath = '/api/v2/conversations/calls/maximumconferenceparties';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get call conversation
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callId - callId
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "participants": [],
   "otherMediaUris": [],
   "recordingState": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.getCallsCallId = function getCallsCallId(callId){
    var requestPath = '/api/v2/conversations/calls/{callId}';
    var requestQuery = {};
    var requestBody;

    if(callId === undefined || callId === null){
      throw new Error('Missing required  parameter: callId');
    }
    requestPath = requestPath.replace('{callId}', callId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Add a new call to a conversation
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callId - callId
  * @param {} body - Conversation
  * @example
  * Body Example:
  * {
   "callNumber": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "startTime": "",
   "endTime": "",
   "address": "",
   "participants": [],
   "conversationIds": [],
   "maxParticipants": 0,
   "recordingState": "",
   "state": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.postCallsCallId = function postCallsCallId(callId, body){
    var requestPath = '/api/v2/conversations/calls/{callId}';
    var requestQuery = {};
    var requestBody;

    if(callId === undefined || callId === null){
      throw new Error('Missing required  parameter: callId');
    }
    requestPath = requestPath.replace('{callId}', callId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a conversation by setting it's recording state, merging in other conversations to create a conference, or disconnecting all of the participants
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callId - callId
  * @param {} body - Conversation
  * @example
  * Body Example:
  * {
   "name": "",
   "startTime": "",
   "endTime": "",
   "address": "",
   "participants": [],
   "conversationIds": [],
   "maxParticipants": 0,
   "recordingState": "",
   "state": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "startTime": "",
   "endTime": "",
   "address": "",
   "participants": [],
   "conversationIds": [],
   "maxParticipants": 0,
   "recordingState": "",
   "state": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.patchCallsCallId = function patchCallsCallId(callId, body){
    var requestPath = '/api/v2/conversations/calls/{callId}';
    var requestQuery = {};
    var requestBody;

    if(callId === undefined || callId === null){
      throw new Error('Missing required  parameter: callId');
    }
    requestPath = requestPath.replace('{callId}', callId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Add participants to a conversation
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callId - callId
  * @param {} body - Conversation
  * @example
  * Body Example:
  * {
   "name": "",
   "startTime": "",
   "endTime": "",
   "address": "",
   "participants": [],
   "conversationIds": [],
   "maxParticipants": 0,
   "recordingState": "",
   "state": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "startTime": "",
   "endTime": "",
   "address": "",
   "participants": [],
   "conversationIds": [],
   "maxParticipants": 0,
   "recordingState": "",
   "state": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.postCallsCallIdParticipants = function postCallsCallIdParticipants(callId, body){
    var requestPath = '/api/v2/conversations/calls/{callId}/participants';
    var requestQuery = {};
    var requestBody;

    if(callId === undefined || callId === null){
      throw new Error('Missing required  parameter: callId');
    }
    requestPath = requestPath.replace('{callId}', callId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update conversation participant
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callId - callId
  * @param {string} participantId - participantId
  * @param {} body - Participant request
  * @example
  * Body Example:
  * {
   "wrapup": {
      "code": "",
      "name": "",
      "notes": "",
      "tags": [],
      "durationSeconds": 0,
      "endTime": "",
      "provisional": true
   },
   "state": "",
   "recording": true,
   "muted": true,
   "confined": true,
   "held": true,
   "wrapupSkipped": true
}
  */
ConversationsApi.prototype.patchCallsCallIdParticipantsParticipantId = function patchCallsCallIdParticipantsParticipantId(callId, participantId, body){
    var requestPath = '/api/v2/conversations/calls/{callId}/participants/{participantId}';
    var requestQuery = {};
    var requestBody;

    if(callId === undefined || callId === null){
      throw new Error('Missing required  parameter: callId');
    }
    requestPath = requestPath.replace('{callId}', callId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update the attributes on a conversation participant.
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callId - callId
  * @param {string} participantId - participantId
  * @param {} body - Participant attributes
  * @example
  * Body Example:
  * {
   "attributes": {}
}
  */
ConversationsApi.prototype.patchCallsCallIdParticipantsParticipantIdAttributes = function patchCallsCallIdParticipantsParticipantIdAttributes(callId, participantId, body){
    var requestPath = '/api/v2/conversations/calls/{callId}/participants/{participantId}/attributes';
    var requestQuery = {};
    var requestBody;

    if(callId === undefined || callId === null){
      throw new Error('Missing required  parameter: callId');
    }
    requestPath = requestPath.replace('{callId}', callId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update conversation participant's communication by disconnecting it.
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callId - callId
  * @param {string} participantId - participantId
  * @param {string} communicationId - communicationId
  * @param {} body - Participant
  * @example
  * Body Example:
  * {
   "wrapup": {
      "code": "",
      "name": "",
      "notes": "",
      "tags": [],
      "durationSeconds": 0,
      "endTime": "",
      "provisional": true
   },
   "state": "",
   "recording": true,
   "muted": true,
   "confined": true,
   "held": true,
   "wrapupSkipped": true
}
  */
ConversationsApi.prototype.patchCallsCallIdParticipantsParticipantIdCommunicationsCommunicationId = function patchCallsCallIdParticipantsParticipantIdCommunicationsCommunicationId(callId, participantId, communicationId, body){
    var requestPath = '/api/v2/conversations/calls/{callId}/participants/{participantId}/communications/{communicationId}';
    var requestQuery = {};
    var requestBody;

    if(callId === undefined || callId === null){
      throw new Error('Missing required  parameter: callId');
    }
    requestPath = requestPath.replace('{callId}', callId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(communicationId === undefined || communicationId === null){
      throw new Error('Missing required  parameter: communicationId');
    }
    requestPath = requestPath.replace('{communicationId}', communicationId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Initiate and update consult transfer
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callId - callId
  * @param {string} participantId - participantId
  * @param {} body - Destination address & initial speak to
  * @example
  * Body Example:
  * {
   "speakTo": "",
   "destination": {
      "address": "",
      "name": "",
      "userId": "",
      "queueId": ""
   }
}
  * @example
  * 200 Response Example:
  * {
   "destinationParticipantId": ""
}
  */
ConversationsApi.prototype.postCallsCallIdParticipantsParticipantIdConsult = function postCallsCallIdParticipantsParticipantIdConsult(callId, participantId, body){
    var requestPath = '/api/v2/conversations/calls/{callId}/participants/{participantId}/consult';
    var requestQuery = {};
    var requestBody;

    if(callId === undefined || callId === null){
      throw new Error('Missing required  parameter: callId');
    }
    requestPath = requestPath.replace('{callId}', callId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Cancel the transfer
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callId - callId
  * @param {string} participantId - participantId
  */
ConversationsApi.prototype.deleteCallsCallIdParticipantsParticipantIdConsult = function deleteCallsCallIdParticipantsParticipantIdConsult(callId, participantId){
    var requestPath = '/api/v2/conversations/calls/{callId}/participants/{participantId}/consult';
    var requestQuery = {};
    var requestBody;

    if(callId === undefined || callId === null){
      throw new Error('Missing required  parameter: callId');
    }
    requestPath = requestPath.replace('{callId}', callId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Change who can speak
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callId - callId
  * @param {string} participantId - participantId
  * @param {} body - new speak to
  * @example
  * Body Example:
  * {
   "speakTo": ""
}
  * @example
  * 200 Response Example:
  * {
   "destinationParticipantId": ""
}
  */
ConversationsApi.prototype.patchCallsCallIdParticipantsParticipantIdConsult = function patchCallsCallIdParticipantsParticipantIdConsult(callId, participantId, body){
    var requestPath = '/api/v2/conversations/calls/{callId}/participants/{participantId}/consult';
    var requestQuery = {};
    var requestBody;

    if(callId === undefined || callId === null){
      throw new Error('Missing required  parameter: callId');
    }
    requestPath = requestPath.replace('{callId}', callId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Listen in on the conversation from the point of view of a given participant.
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callId - callId
  * @param {string} participantId - participantId
  */
ConversationsApi.prototype.postCallsCallIdParticipantsParticipantIdMonitor = function postCallsCallIdParticipantsParticipantIdMonitor(callId, participantId){
    var requestPath = '/api/v2/conversations/calls/{callId}/participants/{participantId}/monitor';
    var requestQuery = {};
    var requestBody;

    if(callId === undefined || callId === null){
      throw new Error('Missing required  parameter: callId');
    }
    requestPath = requestPath.replace('{callId}', callId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Replace this participant with the specified user and/or address
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callId - callId
  * @param {string} participantId - participantId
  * @param {} body - Transfer request
  * @example
  * Body Example:
  * {
   "userId": "",
   "address": "",
   "userName": "",
   "queueId": "",
   "voicemail": true
}
  */
ConversationsApi.prototype.postCallsCallIdParticipantsParticipantIdReplace = function postCallsCallIdParticipantsParticipantIdReplace(callId, participantId, body){
    var requestPath = '/api/v2/conversations/calls/{callId}/participants/{participantId}/replace';
    var requestQuery = {};
    var requestBody;

    if(callId === undefined || callId === null){
      throw new Error('Missing required  parameter: callId');
    }
    requestPath = requestPath.replace('{callId}', callId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the wrap-up for this conversation participant. 
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callId - callId
  * @param {string} participantId - participantId
  * @param {boolean} provisional - Indicates if the wrap-up code is provisional.
  * @example
  * 200 Response Example:
  * {
   "code": "",
   "name": "",
   "notes": "",
   "tags": [],
   "durationSeconds": 0,
   "endTime": "",
   "provisional": true
}
  */
ConversationsApi.prototype.getCallsCallIdParticipantsParticipantIdWrapup = function getCallsCallIdParticipantsParticipantIdWrapup(callId, participantId, provisional){
    var requestPath = '/api/v2/conversations/calls/{callId}/participants/{participantId}/wrapup';
    var requestQuery = {};
    var requestBody;

    if(callId === undefined || callId === null){
      throw new Error('Missing required  parameter: callId');
    }
    requestPath = requestPath.replace('{callId}', callId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    requestQuery["provisional"] = provisional;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get list of wrapup codes for this conversation participant
  * @memberOf ConversationsApi
  * @instance
  * @param {string} callId - callId
  * @param {string} participantId - participantId
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "dateCreated": "",
  "dateModified": "",
  "modifiedBy": "",
  "createdBy": "",
  "selfUri": ""
 }
]
  */
ConversationsApi.prototype.getCallsCallIdParticipantsParticipantIdWrapupcodes = function getCallsCallIdParticipantsParticipantIdWrapupcodes(callId, participantId){
    var requestPath = '/api/v2/conversations/calls/{callId}/participants/{participantId}/wrapupcodes';
    var requestQuery = {};
    var requestBody;

    if(callId === undefined || callId === null){
      throw new Error('Missing required  parameter: callId');
    }
    requestPath = requestPath.replace('{callId}', callId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get recent chat conversations
  * @memberOf ConversationsApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ConversationsApi.prototype.getChats = function getChats(){
    var requestPath = '/api/v2/conversations/chats';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get chat conversation
  * @memberOf ConversationsApi
  * @instance
  * @param {string} chatId - chatId
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "participants": [],
   "otherMediaUris": [],
   "selfUri": ""
}
  */
ConversationsApi.prototype.getChatsChatId = function getChatsChatId(chatId){
    var requestPath = '/api/v2/conversations/chats/{chatId}';
    var requestQuery = {};
    var requestBody;

    if(chatId === undefined || chatId === null){
      throw new Error('Missing required  parameter: chatId');
    }
    requestPath = requestPath.replace('{chatId}', chatId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a conversation by disconnecting all of the participants
  * @memberOf ConversationsApi
  * @instance
  * @param {string} chatId - chatId
  * @param {} body - Conversation
  * @example
  * Body Example:
  * {
   "name": "",
   "startTime": "",
   "endTime": "",
   "address": "",
   "participants": [],
   "conversationIds": [],
   "maxParticipants": 0,
   "recordingState": "",
   "state": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "startTime": "",
   "endTime": "",
   "address": "",
   "participants": [],
   "conversationIds": [],
   "maxParticipants": 0,
   "recordingState": "",
   "state": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.patchChatsChatId = function patchChatsChatId(chatId, body){
    var requestPath = '/api/v2/conversations/chats/{chatId}';
    var requestQuery = {};
    var requestBody;

    if(chatId === undefined || chatId === null){
      throw new Error('Missing required  parameter: chatId');
    }
    requestPath = requestPath.replace('{chatId}', chatId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update conversation participant
  * @memberOf ConversationsApi
  * @instance
  * @param {string} chatId - chatId
  * @param {string} participantId - participantId
  * @param {} body - Update request
  * @example
  * Body Example:
  * {
   "wrapup": {
      "code": "",
      "name": "",
      "notes": "",
      "tags": [],
      "durationSeconds": 0,
      "endTime": "",
      "provisional": true
   },
   "state": "",
   "recording": true,
   "muted": true,
   "confined": true,
   "held": true,
   "wrapupSkipped": true
}
  */
ConversationsApi.prototype.patchChatsChatIdParticipantsParticipantId = function patchChatsChatIdParticipantsParticipantId(chatId, participantId, body){
    var requestPath = '/api/v2/conversations/chats/{chatId}/participants/{participantId}';
    var requestQuery = {};
    var requestBody;

    if(chatId === undefined || chatId === null){
      throw new Error('Missing required  parameter: chatId');
    }
    requestPath = requestPath.replace('{chatId}', chatId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update the attributes on a conversation participant.
  * @memberOf ConversationsApi
  * @instance
  * @param {string} chatId - chatId
  * @param {string} participantId - participantId
  * @param {} body - Participant attributes
  * @example
  * Body Example:
  * {
   "attributes": {}
}
  */
ConversationsApi.prototype.patchChatsChatIdParticipantsParticipantIdAttributes = function patchChatsChatIdParticipantsParticipantIdAttributes(chatId, participantId, body){
    var requestPath = '/api/v2/conversations/chats/{chatId}/participants/{participantId}/attributes';
    var requestQuery = {};
    var requestBody;

    if(chatId === undefined || chatId === null){
      throw new Error('Missing required  parameter: chatId');
    }
    requestPath = requestPath.replace('{chatId}', chatId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update conversation participant's communication by disconnecting it.
  * @memberOf ConversationsApi
  * @instance
  * @param {string} chatId - chatId
  * @param {string} participantId - participantId
  * @param {string} communicationId - communicationId
  * @param {} body - Participant
  * @example
  * Body Example:
  * {
   "wrapup": {
      "code": "",
      "name": "",
      "notes": "",
      "tags": [],
      "durationSeconds": 0,
      "endTime": "",
      "provisional": true
   },
   "state": "",
   "recording": true,
   "muted": true,
   "confined": true,
   "held": true,
   "wrapupSkipped": true
}
  */
ConversationsApi.prototype.patchChatsChatIdParticipantsParticipantIdCommunicationsCommunicationId = function patchChatsChatIdParticipantsParticipantIdCommunicationsCommunicationId(chatId, participantId, communicationId, body){
    var requestPath = '/api/v2/conversations/chats/{chatId}/participants/{participantId}/communications/{communicationId}';
    var requestQuery = {};
    var requestBody;

    if(chatId === undefined || chatId === null){
      throw new Error('Missing required  parameter: chatId');
    }
    requestPath = requestPath.replace('{chatId}', chatId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(communicationId === undefined || communicationId === null){
      throw new Error('Missing required  parameter: communicationId');
    }
    requestPath = requestPath.replace('{communicationId}', communicationId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Replace this participant with the specified user and/or address
  * @memberOf ConversationsApi
  * @instance
  * @param {string} chatId - chatId
  * @param {string} participantId - participantId
  * @param {} body - Transfer request
  * @example
  * Body Example:
  * {
   "userId": "",
   "address": "",
   "userName": "",
   "queueId": "",
   "voicemail": true
}
  */
ConversationsApi.prototype.postChatsChatIdParticipantsParticipantIdReplace = function postChatsChatIdParticipantsParticipantIdReplace(chatId, participantId, body){
    var requestPath = '/api/v2/conversations/chats/{chatId}/participants/{participantId}/replace';
    var requestQuery = {};
    var requestBody;

    if(chatId === undefined || chatId === null){
      throw new Error('Missing required  parameter: chatId');
    }
    requestPath = requestPath.replace('{chatId}', chatId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the wrap-up for this conversation participant. 
  * @memberOf ConversationsApi
  * @instance
  * @param {string} chatId - chatId
  * @param {string} participantId - participantId
  * @param {boolean} provisional - Indicates if the wrap-up code is provisional.
  * @example
  * 200 Response Example:
  * {
   "code": "",
   "name": "",
   "notes": "",
   "tags": [],
   "durationSeconds": 0,
   "endTime": "",
   "provisional": true
}
  */
ConversationsApi.prototype.getChatsChatIdParticipantsParticipantIdWrapup = function getChatsChatIdParticipantsParticipantIdWrapup(chatId, participantId, provisional){
    var requestPath = '/api/v2/conversations/chats/{chatId}/participants/{participantId}/wrapup';
    var requestQuery = {};
    var requestBody;

    if(chatId === undefined || chatId === null){
      throw new Error('Missing required  parameter: chatId');
    }
    requestPath = requestPath.replace('{chatId}', chatId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    requestQuery["provisional"] = provisional;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get list of wrapup codes for this conversation participant
  * @memberOf ConversationsApi
  * @instance
  * @param {string} chatId - chatId
  * @param {string} participantId - participantId
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "dateCreated": "",
  "dateModified": "",
  "modifiedBy": "",
  "createdBy": "",
  "selfUri": ""
 }
]
  */
ConversationsApi.prototype.getChatsChatIdParticipantsParticipantIdWrapupcodes = function getChatsChatIdParticipantsParticipantIdWrapupcodes(chatId, participantId){
    var requestPath = '/api/v2/conversations/chats/{chatId}/participants/{participantId}/wrapupcodes';
    var requestQuery = {};
    var requestBody;

    if(chatId === undefined || chatId === null){
      throw new Error('Missing required  parameter: chatId');
    }
    requestPath = requestPath.replace('{chatId}', chatId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get recent cobrowse conversations
  * @memberOf ConversationsApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ConversationsApi.prototype.getCobrowsesessions = function getCobrowsesessions(){
    var requestPath = '/api/v2/conversations/cobrowsesessions';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get cobrowse conversation
  * @memberOf ConversationsApi
  * @instance
  * @param {string} cobrowseId - cobrowseId
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "participants": [],
   "otherMediaUris": [],
   "selfUri": ""
}
  */
ConversationsApi.prototype.getCobrowsesessionsCobrowseId = function getCobrowsesessionsCobrowseId(cobrowseId){
    var requestPath = '/api/v2/conversations/cobrowsesessions/{cobrowseId}';
    var requestQuery = {};
    var requestBody;

    if(cobrowseId === undefined || cobrowseId === null){
      throw new Error('Missing required  parameter: cobrowseId');
    }
    requestPath = requestPath.replace('{cobrowseId}', cobrowseId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a conversation by disconnecting all of the participants
  * @memberOf ConversationsApi
  * @instance
  * @param {string} cobrowseId - cobrowseId
  * @param {} body - Conversation
  * @example
  * Body Example:
  * {
   "name": "",
   "startTime": "",
   "endTime": "",
   "address": "",
   "participants": [],
   "conversationIds": [],
   "maxParticipants": 0,
   "recordingState": "",
   "state": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "startTime": "",
   "endTime": "",
   "address": "",
   "participants": [],
   "conversationIds": [],
   "maxParticipants": 0,
   "recordingState": "",
   "state": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.patchCobrowsesessionsCobrowseId = function patchCobrowsesessionsCobrowseId(cobrowseId, body){
    var requestPath = '/api/v2/conversations/cobrowsesessions/{cobrowseId}';
    var requestQuery = {};
    var requestBody;

    if(cobrowseId === undefined || cobrowseId === null){
      throw new Error('Missing required  parameter: cobrowseId');
    }
    requestPath = requestPath.replace('{cobrowseId}', cobrowseId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update conversation participant
  * @memberOf ConversationsApi
  * @instance
  * @param {string} cobrowseId - cobrowseId
  * @param {string} participantId - participantId
  * @param {} body - 
  * @example
  * Body Example:
  * {
   "wrapup": {
      "code": "",
      "name": "",
      "notes": "",
      "tags": [],
      "durationSeconds": 0,
      "endTime": "",
      "provisional": true
   },
   "state": "",
   "recording": true,
   "muted": true,
   "confined": true,
   "held": true,
   "wrapupSkipped": true
}
  */
ConversationsApi.prototype.patchCobrowsesessionsCobrowseIdParticipantsParticipantId = function patchCobrowsesessionsCobrowseIdParticipantsParticipantId(cobrowseId, participantId, body){
    var requestPath = '/api/v2/conversations/cobrowsesessions/{cobrowseId}/participants/{participantId}';
    var requestQuery = {};
    var requestBody;

    if(cobrowseId === undefined || cobrowseId === null){
      throw new Error('Missing required  parameter: cobrowseId');
    }
    requestPath = requestPath.replace('{cobrowseId}', cobrowseId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update the attributes on a conversation participant.
  * @memberOf ConversationsApi
  * @instance
  * @param {string} cobrowseId - cobrowseId
  * @param {string} participantId - participantId
  * @param {} body - 
  * @example
  * Body Example:
  * {
   "attributes": {}
}
  */
ConversationsApi.prototype.patchCobrowsesessionsCobrowseIdParticipantsParticipantIdAttributes = function patchCobrowsesessionsCobrowseIdParticipantsParticipantIdAttributes(cobrowseId, participantId, body){
    var requestPath = '/api/v2/conversations/cobrowsesessions/{cobrowseId}/participants/{participantId}/attributes';
    var requestQuery = {};
    var requestBody;

    if(cobrowseId === undefined || cobrowseId === null){
      throw new Error('Missing required  parameter: cobrowseId');
    }
    requestPath = requestPath.replace('{cobrowseId}', cobrowseId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update conversation participant's communication by disconnecting it.
  * @memberOf ConversationsApi
  * @instance
  * @param {string} cobrowseId - cobrowseId
  * @param {string} participantId - participantId
  * @param {string} communicationId - communicationId
  * @param {} body - Participant
  * @example
  * Body Example:
  * {
   "wrapup": {
      "code": "",
      "name": "",
      "notes": "",
      "tags": [],
      "durationSeconds": 0,
      "endTime": "",
      "provisional": true
   },
   "state": "",
   "recording": true,
   "muted": true,
   "confined": true,
   "held": true,
   "wrapupSkipped": true
}
  */
ConversationsApi.prototype.patchCobrowsesessionsCobrowseIdParticipantsParticipantIdCommunicationsCommunicationId = function patchCobrowsesessionsCobrowseIdParticipantsParticipantIdCommunicationsCommunicationId(cobrowseId, participantId, communicationId, body){
    var requestPath = '/api/v2/conversations/cobrowsesessions/{cobrowseId}/participants/{participantId}/communications/{communicationId}';
    var requestQuery = {};
    var requestBody;

    if(cobrowseId === undefined || cobrowseId === null){
      throw new Error('Missing required  parameter: cobrowseId');
    }
    requestPath = requestPath.replace('{cobrowseId}', cobrowseId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(communicationId === undefined || communicationId === null){
      throw new Error('Missing required  parameter: communicationId');
    }
    requestPath = requestPath.replace('{communicationId}', communicationId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Replace this participant with the specified user and/or address
  * @memberOf ConversationsApi
  * @instance
  * @param {string} cobrowseId - cobrowseId
  * @param {string} participantId - participantId
  * @param {} body - 
  * @example
  * Body Example:
  * {
   "userId": "",
   "address": "",
   "userName": "",
   "queueId": "",
   "voicemail": true
}
  */
ConversationsApi.prototype.postCobrowsesessionsCobrowseIdParticipantsParticipantIdReplace = function postCobrowsesessionsCobrowseIdParticipantsParticipantIdReplace(cobrowseId, participantId, body){
    var requestPath = '/api/v2/conversations/cobrowsesessions/{cobrowseId}/participants/{participantId}/replace';
    var requestQuery = {};
    var requestBody;

    if(cobrowseId === undefined || cobrowseId === null){
      throw new Error('Missing required  parameter: cobrowseId');
    }
    requestPath = requestPath.replace('{cobrowseId}', cobrowseId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the wrap-up for this conversation participant. 
  * @memberOf ConversationsApi
  * @instance
  * @param {string} cobrowseId - cobrowseId
  * @param {string} participantId - participantId
  * @param {boolean} provisional - Indicates if the wrap-up code is provisional.
  * @example
  * 200 Response Example:
  * {
   "code": "",
   "name": "",
   "notes": "",
   "tags": [],
   "durationSeconds": 0,
   "endTime": "",
   "provisional": true
}
  */
ConversationsApi.prototype.getCobrowsesessionsCobrowseIdParticipantsParticipantIdWrapup = function getCobrowsesessionsCobrowseIdParticipantsParticipantIdWrapup(cobrowseId, participantId, provisional){
    var requestPath = '/api/v2/conversations/cobrowsesessions/{cobrowseId}/participants/{participantId}/wrapup';
    var requestQuery = {};
    var requestBody;

    if(cobrowseId === undefined || cobrowseId === null){
      throw new Error('Missing required  parameter: cobrowseId');
    }
    requestPath = requestPath.replace('{cobrowseId}', cobrowseId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    requestQuery["provisional"] = provisional;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get list of wrapup codes for this conversation participant
  * @memberOf ConversationsApi
  * @instance
  * @param {string} cobrowseId - cobrowseId
  * @param {string} participantId - participantId
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "dateCreated": "",
  "dateModified": "",
  "modifiedBy": "",
  "createdBy": "",
  "selfUri": ""
 }
]
  */
ConversationsApi.prototype.getCobrowsesessionsCobrowseIdParticipantsParticipantIdWrapupcodes = function getCobrowsesessionsCobrowseIdParticipantsParticipantIdWrapupcodes(cobrowseId, participantId){
    var requestPath = '/api/v2/conversations/cobrowsesessions/{cobrowseId}/participants/{participantId}/wrapupcodes';
    var requestQuery = {};
    var requestBody;

    if(cobrowseId === undefined || cobrowseId === null){
      throw new Error('Missing required  parameter: cobrowseId');
    }
    requestPath = requestPath.replace('{cobrowseId}', cobrowseId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get recent email conversations
  * @memberOf ConversationsApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ConversationsApi.prototype.getEmails = function getEmails(){
    var requestPath = '/api/v2/conversations/emails';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get email conversation
  * @memberOf ConversationsApi
  * @instance
  * @param {string} emailId - emailId
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "participants": [],
   "otherMediaUris": [],
   "selfUri": ""
}
  */
ConversationsApi.prototype.getEmailsEmailId = function getEmailsEmailId(emailId){
    var requestPath = '/api/v2/conversations/emails/{emailId}';
    var requestQuery = {};
    var requestBody;

    if(emailId === undefined || emailId === null){
      throw new Error('Missing required  parameter: emailId');
    }
    requestPath = requestPath.replace('{emailId}', emailId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a conversation by disconnecting all of the participants
  * @memberOf ConversationsApi
  * @instance
  * @param {string} emailId - emailId
  * @param {} body - Conversation
  * @example
  * Body Example:
  * {
   "name": "",
   "startTime": "",
   "endTime": "",
   "address": "",
   "participants": [],
   "conversationIds": [],
   "maxParticipants": 0,
   "recordingState": "",
   "state": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "startTime": "",
   "endTime": "",
   "address": "",
   "participants": [],
   "conversationIds": [],
   "maxParticipants": 0,
   "recordingState": "",
   "state": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.patchEmailsEmailId = function patchEmailsEmailId(emailId, body){
    var requestPath = '/api/v2/conversations/emails/{emailId}';
    var requestQuery = {};
    var requestBody;

    if(emailId === undefined || emailId === null){
      throw new Error('Missing required  parameter: emailId');
    }
    requestPath = requestPath.replace('{emailId}', emailId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get conversation messages
  * @memberOf ConversationsApi
  * @instance
  * @param {string} emailId - emailId
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ConversationsApi.prototype.getEmailsEmailIdMessages = function getEmailsEmailIdMessages(emailId){
    var requestPath = '/api/v2/conversations/emails/{emailId}/messages';
    var requestQuery = {};
    var requestBody;

    if(emailId === undefined || emailId === null){
      throw new Error('Missing required  parameter: emailId');
    }
    requestPath = requestPath.replace('{emailId}', emailId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Send an email reply
  * @memberOf ConversationsApi
  * @instance
  * @param {string} emailId - emailId
  * @param {} body - Reply
  * @example
  * Body Example:
  * {
   "name": "",
   "to": [],
   "cc": [],
   "bcc": [],
   "from": {
      "email": "",
      "name": ""
   },
   "subject": "",
   "attachments": [],
   "textBody": "",
   "htmlBody": "",
   "time": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "to": [],
   "cc": [],
   "bcc": [],
   "from": {
      "email": "",
      "name": ""
   },
   "subject": "",
   "attachments": [],
   "textBody": "",
   "htmlBody": "",
   "time": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.postEmailsEmailIdMessages = function postEmailsEmailIdMessages(emailId, body){
    var requestPath = '/api/v2/conversations/emails/{emailId}/messages';
    var requestQuery = {};
    var requestBody;

    if(emailId === undefined || emailId === null){
      throw new Error('Missing required  parameter: emailId');
    }
    requestPath = requestPath.replace('{emailId}', emailId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get conversation draft reply
  * @memberOf ConversationsApi
  * @instance
  * @param {string} emailId - emailId
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "to": [],
   "cc": [],
   "bcc": [],
   "from": {
      "email": "",
      "name": ""
   },
   "subject": "",
   "attachments": [],
   "textBody": "",
   "htmlBody": "",
   "time": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.getEmailsEmailIdMessagesDraft = function getEmailsEmailIdMessagesDraft(emailId){
    var requestPath = '/api/v2/conversations/emails/{emailId}/messages/draft';
    var requestQuery = {};
    var requestBody;

    if(emailId === undefined || emailId === null){
      throw new Error('Missing required  parameter: emailId');
    }
    requestPath = requestPath.replace('{emailId}', emailId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update conversation draft reply
  * @memberOf ConversationsApi
  * @instance
  * @param {string} emailId - emailId
  * @param {} body - Draft
  * @example
  * Body Example:
  * {
   "name": "",
   "to": [],
   "cc": [],
   "bcc": [],
   "from": {
      "email": "",
      "name": ""
   },
   "subject": "",
   "attachments": [],
   "textBody": "",
   "htmlBody": "",
   "time": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "to": [],
   "cc": [],
   "bcc": [],
   "from": {
      "email": "",
      "name": ""
   },
   "subject": "",
   "attachments": [],
   "textBody": "",
   "htmlBody": "",
   "time": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.putEmailsEmailIdMessagesDraft = function putEmailsEmailIdMessagesDraft(emailId, body){
    var requestPath = '/api/v2/conversations/emails/{emailId}/messages/draft';
    var requestQuery = {};
    var requestBody;

    if(emailId === undefined || emailId === null){
      throw new Error('Missing required  parameter: emailId');
    }
    requestPath = requestPath.replace('{emailId}', emailId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete attachment from draft
  * @memberOf ConversationsApi
  * @instance
  * @param {string} emailId - emailId
  * @param {string} attachmentId - attachmentId
  */
ConversationsApi.prototype.deleteEmailsEmailIdMessagesDraftAttachmentsAttachmentId = function deleteEmailsEmailIdMessagesDraftAttachmentsAttachmentId(emailId, attachmentId){
    var requestPath = '/api/v2/conversations/emails/{emailId}/messages/draft/attachments/{attachmentId}';
    var requestQuery = {};
    var requestBody;

    if(emailId === undefined || emailId === null){
      throw new Error('Missing required  parameter: emailId');
    }
    requestPath = requestPath.replace('{emailId}', emailId);
    if(attachmentId === undefined || attachmentId === null){
      throw new Error('Missing required  parameter: attachmentId');
    }
    requestPath = requestPath.replace('{attachmentId}', attachmentId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get conversation message
  * @memberOf ConversationsApi
  * @instance
  * @param {string} emailId - emailId
  * @param {string} messageId - messageId
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "to": [],
   "cc": [],
   "bcc": [],
   "from": {
      "email": "",
      "name": ""
   },
   "subject": "",
   "attachments": [],
   "textBody": "",
   "htmlBody": "",
   "time": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.getEmailsEmailIdMessagesMessageId = function getEmailsEmailIdMessagesMessageId(emailId, messageId){
    var requestPath = '/api/v2/conversations/emails/{emailId}/messages/{messageId}';
    var requestQuery = {};
    var requestBody;

    if(emailId === undefined || emailId === null){
      throw new Error('Missing required  parameter: emailId');
    }
    requestPath = requestPath.replace('{emailId}', emailId);
    if(messageId === undefined || messageId === null){
      throw new Error('Missing required  parameter: messageId');
    }
    requestPath = requestPath.replace('{messageId}', messageId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update conversation participant
  * @memberOf ConversationsApi
  * @instance
  * @param {string} emailId - emailId
  * @param {string} participantId - participantId
  * @param {} body - Update request
  * @example
  * Body Example:
  * {
   "wrapup": {
      "code": "",
      "name": "",
      "notes": "",
      "tags": [],
      "durationSeconds": 0,
      "endTime": "",
      "provisional": true
   },
   "state": "",
   "recording": true,
   "muted": true,
   "confined": true,
   "held": true,
   "wrapupSkipped": true
}
  */
ConversationsApi.prototype.patchEmailsEmailIdParticipantsParticipantId = function patchEmailsEmailIdParticipantsParticipantId(emailId, participantId, body){
    var requestPath = '/api/v2/conversations/emails/{emailId}/participants/{participantId}';
    var requestQuery = {};
    var requestBody;

    if(emailId === undefined || emailId === null){
      throw new Error('Missing required  parameter: emailId');
    }
    requestPath = requestPath.replace('{emailId}', emailId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update the attributes on a conversation participant.
  * @memberOf ConversationsApi
  * @instance
  * @param {string} emailId - emailId
  * @param {string} participantId - participantId
  * @param {} body - Participant attributes
  * @example
  * Body Example:
  * {
   "attributes": {}
}
  */
ConversationsApi.prototype.patchEmailsEmailIdParticipantsParticipantIdAttributes = function patchEmailsEmailIdParticipantsParticipantIdAttributes(emailId, participantId, body){
    var requestPath = '/api/v2/conversations/emails/{emailId}/participants/{participantId}/attributes';
    var requestQuery = {};
    var requestBody;

    if(emailId === undefined || emailId === null){
      throw new Error('Missing required  parameter: emailId');
    }
    requestPath = requestPath.replace('{emailId}', emailId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Replace this participant with the specified user and/or address
  * @memberOf ConversationsApi
  * @instance
  * @param {string} emailId - emailId
  * @param {string} participantId - participantId
  * @param {} body - Transfer request
  * @example
  * Body Example:
  * {
   "userId": "",
   "address": "",
   "userName": "",
   "queueId": "",
   "voicemail": true
}
  */
ConversationsApi.prototype.postEmailsEmailIdParticipantsParticipantIdReplace = function postEmailsEmailIdParticipantsParticipantIdReplace(emailId, participantId, body){
    var requestPath = '/api/v2/conversations/emails/{emailId}/participants/{participantId}/replace';
    var requestQuery = {};
    var requestBody;

    if(emailId === undefined || emailId === null){
      throw new Error('Missing required  parameter: emailId');
    }
    requestPath = requestPath.replace('{emailId}', emailId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the wrap-up for this conversation participant. 
  * @memberOf ConversationsApi
  * @instance
  * @param {string} emailId - emailId
  * @param {string} participantId - participantId
  * @param {boolean} provisional - Indicates if the wrap-up code is provisional.
  * @example
  * 200 Response Example:
  * {
   "code": "",
   "name": "",
   "notes": "",
   "tags": [],
   "durationSeconds": 0,
   "endTime": "",
   "provisional": true
}
  */
ConversationsApi.prototype.getEmailsEmailIdParticipantsParticipantIdWrapup = function getEmailsEmailIdParticipantsParticipantIdWrapup(emailId, participantId, provisional){
    var requestPath = '/api/v2/conversations/emails/{emailId}/participants/{participantId}/wrapup';
    var requestQuery = {};
    var requestBody;

    if(emailId === undefined || emailId === null){
      throw new Error('Missing required  parameter: emailId');
    }
    requestPath = requestPath.replace('{emailId}', emailId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    requestQuery["provisional"] = provisional;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get list of wrapup codes for this conversation participant
  * @memberOf ConversationsApi
  * @instance
  * @param {string} emailId - emailId
  * @param {string} participantId - participantId
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "dateCreated": "",
  "dateModified": "",
  "modifiedBy": "",
  "createdBy": "",
  "selfUri": ""
 }
]
  */
ConversationsApi.prototype.getEmailsEmailIdParticipantsParticipantIdWrapupcodes = function getEmailsEmailIdParticipantsParticipantIdWrapupcodes(emailId, participantId){
    var requestPath = '/api/v2/conversations/emails/{emailId}/participants/{participantId}/wrapupcodes';
    var requestQuery = {};
    var requestBody;

    if(emailId === undefined || emailId === null){
      throw new Error('Missing required  parameter: emailId');
    }
    requestPath = requestPath.replace('{emailId}', emailId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create Fax Conversation
  * @memberOf ConversationsApi
  * @instance
  * @param {} body - Fax
  * @example
  * Body Example:
  * {
   "name": "",
   "addresses": [],
   "documentId": "",
   "contentType": "",
   "workspace": {
      "name": "",
      "type": "",
      "isCurrentUserWorkspace": true,
      "user": {},
      "bucket": "",
      "dateCreated": "",
      "dateModified": "",
      "summary": {},
      "acl": [],
      "description": ""
   },
   "coverSheet": {
      "notes": "",
      "locale": ""
   },
   "timeZoneOffsetMinutes": 0
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "uploadDestinationUri": "",
   "uploadMethodType": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.postFaxes = function postFaxes(body){
    var requestPath = '/api/v2/conversations/faxes';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get conversation
  * @memberOf ConversationsApi
  * @instance
  * @param {string} conversationId - conversation ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "startTime": "",
   "endTime": "",
   "address": "",
   "participants": [],
   "conversationIds": [],
   "maxParticipants": 0,
   "recordingState": "",
   "state": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.getConversationId = function getConversationId(conversationId){
    var requestPath = '/api/v2/conversations/{conversationId}';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a participant.
  * @description Update conversation participant.
  * @memberOf ConversationsApi
  * @instance
  * @param {string} conversationId - conversation ID
  * @param {string} participantId - participant ID
  * @param {} body - Update request
  * @example
  * Body Example:
  * {
   "wrapup": {
      "code": "",
      "name": "",
      "notes": "",
      "tags": [],
      "durationSeconds": 0,
      "endTime": "",
      "provisional": true
   },
   "state": "",
   "recording": true,
   "muted": true,
   "confined": true,
   "held": true,
   "wrapupSkipped": true
}
  */
ConversationsApi.prototype.patchConversationIdParticipantsParticipantId = function patchConversationIdParticipantsParticipantId(conversationId, participantId, body){
    var requestPath = '/api/v2/conversations/{conversationId}/participants/{participantId}';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update the attributes on a conversation participant.
  * @memberOf ConversationsApi
  * @instance
  * @param {string} conversationId - conversation ID
  * @param {string} participantId - participant ID
  * @param {} body - Participant attributes
  * @example
  * Body Example:
  * {
   "attributes": {}
}
  */
ConversationsApi.prototype.patchConversationIdParticipantsParticipantIdAttributes = function patchConversationIdParticipantsParticipantIdAttributes(conversationId, participantId, body){
    var requestPath = '/api/v2/conversations/{conversationId}/participants/{participantId}/attributes';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a new callback for the specified participant on the conversation.
  * @memberOf ConversationsApi
  * @instance
  * @param {string} conversationId - conversation ID
  * @param {string} participantId - participant ID
  * @param {} body - 
  * @example
  * Body Example:
  * {
   "scriptId": "",
   "queueId": "",
   "routingData": {
      "queueId": "",
      "languageId": "",
      "priority": 0,
      "skillIds": [],
      "preferredAgentIds": []
   },
   "callbackUserName": "",
   "callbackNumbers": [],
   "callbackScheduledTime": "",
   "countryCode": "",
   "isAutomated": true,
   "automatedCallbackConfigId": "",
   "data": {}
}
  */
ConversationsApi.prototype.postConversationIdParticipantsParticipantIdCallbacks = function postConversationIdParticipantsParticipantIdCallbacks(conversationId, participantId, body){
    var requestPath = '/api/v2/conversations/{conversationId}/participants/{participantId}/callbacks';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a code used to add a communication to this participant
  * @memberOf ConversationsApi
  * @instance
  * @param {string} conversationId - conversation ID
  * @param {string} participantId - participant ID
  * @param {string} addCommunicationCode - addCommunicationCode
  */
ConversationsApi.prototype.deleteConversationIdParticipantsParticipantIdCodesAddcommunicationcode = function deleteConversationIdParticipantsParticipantIdCodesAddcommunicationcode(conversationId, participantId, addCommunicationCode){
    var requestPath = '/api/v2/conversations/{conversationId}/participants/{participantId}/codes/{addCommunicationCode}';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(addCommunicationCode === undefined || addCommunicationCode === null){
      throw new Error('Missing required  parameter: addCommunicationCode');
    }
    requestPath = requestPath.replace('{addCommunicationCode}', addCommunicationCode);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Replace this participant with the specified user and/or address
  * @memberOf ConversationsApi
  * @instance
  * @param {string} conversationId - conversation ID
  * @param {string} participantId - participant ID
  * @param {} body - Transfer request
  * @example
  * Body Example:
  * {
   "userId": "",
   "address": "",
   "userName": "",
   "queueId": "",
   "voicemail": true
}
  */
ConversationsApi.prototype.postConversationIdParticipantsParticipantIdReplace = function postConversationIdParticipantsParticipantIdReplace(conversationId, participantId, body){
    var requestPath = '/api/v2/conversations/{conversationId}/participants/{participantId}/replace';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the wrap-up for this conversation participant. 
  * @memberOf ConversationsApi
  * @instance
  * @param {string} conversationId - conversation ID
  * @param {string} participantId - participant ID
  * @param {boolean} provisional - Indicates if the wrap-up code is provisional.
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "selfUri": ""
}
  */
ConversationsApi.prototype.getConversationIdParticipantsParticipantIdWrapup = function getConversationIdParticipantsParticipantIdWrapup(conversationId, participantId, provisional){
    var requestPath = '/api/v2/conversations/{conversationId}/participants/{participantId}/wrapup';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    requestQuery["provisional"] = provisional;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get list of wrapup codes for this conversation participant
  * @memberOf ConversationsApi
  * @instance
  * @param {string} conversationId - conversation ID
  * @param {string} participantId - participant ID
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "dateCreated": "",
  "dateModified": "",
  "modifiedBy": "",
  "createdBy": "",
  "selfUri": ""
 }
]
  */
ConversationsApi.prototype.getConversationIdParticipantsParticipantIdWrapupcodes = function getConversationIdParticipantsParticipantIdWrapupcodes(conversationId, participantId){
    var requestPath = '/api/v2/conversations/{conversationId}/participants/{participantId}/wrapupcodes';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(participantId === undefined || participantId === null){
      throw new Error('Missing required  parameter: participantId');
    }
    requestPath = requestPath.replace('{participantId}', participantId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};


module.exports = ConversationsApi;

},{}],9:[function(require,module,exports){
/**
* @class FaxApi
* @example
* var api = new purecloud.platform.FaxApi(pureCloudSession);
*/
function FaxApi(session) {
    if(!(this instanceof FaxApi)) {
        return new FaxApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('FaxApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get a list of fax documents.
  * @memberOf FaxApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
FaxApi.prototype.getDocuments = function getDocuments(pageSize, pageNumber){
    var requestPath = '/api/v2/fax/documents';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a document.
  * @memberOf FaxApi
  * @instance
  * @param {string} documentId - Document ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "contentUri": "",
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "createdBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "contentType": "",
   "contentLength": 0,
   "filename": "",
   "read": true,
   "pageCount": 0,
   "callerAddress": "",
   "receiverAddress": "",
   "thumbnails": [],
   "sharingUri": "",
   "downloadSharingUri": "",
   "selfUri": ""
}
  */
FaxApi.prototype.getDocumentsDocumentId = function getDocumentsDocumentId(documentId){
    var requestPath = '/api/v2/fax/documents/{documentId}';
    var requestQuery = {};
    var requestBody;

    if(documentId === undefined || documentId === null){
      throw new Error('Missing required  parameter: documentId');
    }
    requestPath = requestPath.replace('{documentId}', documentId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a fax document.
  * @memberOf FaxApi
  * @instance
  * @param {string} documentId - Document ID
  * @param {} body - Document
  * @example
  * Body Example:
  * {
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "contentUri": "",
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "createdBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "contentType": "",
   "contentLength": 0,
   "filename": "",
   "read": true,
   "pageCount": 0,
   "callerAddress": "",
   "receiverAddress": "",
   "thumbnails": [],
   "sharingUri": "",
   "downloadSharingUri": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "contentUri": "",
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "createdBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "contentType": "",
   "contentLength": 0,
   "filename": "",
   "read": true,
   "pageCount": 0,
   "callerAddress": "",
   "receiverAddress": "",
   "thumbnails": [],
   "sharingUri": "",
   "downloadSharingUri": "",
   "selfUri": ""
}
  */
FaxApi.prototype.putDocumentsDocumentId = function putDocumentsDocumentId(documentId, body){
    var requestPath = '/api/v2/fax/documents/{documentId}';
    var requestQuery = {};
    var requestBody;

    if(documentId === undefined || documentId === null){
      throw new Error('Missing required  parameter: documentId');
    }
    requestPath = requestPath.replace('{documentId}', documentId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a fax document.
  * @memberOf FaxApi
  * @instance
  * @param {string} documentId - Document ID
  */
FaxApi.prototype.deleteDocumentsDocumentId = function deleteDocumentsDocumentId(documentId){
    var requestPath = '/api/v2/fax/documents/{documentId}';
    var requestQuery = {};
    var requestBody;

    if(documentId === undefined || documentId === null){
      throw new Error('Missing required  parameter: documentId');
    }
    requestPath = requestPath.replace('{documentId}', documentId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Download a fax document.
  * @memberOf FaxApi
  * @instance
  * @param {string} documentId - Document ID
  * @example
  * 200 Response Example:
  * {
   "contentLocationUri": "",
   "imageUri": "",
   "thumbnails": []
}
  */
FaxApi.prototype.getDocumentsDocumentIdContent = function getDocumentsDocumentIdContent(documentId){
    var requestPath = '/api/v2/fax/documents/{documentId}/content';
    var requestQuery = {};
    var requestBody;

    if(documentId === undefined || documentId === null){
      throw new Error('Missing required  parameter: documentId');
    }
    requestPath = requestPath.replace('{documentId}', documentId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get fax summary
  * @memberOf FaxApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "readCount": 0,
   "unreadCount": 0,
   "totalCount": 0
}
  */
FaxApi.prototype.getSummary = function getSummary(){
    var requestPath = '/api/v2/fax/summary';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};


module.exports = FaxApi;

},{}],10:[function(require,module,exports){
/**
* @class GeolocationApi
* @example
* var api = new purecloud.platform.GeolocationApi(pureCloudSession);
*/
function GeolocationApi(session) {
    if(!(this instanceof GeolocationApi)) {
        return new GeolocationApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('GeolocationApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get a organization's GeolocationSettings
  * @memberOf GeolocationApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "enabled": true,
   "selfUri": ""
}
  */
GeolocationApi.prototype.getSettings = function getSettings(){
    var requestPath = '/api/v2/geolocations/settings';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Patch a organization's GeolocationSettings
  * @memberOf GeolocationApi
  * @instance
  * @param {} body - Geolocation settings
  * @example
  * Body Example:
  * {
   "name": "",
   "enabled": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "enabled": true,
   "selfUri": ""
}
  */
GeolocationApi.prototype.patchSettings = function patchSettings(body){
    var requestPath = '/api/v2/geolocations/settings';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a user's Geolocation
  * @memberOf GeolocationApi
  * @instance
  * @param {string} userId - user Id
  * @param {string} clientId - client Id
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "primary": true,
   "latitude": {},
   "longitude": {},
   "country": "",
   "region": "",
   "city": "",
   "selfUri": ""
}
  */
GeolocationApi.prototype.getUserIdGeolocationsClientId = function getUserIdGeolocationsClientId(userId, clientId){
    var requestPath = '/api/v2/users/{userId}/geolocations/{clientId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(clientId === undefined || clientId === null){
      throw new Error('Missing required  parameter: clientId');
    }
    requestPath = requestPath.replace('{clientId}', clientId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Patch a user's Geolocation
  * @description The geolocation object can be patched one of three ways. Option 1: Set the 'primary' property to true. This will set the client as the user's primary geolocation source.  Option 2: Provide the 'latitude' and 'longitude' values.  This will enqueue an asynchronous update of the 'city', 'region', and 'country', generating a notification. A subsequent GET operation will include the new values for 'city', 'region' and 'country'.  Option 3:  Provide the 'city', 'region', 'country' values.  Option 1 can be combined with Option 2 or Option 3.  For example, update the client as primary and provide latitude and longitude values.
  * @memberOf GeolocationApi
  * @instance
  * @param {string} userId - user Id
  * @param {string} clientId - client Id
  * @param {} body - Geolocation
  * @example
  * Body Example:
  * {
   "name": "",
   "type": "",
   "primary": true,
   "latitude": {},
   "longitude": {},
   "country": "",
   "region": "",
   "city": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "primary": true,
   "latitude": {},
   "longitude": {},
   "country": "",
   "region": "",
   "city": "",
   "selfUri": ""
}
  */
GeolocationApi.prototype.patchUserIdGeolocationsClientId = function patchUserIdGeolocationsClientId(userId, clientId, body){
    var requestPath = '/api/v2/users/{userId}/geolocations/{clientId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(clientId === undefined || clientId === null){
      throw new Error('Missing required  parameter: clientId');
    }
    requestPath = requestPath.replace('{clientId}', clientId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};


module.exports = GeolocationApi;

},{}],11:[function(require,module,exports){
/**
* @class GreetingsApi
* @example
* var api = new purecloud.platform.GreetingsApi(pureCloudSession);
*/
function GreetingsApi(session) {
    if(!(this instanceof GreetingsApi)) {
        return new GreetingsApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('GreetingsApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Gets an Organization's Greetings
  * @memberOf GreetingsApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
GreetingsApi.prototype.getGreetings = function getGreetings(pageSize, pageNumber){
    var requestPath = '/api/v2/greetings';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a Greeting for an Organization
  * @memberOf GreetingsApi
  * @instance
  * @param {} body - The Greeting to create
  * @example
  * Body Example:
  * {
   "name": "",
   "type": "",
   "ownerType": "",
   "owner": {
      "name": ""
   },
   "audioFile": {
      "durationMilliseconds": 0,
      "sizeBytes": 0,
      "selfUri": ""
   },
   "audioTTS": "",
   "createdDate": "",
   "createdBy": "",
   "modifiedDate": "",
   "modifiedBy": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "ownerType": "",
   "greetings": {},
   "createdDate": "",
   "createdBy": "",
   "modifiedDate": "",
   "modifiedBy": "",
   "selfUri": ""
}
  */
GreetingsApi.prototype.postGreetings = function postGreetings(body){
    var requestPath = '/api/v2/greetings';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get an Organization's DefaultGreetingList
  * @memberOf GreetingsApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "ownerType": "",
   "greetings": {},
   "createdDate": "",
   "createdBy": "",
   "modifiedDate": "",
   "modifiedBy": "",
   "selfUri": ""
}
  */
GreetingsApi.prototype.getDefaults = function getDefaults(){
    var requestPath = '/api/v2/greetings/defaults';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an Organization's DefaultGreetingList
  * @memberOf GreetingsApi
  * @instance
  * @param {} body - The updated defaultGreetingList
  * @example
  * Body Example:
  * {
   "name": "",
   "owner": {
      "name": ""
   },
   "ownerType": "",
   "greetings": {},
   "createdDate": "",
   "createdBy": "",
   "modifiedDate": "",
   "modifiedBy": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "ownerType": "",
   "greetings": {},
   "createdDate": "",
   "createdBy": "",
   "modifiedDate": "",
   "modifiedBy": "",
   "selfUri": ""
}
  */
GreetingsApi.prototype.putDefaults = function putDefaults(body){
    var requestPath = '/api/v2/greetings/defaults';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Greeting with the given GreetingId
  * @memberOf GreetingsApi
  * @instance
  * @param {string} greetingId - Greeting ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "ownerType": "",
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "audioFile": {
      "durationMilliseconds": 0,
      "sizeBytes": 0,
      "selfUri": ""
   },
   "audioTTS": "",
   "createdDate": "",
   "createdBy": "",
   "modifiedDate": "",
   "modifiedBy": "",
   "selfUri": ""
}
  */
GreetingsApi.prototype.getGreetingId = function getGreetingId(greetingId){
    var requestPath = '/api/v2/greetings/{greetingId}';
    var requestQuery = {};
    var requestBody;

    if(greetingId === undefined || greetingId === null){
      throw new Error('Missing required  parameter: greetingId');
    }
    requestPath = requestPath.replace('{greetingId}', greetingId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Updates the Greeting with the given GreetingId
  * @memberOf GreetingsApi
  * @instance
  * @param {string} greetingId - Greeting ID
  * @param {} body - The updated Greeting
  * @example
  * Body Example:
  * {
   "name": "",
   "type": "",
   "ownerType": "",
   "owner": {
      "name": ""
   },
   "audioFile": {
      "durationMilliseconds": 0,
      "sizeBytes": 0,
      "selfUri": ""
   },
   "audioTTS": "",
   "createdDate": "",
   "createdBy": "",
   "modifiedDate": "",
   "modifiedBy": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "ownerType": "",
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "audioFile": {
      "durationMilliseconds": 0,
      "sizeBytes": 0,
      "selfUri": ""
   },
   "audioTTS": "",
   "createdDate": "",
   "createdBy": "",
   "modifiedDate": "",
   "modifiedBy": "",
   "selfUri": ""
}
  */
GreetingsApi.prototype.putGreetingId = function putGreetingId(greetingId, body){
    var requestPath = '/api/v2/greetings/{greetingId}';
    var requestQuery = {};
    var requestBody;

    if(greetingId === undefined || greetingId === null){
      throw new Error('Missing required  parameter: greetingId');
    }
    requestPath = requestPath.replace('{greetingId}', greetingId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Deletes a Greeting with the given GreetingId
  * @memberOf GreetingsApi
  * @instance
  * @param {string} greetingId - Greeting ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "ownerType": "",
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "audioFile": {
      "durationMilliseconds": 0,
      "sizeBytes": 0,
      "selfUri": ""
   },
   "audioTTS": "",
   "createdDate": "",
   "createdBy": "",
   "modifiedDate": "",
   "modifiedBy": "",
   "selfUri": ""
}
  */
GreetingsApi.prototype.deleteGreetingId = function deleteGreetingId(greetingId){
    var requestPath = '/api/v2/greetings/{greetingId}';
    var requestQuery = {};
    var requestBody;

    if(greetingId === undefined || greetingId === null){
      throw new Error('Missing required  parameter: greetingId');
    }
    requestPath = requestPath.replace('{greetingId}', greetingId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get media playback URI for this greeting
  * @memberOf GreetingsApi
  * @instance
  * @param {string} greetingId - Greeting ID
  * @param {string} formatId - The desired media format.
  WAV,
  WEBM,
  WAV_ULAW,
  OGG_VORBIS,
  OGG_OPUS,
  NONE,
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "mediaFileUri": "",
   "mediaImageUri": ""
}
  */
GreetingsApi.prototype.getGreetingIdMedia = function getGreetingIdMedia(greetingId, formatId){
    var requestPath = '/api/v2/greetings/{greetingId}/media';
    var requestQuery = {};
    var requestBody;

    if(greetingId === undefined || greetingId === null){
      throw new Error('Missing required  parameter: greetingId');
    }
    requestPath = requestPath.replace('{greetingId}', greetingId);
    requestQuery["formatId"] = formatId;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of the User's Greetings
  * @memberOf GreetingsApi
  * @instance
  * @param {string} userId - User ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
GreetingsApi.prototype.getUserIdGreetings = function getUserIdGreetings(userId, pageSize, pageNumber){
    var requestPath = '/api/v2/users/{userId}/greetings';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Creates a Greeting for a User
  * @memberOf GreetingsApi
  * @instance
  * @param {string} userId - User ID
  * @param {} body - The Greeting to create
  * @example
  * Body Example:
  * {
   "name": "",
   "type": "",
   "ownerType": "",
   "owner": {
      "name": ""
   },
   "audioFile": {
      "durationMilliseconds": 0,
      "sizeBytes": 0,
      "selfUri": ""
   },
   "audioTTS": "",
   "createdDate": "",
   "createdBy": "",
   "modifiedDate": "",
   "modifiedBy": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "ownerType": "",
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "audioFile": {
      "durationMilliseconds": 0,
      "sizeBytes": 0,
      "selfUri": ""
   },
   "audioTTS": "",
   "createdDate": "",
   "createdBy": "",
   "modifiedDate": "",
   "modifiedBy": "",
   "selfUri": ""
}
  */
GreetingsApi.prototype.postUserIdGreetings = function postUserIdGreetings(userId, body){
    var requestPath = '/api/v2/users/{userId}/greetings';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Grabs the list of Default Greetings given a User's ID
  * @memberOf GreetingsApi
  * @instance
  * @param {string} userId - User ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "ownerType": "",
   "greetings": {},
   "createdDate": "",
   "createdBy": "",
   "modifiedDate": "",
   "modifiedBy": "",
   "selfUri": ""
}
  */
GreetingsApi.prototype.getUserIdGreetingsDefaults = function getUserIdGreetingsDefaults(userId){
    var requestPath = '/api/v2/users/{userId}/greetings/defaults';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Updates the DefaultGreetingList of the specified User
  * @memberOf GreetingsApi
  * @instance
  * @param {string} userId - User ID
  * @param {} body - The updated defaultGreetingList
  * @example
  * Body Example:
  * {
   "name": "",
   "owner": {
      "name": ""
   },
   "ownerType": "",
   "greetings": {},
   "createdDate": "",
   "createdBy": "",
   "modifiedDate": "",
   "modifiedBy": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "ownerType": "",
   "greetings": {},
   "createdDate": "",
   "createdBy": "",
   "modifiedDate": "",
   "modifiedBy": "",
   "selfUri": ""
}
  */
GreetingsApi.prototype.putUserIdGreetingsDefaults = function putUserIdGreetingsDefaults(userId, body){
    var requestPath = '/api/v2/users/{userId}/greetings/defaults';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};


module.exports = GreetingsApi;

},{}],12:[function(require,module,exports){
/**
* @class GroupsApi
* @example
* var api = new purecloud.platform.GroupsApi(pureCloudSession);
*/
function GroupsApi(session) {
    if(!(this instanceof GroupsApi)) {
        return new GroupsApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('GroupsApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get a group list
  * @memberOf GroupsApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortOrder - Ascending or descending sort order
  ascending,
  descending,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
GroupsApi.prototype.getGroups = function getGroups(pageSize, pageNumber, sortOrder){
    var requestPath = '/api/v2/groups';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a group
  * @memberOf GroupsApi
  * @instance
  * @param {} body - Group
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "type": "",
   "images": [],
   "addresses": [],
   "rulesVisible": true,
   "visibility": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "dateModified": "",
   "memberCount": 0,
   "state": "",
   "version": 0,
   "type": "",
   "images": [],
   "addresses": [],
   "rulesVisible": true,
   "visibility": "",
   "selfUri": ""
}
  */
GroupsApi.prototype.postGroups = function postGroups(body){
    var requestPath = '/api/v2/groups';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Search using q64
  * @memberOf GroupsApi
  * @instance
  * @param {string} q64 - q64
  * @param {array} expand - expand
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": []
}
  */
GroupsApi.prototype.getSearch = function getSearch(q64, expand){
    var requestPath = '/api/v2/groups/search';
    var requestQuery = {};
    var requestBody;

    if(q64 === undefined || q64 === null){
      throw new Error('Missing required  parameter: q64');
    }
    requestQuery["q64"] = q64;
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Search
  * @memberOf GroupsApi
  * @instance
  * @param {} body - Search request options
  * @example
  * Body Example:
  * {
   "sortOrder": "",
   "sortBy": "",
   "pageSize": 0,
   "pageNumber": 0,
   "returnFields": [],
   "expand": [],
   "query": []
}
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": []
}
  */
GroupsApi.prototype.postSearch = function postSearch(body){
    var requestPath = '/api/v2/groups/search';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get group
  * @memberOf GroupsApi
  * @instance
  * @param {string} groupId - Group ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "dateModified": "",
   "memberCount": 0,
   "state": "",
   "version": 0,
   "type": "",
   "images": [],
   "addresses": [],
   "rulesVisible": true,
   "visibility": "",
   "selfUri": ""
}
  */
GroupsApi.prototype.getGroupId = function getGroupId(groupId){
    var requestPath = '/api/v2/groups/{groupId}';
    var requestQuery = {};
    var requestBody;

    if(groupId === undefined || groupId === null){
      throw new Error('Missing required  parameter: groupId');
    }
    requestPath = requestPath.replace('{groupId}', groupId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get group members
  * @memberOf GroupsApi
  * @instance
  * @param {string} groupId - Group ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortOrder - Ascending or descending sort order
  ascending,
  descending,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
GroupsApi.prototype.getGroupIdMembers = function getGroupIdMembers(groupId, pageSize, pageNumber, sortOrder){
    var requestPath = '/api/v2/groups/{groupId}/members';
    var requestQuery = {};
    var requestBody;

    if(groupId === undefined || groupId === null){
      throw new Error('Missing required  parameter: groupId');
    }
    requestPath = requestPath.replace('{groupId}', groupId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Add members
  * @memberOf GroupsApi
  * @instance
  * @param {string} groupId - Group ID
  * @param {} body - Add members
  * @example
  * Body Example:
  * {
   "memberIds": [],
   "version": 0
}
  */
GroupsApi.prototype.postGroupIdMembers = function postGroupIdMembers(groupId, body){
    var requestPath = '/api/v2/groups/{groupId}/members';
    var requestQuery = {};
    var requestBody;

    if(groupId === undefined || groupId === null){
      throw new Error('Missing required  parameter: groupId');
    }
    requestPath = requestPath.replace('{groupId}', groupId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Remove members
  * @memberOf GroupsApi
  * @instance
  * @param {string} groupId - Group ID
  * @param {string} ids - Comma separated list of userIds to remove
  */
GroupsApi.prototype.deleteGroupIdMembers = function deleteGroupIdMembers(groupId, ids){
    var requestPath = '/api/v2/groups/{groupId}/members';
    var requestQuery = {};
    var requestBody;

    if(groupId === undefined || groupId === null){
      throw new Error('Missing required  parameter: groupId');
    }
    requestPath = requestPath.replace('{groupId}', groupId);
    if(ids === undefined || ids === null){
      throw new Error('Missing required  parameter: ids');
    }
    requestQuery["ids"] = ids;
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};


module.exports = GroupsApi;

},{}],13:[function(require,module,exports){
/**
* @class IdentityProviderApi
* @example
* var api = new purecloud.platform.IdentityProviderApi(pureCloudSession);
*/
function IdentityProviderApi(session) {
    if(!(this instanceof IdentityProviderApi)) {
        return new IdentityProviderApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('IdentityProviderApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary The list of identity providers
  * @memberOf IdentityProviderApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
IdentityProviderApi.prototype.getIdentityproviders = function getIdentityproviders(){
    var requestPath = '/api/v2/identityproviders';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get ADFS Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "relyingPartyIdentifier": "",
   "certificate": "",
   "ssoTargetURI": "",
   "issuerURI": "",
   "disabled": true,
   "selfUri": ""
}
  */
IdentityProviderApi.prototype.getAdfs = function getAdfs(){
    var requestPath = '/api/v2/identityproviders/adfs';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update/Create ADFS Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  * @param {} body - Provider
  * @example
  * Body Example:
  * {
   "name": "",
   "relyingPartyIdentifier": "",
   "certificate": "",
   "ssoTargetURI": "",
   "issuerURI": "",
   "disabled": true
}
  */
IdentityProviderApi.prototype.putAdfs = function putAdfs(body){
    var requestPath = '/api/v2/identityproviders/adfs';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete ADFS Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  */
IdentityProviderApi.prototype.deleteAdfs = function deleteAdfs(){
    var requestPath = '/api/v2/identityproviders/adfs';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get Customer Interaction Center (CIC) Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "certificate": "",
   "ssoTargetURI": "",
   "issuerURI": "",
   "disabled": true,
   "selfUri": ""
}
  */
IdentityProviderApi.prototype.getCic = function getCic(){
    var requestPath = '/api/v2/identityproviders/cic';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update/Create Customer Interaction Center (CIC) Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  * @param {} body - Provider
  * @example
  * Body Example:
  * {
   "name": "",
   "certificate": "",
   "ssoTargetURI": "",
   "issuerURI": "",
   "disabled": true
}
  */
IdentityProviderApi.prototype.putCic = function putCic(body){
    var requestPath = '/api/v2/identityproviders/cic';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete Customer Interaction Center (CIC) Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  */
IdentityProviderApi.prototype.deleteCic = function deleteCic(){
    var requestPath = '/api/v2/identityproviders/cic';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get Okta Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "certificate": "",
   "ssoTargetURI": "",
   "issuerURI": "",
   "disabled": true,
   "selfUri": ""
}
  */
IdentityProviderApi.prototype.getOkta = function getOkta(){
    var requestPath = '/api/v2/identityproviders/okta';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update/Create Okta Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  * @param {} body - Provider
  * @example
  * Body Example:
  * {
   "name": "",
   "certificate": "",
   "ssoTargetURI": "",
   "issuerURI": "",
   "disabled": true
}
  */
IdentityProviderApi.prototype.putOkta = function putOkta(body){
    var requestPath = '/api/v2/identityproviders/okta';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete Okta Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  */
IdentityProviderApi.prototype.deleteOkta = function deleteOkta(){
    var requestPath = '/api/v2/identityproviders/okta';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get OneLogin Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "certificate": "",
   "ssoTargetURI": "",
   "issuerURI": "",
   "disabled": true,
   "selfUri": ""
}
  */
IdentityProviderApi.prototype.getOnelogin = function getOnelogin(){
    var requestPath = '/api/v2/identityproviders/onelogin';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update/Create OneLogin Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  * @param {} body - Provider
  * @example
  * Body Example:
  * {
   "name": "",
   "certificate": "",
   "ssoTargetURI": "",
   "issuerURI": "",
   "disabled": true
}
  */
IdentityProviderApi.prototype.putOnelogin = function putOnelogin(body){
    var requestPath = '/api/v2/identityproviders/onelogin';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete OneLogin Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  */
IdentityProviderApi.prototype.deleteOnelogin = function deleteOnelogin(){
    var requestPath = '/api/v2/identityproviders/onelogin';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get PureCloud Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "disabled": true,
   "selfUri": ""
}
  */
IdentityProviderApi.prototype.getPurecloud = function getPurecloud(){
    var requestPath = '/api/v2/identityproviders/purecloud';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update/Create PureCloud Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  * @param {} body - Provider
  * @example
  * Body Example:
  * {
   "name": "",
   "disabled": true
}
  */
IdentityProviderApi.prototype.putPurecloud = function putPurecloud(body){
    var requestPath = '/api/v2/identityproviders/purecloud';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete PureCloud Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  */
IdentityProviderApi.prototype.deletePurecloud = function deletePurecloud(){
    var requestPath = '/api/v2/identityproviders/purecloud';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get Salesforce Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "certificate": "",
   "ssoTargetURI": "",
   "issuerURI": "",
   "disabled": true,
   "selfUri": ""
}
  */
IdentityProviderApi.prototype.getSalesforce = function getSalesforce(){
    var requestPath = '/api/v2/identityproviders/salesforce';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update/Create Salesforce Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  * @param {} body - Provider
  * @example
  * Body Example:
  * {
   "name": "",
   "certificate": "",
   "ssoTargetURI": "",
   "issuerURI": "",
   "disabled": true
}
  */
IdentityProviderApi.prototype.putSalesforce = function putSalesforce(body){
    var requestPath = '/api/v2/identityproviders/salesforce';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete Salesforce Identity Provider
  * @memberOf IdentityProviderApi
  * @instance
  */
IdentityProviderApi.prototype.deleteSalesforce = function deleteSalesforce(){
    var requestPath = '/api/v2/identityproviders/salesforce';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get an identity provider
  * @memberOf IdentityProviderApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "disabled": true,
   "selfUri": ""
}
  */
IdentityProviderApi.prototype.getProviderId = function getProviderId(){
    var requestPath = '/api/v2/identityproviders/{providerId}';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an identity provider
  * @memberOf IdentityProviderApi
  * @instance
  * @param {} body - Provider
  * @example
  * Body Example:
  * {
   "name": "",
   "disabled": true
}
  */
IdentityProviderApi.prototype.putProviderId = function putProviderId(body){
    var requestPath = '/api/v2/identityproviders/{providerId}';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete an identity provider
  * @memberOf IdentityProviderApi
  * @instance
  */
IdentityProviderApi.prototype.deleteProviderId = function deleteProviderId(){
    var requestPath = '/api/v2/identityproviders/{providerId}';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};


module.exports = IdentityProviderApi;

},{}],14:[function(require,module,exports){
/**
* @class LanguagesApi
* @example
* var api = new purecloud.platform.LanguagesApi(pureCloudSession);
*/
function LanguagesApi(session) {
    if(!(this instanceof LanguagesApi)) {
        return new LanguagesApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('LanguagesApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get the list of supported languages.
  * @memberOf LanguagesApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortOrder - Ascending or descending sort order
  ascending,
  descending,
  * @param {string} name - Name
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
LanguagesApi.prototype.getLanguages = function getLanguages(pageSize, pageNumber, sortOrder, name){
    var requestPath = '/api/v2/languages';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortOrder"] = sortOrder;
    requestQuery["name"] = name;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create Language
  * @memberOf LanguagesApi
  * @instance
  * @param {} body - Language
  * @example
  * Body Example:
  * {
   "name": "",
   "dateModified": "",
   "state": "",
   "version": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateModified": "",
   "state": "",
   "version": "",
   "selfUri": ""
}
  */
LanguagesApi.prototype.postLanguages = function postLanguages(body){
    var requestPath = '/api/v2/languages';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get language
  * @memberOf LanguagesApi
  * @instance
  * @param {string} languageId - Language ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateModified": "",
   "state": "",
   "version": "",
   "selfUri": ""
}
  */
LanguagesApi.prototype.getLanguageId = function getLanguageId(languageId){
    var requestPath = '/api/v2/languages/{languageId}';
    var requestQuery = {};
    var requestBody;

    if(languageId === undefined || languageId === null){
      throw new Error('Missing required  parameter: languageId');
    }
    requestPath = requestPath.replace('{languageId}', languageId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update Language
  * @memberOf LanguagesApi
  * @instance
  * @param {string} languageId - Language ID
  * @param {} body - Language
  * @example
  * Body Example:
  * {
   "name": "",
   "dateModified": "",
   "state": "",
   "version": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateModified": "",
   "state": "",
   "version": "",
   "selfUri": ""
}
  */
LanguagesApi.prototype.putLanguageId = function putLanguageId(languageId, body){
    var requestPath = '/api/v2/languages/{languageId}';
    var requestQuery = {};
    var requestBody;

    if(languageId === undefined || languageId === null){
      throw new Error('Missing required  parameter: languageId');
    }
    requestPath = requestPath.replace('{languageId}', languageId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete Language
  * @memberOf LanguagesApi
  * @instance
  * @param {string} languageId - Language ID
  */
LanguagesApi.prototype.deleteLanguageId = function deleteLanguageId(languageId){
    var requestPath = '/api/v2/languages/{languageId}';
    var requestQuery = {};
    var requestBody;

    if(languageId === undefined || languageId === null){
      throw new Error('Missing required  parameter: languageId');
    }
    requestPath = requestPath.replace('{languageId}', languageId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};


module.exports = LanguagesApi;

},{}],15:[function(require,module,exports){
/**
* @class LocationsApi
* @example
* var api = new purecloud.platform.LocationsApi(pureCloudSession);
*/
function LocationsApi(session) {
    if(!(this instanceof LocationsApi)) {
        return new LocationsApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('LocationsApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get a list of all locations.
  * @memberOf LocationsApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortOrder - Sort order
  asc,
  desc,
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "address": {
   "city": "",
   "country": "",
   "countryName": "",
   "state": "",
   "street1": "",
   "street2": "",
   "zipcode": ""
  },
  "addressVerified": true,
  "emergencyNumber": {
   "e164": "",
   "number": "",
   "type": ""
  },
  "state": "",
  "version": 0,
  "path": [],
  "selfUri": ""
 }
]
  */
LocationsApi.prototype.getLocations = function getLocations(pageSize, pageNumber, sortOrder){
    var requestPath = '/api/v2/locations';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Search using q64
  * @memberOf LocationsApi
  * @instance
  * @param {string} q64 - q64
  * @param {array} expand - expand
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": []
}
  */
LocationsApi.prototype.getSearch = function getSearch(q64, expand){
    var requestPath = '/api/v2/locations/search';
    var requestQuery = {};
    var requestBody;

    if(q64 === undefined || q64 === null){
      throw new Error('Missing required  parameter: q64');
    }
    requestQuery["q64"] = q64;
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Search
  * @memberOf LocationsApi
  * @instance
  * @param {} body - Search request options
  * @example
  * Body Example:
  * {
   "sortOrder": "",
   "sortBy": "",
   "pageSize": 0,
   "pageNumber": 0,
   "returnFields": [],
   "expand": [],
   "query": []
}
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": []
}
  */
LocationsApi.prototype.postSearch = function postSearch(body){
    var requestPath = '/api/v2/locations/search';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get Location by ID.
  * @memberOf LocationsApi
  * @instance
  * @param {string} locationId - Location ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "address": {
      "city": "",
      "country": "",
      "countryName": "",
      "state": "",
      "street1": "",
      "street2": "",
      "zipcode": ""
   },
   "addressVerified": true,
   "emergencyNumber": {
      "e164": "",
      "number": "",
      "type": ""
   },
   "state": "",
   "version": 0,
   "path": [],
   "selfUri": ""
}
  */
LocationsApi.prototype.getLocationId = function getLocationId(locationId){
    var requestPath = '/api/v2/locations/{locationId}';
    var requestQuery = {};
    var requestBody;

    if(locationId === undefined || locationId === null){
      throw new Error('Missing required  parameter: locationId');
    }
    requestPath = requestPath.replace('{locationId}', locationId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};


module.exports = LocationsApi;

},{}],16:[function(require,module,exports){
/**
* @class NotificationsApi
* @example
* var api = new purecloud.platform.NotificationsApi(pureCloudSession);
*/
function NotificationsApi(session) {
    if(!(this instanceof NotificationsApi)) {
        return new NotificationsApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('NotificationsApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get available notification topics.
  * @memberOf NotificationsApi
  * @instance
  * @param {array} expand - Which fields, if any, to expand Valid Values: description, requiresPermissions, schema
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
NotificationsApi.prototype.getAvailabletopics = function getAvailabletopics(expand){
    var requestPath = '/api/v2/notifications/availabletopics';
    var requestQuery = {};
    var requestBody;

    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary The list of existing channels
  * @memberOf NotificationsApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
NotificationsApi.prototype.getChannels = function getChannels(){
    var requestPath = '/api/v2/notifications/channels';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a new channel
  * @description There is a limit of 10 channels. Creating an 11th channel will remove the channel with oldest last used date.
  * @memberOf NotificationsApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "connectUri": ""
}
  */
NotificationsApi.prototype.postChannels = function postChannels(){
    var requestPath = '/api/v2/notifications/channels';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary The list of all subscriptions for this channel
  * @memberOf NotificationsApi
  * @instance
  * @param {string} channelId - Channel ID
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
NotificationsApi.prototype.getChannelsChannelIdSubscriptions = function getChannelsChannelIdSubscriptions(channelId){
    var requestPath = '/api/v2/notifications/channels/{channelId}/subscriptions';
    var requestQuery = {};
    var requestBody;

    if(channelId === undefined || channelId === null){
      throw new Error('Missing required  parameter: channelId');
    }
    requestPath = requestPath.replace('{channelId}', channelId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Add a list of subscriptions to the existing list of subscriptions
  * @memberOf NotificationsApi
  * @instance
  * @param {string} channelId - Channel ID
  * @param {} body - Topic
  * @example
  * Body Example:
  * [
 {
  "id": ""
 }
]
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
NotificationsApi.prototype.postChannelsChannelIdSubscriptions = function postChannelsChannelIdSubscriptions(channelId, body){
    var requestPath = '/api/v2/notifications/channels/{channelId}/subscriptions';
    var requestQuery = {};
    var requestBody;

    if(channelId === undefined || channelId === null){
      throw new Error('Missing required  parameter: channelId');
    }
    requestPath = requestPath.replace('{channelId}', channelId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Replace the current list of subscriptions with a new list.
  * @memberOf NotificationsApi
  * @instance
  * @param {string} channelId - Channel ID
  * @param {} body - Topic
  * @example
  * Body Example:
  * [
 {
  "id": ""
 }
]
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
NotificationsApi.prototype.putChannelsChannelIdSubscriptions = function putChannelsChannelIdSubscriptions(channelId, body){
    var requestPath = '/api/v2/notifications/channels/{channelId}/subscriptions';
    var requestQuery = {};
    var requestBody;

    if(channelId === undefined || channelId === null){
      throw new Error('Missing required  parameter: channelId');
    }
    requestPath = requestPath.replace('{channelId}', channelId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Remove all subscriptions
  * @memberOf NotificationsApi
  * @instance
  * @param {string} channelId - Channel ID
  */
NotificationsApi.prototype.deleteChannelsChannelIdSubscriptions = function deleteChannelsChannelIdSubscriptions(channelId){
    var requestPath = '/api/v2/notifications/channels/{channelId}/subscriptions';
    var requestQuery = {};
    var requestBody;

    if(channelId === undefined || channelId === null){
      throw new Error('Missing required  parameter: channelId');
    }
    requestPath = requestPath.replace('{channelId}', channelId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};


module.exports = NotificationsApi;

},{}],17:[function(require,module,exports){
/**
* @class OAuthApi
* @example
* var api = new purecloud.platform.OAuthApi(pureCloudSession);
*/
function OAuthApi(session) {
    if(!(this instanceof OAuthApi)) {
        return new OAuthApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('OAuthApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary The list of OAuth clients
  * @memberOf OAuthApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
OAuthApi.prototype.getClients = function getClients(){
    var requestPath = '/api/v2/oauth/clients';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create OAuth client
  * @description The OAuth Grant/Client is required in order to create an authentication token and gain access to PureCloud. 
The preferred authorizedGrantTypes is 'CODE' which requires applications to send a client ID and client secret. This is typically a web server. 
If the client is unable to secure the client secret then the 'TOKEN' grant type aka IMPLICIT should be used. This is would be for browser or mobile apps. 
If a client is to be used outside of the context of a user then the 'CLIENT-CREDENTIALS' grant may be used. In this case the client must be granted roles 
via the 'roleIds' field.
  * @memberOf OAuthApi
  * @instance
  * @param {} body - Client
  * @example
  * Body Example:
  * {
   "name": "",
   "accessTokenValiditySeconds": 0,
   "description": "",
   "registeredRedirectUri": [],
   "secret": "",
   "roleIds": [],
   "authorizedGrantType": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "accessTokenValiditySeconds": 0,
   "description": "",
   "registeredRedirectUri": [],
   "secret": "",
   "roleIds": [],
   "authorizedGrantType": "",
   "selfUri": ""
}
  */
OAuthApi.prototype.postClients = function postClients(body){
    var requestPath = '/api/v2/oauth/clients';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get OAuth Client
  * @memberOf OAuthApi
  * @instance
  * @param {string} clientId - Client ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "accessTokenValiditySeconds": 0,
   "description": "",
   "registeredRedirectUri": [],
   "secret": "",
   "roleIds": [],
   "authorizedGrantType": "",
   "selfUri": ""
}
  */
OAuthApi.prototype.getClientsClientId = function getClientsClientId(clientId){
    var requestPath = '/api/v2/oauth/clients/{clientId}';
    var requestQuery = {};
    var requestBody;

    if(clientId === undefined || clientId === null){
      throw new Error('Missing required  parameter: clientId');
    }
    requestPath = requestPath.replace('{clientId}', clientId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update OAuth Client
  * @memberOf OAuthApi
  * @instance
  * @param {string} clientId - Client ID
  * @param {} body - Client
  * @example
  * Body Example:
  * {
   "name": "",
   "accessTokenValiditySeconds": 0,
   "description": "",
   "registeredRedirectUri": [],
   "secret": "",
   "roleIds": [],
   "authorizedGrantType": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "accessTokenValiditySeconds": 0,
   "description": "",
   "registeredRedirectUri": [],
   "secret": "",
   "roleIds": [],
   "authorizedGrantType": "",
   "selfUri": ""
}
  */
OAuthApi.prototype.putClientsClientId = function putClientsClientId(clientId, body){
    var requestPath = '/api/v2/oauth/clients/{clientId}';
    var requestQuery = {};
    var requestBody;

    if(clientId === undefined || clientId === null){
      throw new Error('Missing required  parameter: clientId');
    }
    requestPath = requestPath.replace('{clientId}', clientId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete OAuth Client
  * @memberOf OAuthApi
  * @instance
  * @param {string} clientId - Client ID
  */
OAuthApi.prototype.deleteClientsClientId = function deleteClientsClientId(clientId){
    var requestPath = '/api/v2/oauth/clients/{clientId}';
    var requestQuery = {};
    var requestBody;

    if(clientId === undefined || clientId === null){
      throw new Error('Missing required  parameter: clientId');
    }
    requestPath = requestPath.replace('{clientId}', clientId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Regenerate Client Secret
  * @description This operation will set the client secret to a randomly generated cryptographically random value. All clients must be updated with the new secret. This operation should be used with caution.
  * @memberOf OAuthApi
  * @instance
  * @param {string} clientId - Client ID
  */
OAuthApi.prototype.postClientsClientIdSecret = function postClientsClientIdSecret(clientId){
    var requestPath = '/api/v2/oauth/clients/{clientId}/secret';
    var requestQuery = {};
    var requestBody;

    if(clientId === undefined || clientId === null){
      throw new Error('Missing required  parameter: clientId');
    }
    requestPath = requestPath.replace('{clientId}', clientId);
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};


module.exports = OAuthApi;

},{}],18:[function(require,module,exports){
/**
* @class OrganizationApi
* @example
* var api = new purecloud.platform.OrganizationApi(pureCloudSession);
*/
function OrganizationApi(session) {
    if(!(this instanceof OrganizationApi)) {
        return new OrganizationApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('OrganizationApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get organization.
  * @memberOf OrganizationApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "thirdPartyOrgId": "",
   "thirdPartyOrgName": "",
   "thirdPartyURI": "",
   "domain": "",
   "version": 0,
   "state": "",
   "defaultSiteId": "",
   "deletable": true,
   "selfUri": ""
}
  */
OrganizationApi.prototype.getMe = function getMe(){
    var requestPath = '/api/v2/organizations/me';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};


module.exports = OrganizationApi;

},{}],19:[function(require,module,exports){
/**
* @class OutboundApi
* @example
* var api = new purecloud.platform.OutboundApi(pureCloudSession);
*/
function OutboundApi(session) {
    if(!(this instanceof OutboundApi)) {
        return new OutboundApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('OutboundApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Retrieves audits for dialer.
  * @memberOf OutboundApi
  * @instance
  * @param {} body - AuditSearch
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortBy - Sort by
  * @param {string} sortOrder - Sort order
  * @param {boolean} facetsOnly - Facets only
  * @example
  * Body Example:
  * {
   "queryPhrase": "",
   "queryFields": [],
   "facets": [],
   "filters": []
}
  * @example
  * 200 Response Example:
  * {
   "pageNumber": 0,
   "pageSize": 0,
   "total": 0,
   "pageCount": 0,
   "facetInfo": [],
   "auditMessages": []
}
  */
OutboundApi.prototype.postAudits = function postAudits(body, pageSize, pageNumber, sortBy, sortOrder, facetsOnly){
    var requestPath = '/api/v2/outbound/audits';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    requestQuery["facetsOnly"] = facetsOnly;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query callable time set list
  * @memberOf OutboundApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} filterType - Filter type
  EQUALS,
  REGEX,
  CONTAINS,
  PREFIX,
  LESSTHAN,
  LESSTHANEQUALTO,
  GREATERTHAN,
  GREATERTHANEQUALTO,
  BEGINSWITH,
  ENDSWITH,
  * @param {string} name - Name
  * @param {string} sortBy - Sort by
  * @param {string} sortOrder - Sort order
  ascending,
  descending,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
OutboundApi.prototype.getCallabletimesets = function getCallabletimesets(pageSize, pageNumber, filterType, name, sortBy, sortOrder){
    var requestPath = '/api/v2/outbound/callabletimesets';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["filterType"] = filterType;
    requestQuery["name"] = name;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create callable time set
  * @memberOf OutboundApi
  * @instance
  * @param {} body - DialerCallableTimeSet
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "callableTimes": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "callableTimes": [],
   "selfUri": ""
}
  */
OutboundApi.prototype.postCallabletimesets = function postCallabletimesets(body){
    var requestPath = '/api/v2/outbound/callabletimesets';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get callable time set
  * @memberOf OutboundApi
  * @instance
  * @param {string} callableTimeSetId - Callable Time Set ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "callableTimes": [],
   "selfUri": ""
}
  */
OutboundApi.prototype.getCallabletimesetsCallabletimesetId = function getCallabletimesetsCallabletimesetId(callableTimeSetId){
    var requestPath = '/api/v2/outbound/callabletimesets/{callableTimeSetId}';
    var requestQuery = {};
    var requestBody;

    if(callableTimeSetId === undefined || callableTimeSetId === null){
      throw new Error('Missing required  parameter: callableTimeSetId');
    }
    requestPath = requestPath.replace('{callableTimeSetId}', callableTimeSetId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update callable time set
  * @memberOf OutboundApi
  * @instance
  * @param {string} callableTimeSetId - Callable Time Set ID
  * @param {} body - DialerCallableTimeSet
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "callableTimes": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "callableTimes": [],
   "selfUri": ""
}
  */
OutboundApi.prototype.putCallabletimesetsCallabletimesetId = function putCallabletimesetsCallabletimesetId(callableTimeSetId, body){
    var requestPath = '/api/v2/outbound/callabletimesets/{callableTimeSetId}';
    var requestQuery = {};
    var requestBody;

    if(callableTimeSetId === undefined || callableTimeSetId === null){
      throw new Error('Missing required  parameter: callableTimeSetId');
    }
    requestPath = requestPath.replace('{callableTimeSetId}', callableTimeSetId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete callable time set
  * @memberOf OutboundApi
  * @instance
  * @param {string} callableTimeSetId - Callable Time Set ID
  */
OutboundApi.prototype.deleteCallabletimesetsCallabletimesetId = function deleteCallabletimesetsCallabletimesetId(callableTimeSetId){
    var requestPath = '/api/v2/outbound/callabletimesets/{callableTimeSetId}';
    var requestQuery = {};
    var requestBody;

    if(callableTimeSetId === undefined || callableTimeSetId === null){
      throw new Error('Missing required  parameter: callableTimeSetId');
    }
    requestPath = requestPath.replace('{callableTimeSetId}', callableTimeSetId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query a list of dialer call analysis response sets.
  * @memberOf OutboundApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} filterType - Filter type
  EQUALS,
  REGEX,
  CONTAINS,
  PREFIX,
  LESSTHAN,
  LESSTHANEQUALTO,
  GREATERTHAN,
  GREATERTHANEQUALTO,
  BEGINSWITH,
  ENDSWITH,
  * @param {string} name - Name
  * @param {string} sortBy - Sort by
  * @param {string} sortOrder - Sort order
  ascending,
  descending,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
OutboundApi.prototype.getCallanalysisresponsesets = function getCallanalysisresponsesets(pageSize, pageNumber, filterType, name, sortBy, sortOrder){
    var requestPath = '/api/v2/outbound/callanalysisresponsesets';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["filterType"] = filterType;
    requestQuery["name"] = name;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a dialer call analysis response set.
  * @memberOf OutboundApi
  * @instance
  * @param {} body - ResponseSet
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "responses": {}
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "responses": {},
   "selfUri": ""
}
  */
OutboundApi.prototype.postCallanalysisresponsesets = function postCallanalysisresponsesets(body){
    var requestPath = '/api/v2/outbound/callanalysisresponsesets';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a dialer call analysis response set.
  * @memberOf OutboundApi
  * @instance
  * @param {string} callAnalysisSetId - Call Analysis Response Set ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "responses": {},
   "selfUri": ""
}
  */
OutboundApi.prototype.getCallanalysisresponsesetsCallanalysissetId = function getCallanalysisresponsesetsCallanalysissetId(callAnalysisSetId){
    var requestPath = '/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}';
    var requestQuery = {};
    var requestBody;

    if(callAnalysisSetId === undefined || callAnalysisSetId === null){
      throw new Error('Missing required  parameter: callAnalysisSetId');
    }
    requestPath = requestPath.replace('{callAnalysisSetId}', callAnalysisSetId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a dialer call analysis response set.
  * @memberOf OutboundApi
  * @instance
  * @param {string} callAnalysisSetId - Call Analysis Response Set ID
  * @param {} body - ResponseSet
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "responses": {}
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "responses": {},
   "selfUri": ""
}
  */
OutboundApi.prototype.putCallanalysisresponsesetsCallanalysissetId = function putCallanalysisresponsesetsCallanalysissetId(callAnalysisSetId, body){
    var requestPath = '/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}';
    var requestQuery = {};
    var requestBody;

    if(callAnalysisSetId === undefined || callAnalysisSetId === null){
      throw new Error('Missing required  parameter: callAnalysisSetId');
    }
    requestPath = requestPath.replace('{callAnalysisSetId}', callAnalysisSetId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a dialer call analysis response set.
  * @memberOf OutboundApi
  * @instance
  * @param {string} callAnalysisSetId - Call Analysis Response Set ID
  */
OutboundApi.prototype.deleteCallanalysisresponsesetsCallanalysissetId = function deleteCallanalysisresponsesetsCallanalysissetId(callAnalysisSetId){
    var requestPath = '/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}';
    var requestQuery = {};
    var requestBody;

    if(callAnalysisSetId === undefined || callAnalysisSetId === null){
      throw new Error('Missing required  parameter: callAnalysisSetId');
    }
    requestPath = requestPath.replace('{callAnalysisSetId}', callAnalysisSetId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query a list of dialer campaigns.
  * @memberOf OutboundApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} filterType - Filter type
  EQUALS,
  REGEX,
  CONTAINS,
  PREFIX,
  LESSTHAN,
  LESSTHANEQUALTO,
  GREATERTHAN,
  GREATERTHANEQUALTO,
  BEGINSWITH,
  ENDSWITH,
  * @param {string} name - Name
  * @param {string} contactListId - Contact List ID
  * @param {string} dncListId - DNC list ID
  * @param {string} distributionQueueId - Distribution queue ID
  * @param {string} edgeGroupId - Edge group ID
  * @param {string} callAnalysisResponseSetId - Call analysis response set ID
  * @param {string} sortBy - Sort by
  * @param {string} sortOrder - Sort order
  ascending,
  descending,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
OutboundApi.prototype.getCampaigns = function getCampaigns(pageSize, pageNumber, filterType, name, contactListId, dncListId, distributionQueueId, edgeGroupId, callAnalysisResponseSetId, sortBy, sortOrder){
    var requestPath = '/api/v2/outbound/campaigns';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["filterType"] = filterType;
    requestQuery["name"] = name;
    requestQuery["contactListId"] = contactListId;
    requestQuery["dncListId"] = dncListId;
    requestQuery["distributionQueueId"] = distributionQueueId;
    requestQuery["edgeGroupId"] = edgeGroupId;
    requestQuery["callAnalysisResponseSetId"] = callAnalysisResponseSetId;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a campaign.
  * @memberOf OutboundApi
  * @instance
  * @param {} body - Campaign
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "contactList": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dialingMode": "",
   "script": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "edgeGroup": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "campaignStatus": "",
   "phoneColumns": [],
   "abandonRate": {},
   "dncLists": [],
   "callableTimeSet": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callAnalysisResponseSet": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callerName": "",
   "callerAddress": "",
   "outboundLineCount": 0,
   "ruleSets": [],
   "skipPreviewDisabled": true,
   "previewTimeOutSeconds": 0,
   "contactSort": {
      "fieldName": "",
      "direction": "",
      "numeric": true
   },
   "noAnswerTimeout": 0
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "contactList": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dialingMode": "",
   "script": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "edgeGroup": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "campaignStatus": "",
   "phoneColumns": [],
   "abandonRate": {},
   "dncLists": [],
   "callableTimeSet": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callAnalysisResponseSet": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "errors": [],
   "callerName": "",
   "callerAddress": "",
   "outboundLineCount": 0,
   "ruleSets": [],
   "skipPreviewDisabled": true,
   "previewTimeOutSeconds": 0,
   "contactSort": {
      "fieldName": "",
      "direction": "",
      "numeric": true
   },
   "noAnswerTimeout": 0,
   "selfUri": ""
}
  */
OutboundApi.prototype.postCampaigns = function postCampaigns(body){
    var requestPath = '/api/v2/outbound/campaigns';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get progress for a list of campaigns
  * @memberOf OutboundApi
  * @instance
  * @param {} body - Campaign IDs
  * @example
  * 200 Response Example:
  * [
 {
  "campaign": {
   "id": "",
   "name": "",
   "selfUri": ""
  },
  "contactList": {
   "id": "",
   "name": "",
   "selfUri": ""
  },
  "numberOfContactsCalled": 0,
  "totalNumberOfContacts": 0,
  "percentage": 0
 }
]
  */
OutboundApi.prototype.postCampaignsProgress = function postCampaignsProgress(body){
    var requestPath = '/api/v2/outbound/campaigns/progress';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get dialer campaign.
  * @memberOf OutboundApi
  * @instance
  * @param {string} campaignId - Campaign ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "contactList": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dialingMode": "",
   "script": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "edgeGroup": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "campaignStatus": "",
   "phoneColumns": [],
   "abandonRate": {},
   "dncLists": [],
   "callableTimeSet": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callAnalysisResponseSet": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "errors": [],
   "callerName": "",
   "callerAddress": "",
   "outboundLineCount": 0,
   "ruleSets": [],
   "skipPreviewDisabled": true,
   "previewTimeOutSeconds": 0,
   "contactSort": {
      "fieldName": "",
      "direction": "",
      "numeric": true
   },
   "noAnswerTimeout": 0,
   "selfUri": ""
}
  */
OutboundApi.prototype.getCampaignsCampaignId = function getCampaignsCampaignId(campaignId){
    var requestPath = '/api/v2/outbound/campaigns/{campaignId}';
    var requestQuery = {};
    var requestBody;

    if(campaignId === undefined || campaignId === null){
      throw new Error('Missing required  parameter: campaignId');
    }
    requestPath = requestPath.replace('{campaignId}', campaignId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a campaign.
  * @memberOf OutboundApi
  * @instance
  * @param {string} campaignId - Campaign ID
  * @param {} body - Campaign
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "contactList": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dialingMode": "",
   "script": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "edgeGroup": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "campaignStatus": "",
   "phoneColumns": [],
   "abandonRate": {},
   "dncLists": [],
   "callableTimeSet": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callAnalysisResponseSet": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callerName": "",
   "callerAddress": "",
   "outboundLineCount": 0,
   "ruleSets": [],
   "skipPreviewDisabled": true,
   "previewTimeOutSeconds": 0,
   "contactSort": {
      "fieldName": "",
      "direction": "",
      "numeric": true
   },
   "noAnswerTimeout": 0
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "contactList": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dialingMode": "",
   "script": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "edgeGroup": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "campaignStatus": "",
   "phoneColumns": [],
   "abandonRate": {},
   "dncLists": [],
   "callableTimeSet": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callAnalysisResponseSet": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "errors": [],
   "callerName": "",
   "callerAddress": "",
   "outboundLineCount": 0,
   "ruleSets": [],
   "skipPreviewDisabled": true,
   "previewTimeOutSeconds": 0,
   "contactSort": {
      "fieldName": "",
      "direction": "",
      "numeric": true
   },
   "noAnswerTimeout": 0,
   "selfUri": ""
}
  */
OutboundApi.prototype.putCampaignsCampaignId = function putCampaignsCampaignId(campaignId, body){
    var requestPath = '/api/v2/outbound/campaigns/{campaignId}';
    var requestQuery = {};
    var requestBody;

    if(campaignId === undefined || campaignId === null){
      throw new Error('Missing required  parameter: campaignId');
    }
    requestPath = requestPath.replace('{campaignId}', campaignId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a campaign.
  * @memberOf OutboundApi
  * @instance
  * @param {string} campaignId - Campaign ID
  */
OutboundApi.prototype.deleteCampaignsCampaignId = function deleteCampaignsCampaignId(campaignId){
    var requestPath = '/api/v2/outbound/campaigns/{campaignId}';
    var requestQuery = {};
    var requestBody;

    if(campaignId === undefined || campaignId === null){
      throw new Error('Missing required  parameter: campaignId');
    }
    requestPath = requestPath.replace('{campaignId}', campaignId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Send notification that an agent's state changed 
  * @description New agent state.
  * @memberOf OutboundApi
  * @instance
  * @param {string} campaignId - Campaign ID
  * @param {string} userId - Agent's user ID
  * @param {} body - agent
  * @example
  * Body Example:
  * {
   "stage": ""
}
  */
OutboundApi.prototype.putCampaignsCampaignIdAgentsUserId = function putCampaignsCampaignIdAgentsUserId(campaignId, userId, body){
    var requestPath = '/api/v2/outbound/campaigns/{campaignId}/agents/{userId}';
    var requestQuery = {};
    var requestBody;

    if(campaignId === undefined || campaignId === null){
      throw new Error('Missing required  parameter: campaignId');
    }
    requestPath = requestPath.replace('{campaignId}', campaignId);
    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Schedule a Callback for a Dialer Campaign
  * @memberOf OutboundApi
  * @instance
  * @param {string} campaignId - Campaign ID
  * @param {} body - ContactCallbackRequest
  * @example
  * Body Example:
  * {
   "campaignId": "",
   "contactListId": "",
   "contactId": "",
   "phoneColumn": "",
   "schedule": ""
}
  * @example
  * 200 Response Example:
  * {
   "campaignId": "",
   "contactListId": "",
   "contactId": "",
   "phoneColumn": "",
   "schedule": ""
}
  */
OutboundApi.prototype.postCampaignsCampaignIdCallbackSchedule = function postCampaignsCampaignIdCallbackSchedule(campaignId, body){
    var requestPath = '/api/v2/outbound/campaigns/{campaignId}/callback/schedule';
    var requestQuery = {};
    var requestBody;

    if(campaignId === undefined || campaignId === null){
      throw new Error('Missing required  parameter: campaignId');
    }
    requestPath = requestPath.replace('{campaignId}', campaignId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get campaign diagnostics
  * @memberOf OutboundApi
  * @instance
  * @param {string} campaignId - Campaign ID
  * @example
  * 200 Response Example:
  * {
   "callableContacts": {
      "dncLists": [],
      "callableTimeSet": {},
      "ruleSets": []
   },
   "queueUtilizationDiagnostic": {
      "queue": {},
      "usersInQueue": 0,
      "activeUsersInQueue": 0,
      "usersOnQueue": 0,
      "usersNotUtilized": 0,
      "usersOnQueueWithStation": 0,
      "usersOnACampaignCall": 0,
      "usersOnDifferentEdgeGroup": 0,
      "usersOnANonCampaignCall": 0
   },
   "ruleSetDiagnostics": [],
   "outstandingInteractionsCount": 0
}
  */
OutboundApi.prototype.getCampaignsCampaignIdDiagnostics = function getCampaignsCampaignIdDiagnostics(campaignId){
    var requestPath = '/api/v2/outbound/campaigns/{campaignId}/diagnostics';
    var requestQuery = {};
    var requestBody;

    if(campaignId === undefined || campaignId === null){
      throw new Error('Missing required  parameter: campaignId');
    }
    requestPath = requestPath.replace('{campaignId}', campaignId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get dialer campaign interactions.
  * @memberOf OutboundApi
  * @instance
  * @param {string} campaignId - Campaign ID
  * @example
  * 200 Response Example:
  * {
   "campaign": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "pendingInteractions": [],
   "proceedingInteractions": [],
   "previewingInteractions": [],
   "interactingInteractions": []
}
  */
OutboundApi.prototype.getCampaignsCampaignIdInteractions = function getCampaignsCampaignIdInteractions(campaignId){
    var requestPath = '/api/v2/outbound/campaigns/{campaignId}/interactions';
    var requestQuery = {};
    var requestBody;

    if(campaignId === undefined || campaignId === null){
      throw new Error('Missing required  parameter: campaignId');
    }
    requestPath = requestPath.replace('{campaignId}', campaignId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get campaign progress
  * @memberOf OutboundApi
  * @instance
  * @param {string} campaignId - Campaign ID
  * @example
  * 200 Response Example:
  * {
   "campaign": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "contactList": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "numberOfContactsCalled": 0,
   "totalNumberOfContacts": 0,
   "percentage": 0
}
  */
OutboundApi.prototype.getCampaignsCampaignIdProgress = function getCampaignsCampaignIdProgress(campaignId){
    var requestPath = '/api/v2/outbound/campaigns/{campaignId}/progress';
    var requestQuery = {};
    var requestBody;

    if(campaignId === undefined || campaignId === null){
      throw new Error('Missing required  parameter: campaignId');
    }
    requestPath = requestPath.replace('{campaignId}', campaignId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Reset campaign progress and recycle the campaign
  * @memberOf OutboundApi
  * @instance
  * @param {string} campaignId - Campaign ID
  */
OutboundApi.prototype.deleteCampaignsCampaignIdProgress = function deleteCampaignsCampaignIdProgress(campaignId){
    var requestPath = '/api/v2/outbound/campaigns/{campaignId}/progress';
    var requestQuery = {};
    var requestBody;

    if(campaignId === undefined || campaignId === null){
      throw new Error('Missing required  parameter: campaignId');
    }
    requestPath = requestPath.replace('{campaignId}', campaignId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get statistics about a Dialer Campaign
  * @memberOf OutboundApi
  * @instance
  * @param {string} campaignId - Campaign ID
  * @example
  * 200 Response Example:
  * {
   "contactRate": {
      "attempts": 0,
      "connects": 0,
      "connectRatio": {}
   },
   "idleAgents": 0,
   "adjustedCallsPerAgent": {},
   "outstandingCalls": 0
}
  */
OutboundApi.prototype.getCampaignsCampaignIdStats = function getCampaignsCampaignIdStats(campaignId){
    var requestPath = '/api/v2/outbound/campaigns/{campaignId}/stats';
    var requestQuery = {};
    var requestBody;

    if(campaignId === undefined || campaignId === null){
      throw new Error('Missing required  parameter: campaignId');
    }
    requestPath = requestPath.replace('{campaignId}', campaignId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query a list of contact lists.
  * @memberOf OutboundApi
  * @instance
  * @param {boolean} includeImportStatus - Include import status
  * @param {boolean} includeSize - Include size
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} filterType - Filter type
  EQUALS,
  REGEX,
  CONTAINS,
  PREFIX,
  LESSTHAN,
  LESSTHANEQUALTO,
  GREATERTHAN,
  GREATERTHANEQUALTO,
  BEGINSWITH,
  ENDSWITH,
  * @param {string} name - Name
  * @param {string} sortBy - Sort by
  * @param {string} sortOrder - Sort order
  ascending,
  descending,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
OutboundApi.prototype.getContactlists = function getContactlists(includeImportStatus, includeSize, pageSize, pageNumber, filterType, name, sortBy, sortOrder){
    var requestPath = '/api/v2/outbound/contactlists';
    var requestQuery = {};
    var requestBody;

    requestQuery["includeImportStatus"] = includeImportStatus;
    requestQuery["includeSize"] = includeSize;
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["filterType"] = filterType;
    requestQuery["name"] = name;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a contact List.
  * @memberOf OutboundApi
  * @instance
  * @param {} body - ContactList
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "columnNames": [],
   "phoneColumns": [],
   "previewModeColumnName": "",
   "previewModeAcceptedValues": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "columnNames": [],
   "phoneColumns": [],
   "importStatus": {
      "state": "",
      "totalRecords": 0,
      "completedRecords": 0,
      "percentComplete": 0,
      "failureReason": ""
   },
   "previewModeColumnName": "",
   "previewModeAcceptedValues": [],
   "size": 0,
   "selfUri": ""
}
  */
OutboundApi.prototype.postContactlists = function postContactlists(body){
    var requestPath = '/api/v2/outbound/contactlists';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a dialer contact list.
  * @memberOf OutboundApi
  * @instance
  * @param {string} contactListId - ContactList ID
  * @param {boolean} includeImportStatus - Import status
  * @param {boolean} includeSize - Include size
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "columnNames": [],
   "phoneColumns": [],
   "importStatus": {
      "state": "",
      "totalRecords": 0,
      "completedRecords": 0,
      "percentComplete": 0,
      "failureReason": ""
   },
   "previewModeColumnName": "",
   "previewModeAcceptedValues": [],
   "size": 0,
   "selfUri": ""
}
  */
OutboundApi.prototype.getContactlistsContactlistId = function getContactlistsContactlistId(contactListId, includeImportStatus, includeSize){
    var requestPath = '/api/v2/outbound/contactlists/{contactListId}';
    var requestQuery = {};
    var requestBody;

    if(contactListId === undefined || contactListId === null){
      throw new Error('Missing required  parameter: contactListId');
    }
    requestPath = requestPath.replace('{contactListId}', contactListId);
    requestQuery["includeImportStatus"] = includeImportStatus;
    requestQuery["includeSize"] = includeSize;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a contact list.
  * @memberOf OutboundApi
  * @instance
  * @param {string} contactListId - ContactList ID
  * @param {} body - ContactList
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "columnNames": [],
   "phoneColumns": [],
   "previewModeColumnName": "",
   "previewModeAcceptedValues": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "columnNames": [],
   "phoneColumns": [],
   "importStatus": {
      "state": "",
      "totalRecords": 0,
      "completedRecords": 0,
      "percentComplete": 0,
      "failureReason": ""
   },
   "previewModeColumnName": "",
   "previewModeAcceptedValues": [],
   "size": 0,
   "selfUri": ""
}
  */
OutboundApi.prototype.putContactlistsContactlistId = function putContactlistsContactlistId(contactListId, body){
    var requestPath = '/api/v2/outbound/contactlists/{contactListId}';
    var requestQuery = {};
    var requestBody;

    if(contactListId === undefined || contactListId === null){
      throw new Error('Missing required  parameter: contactListId');
    }
    requestPath = requestPath.replace('{contactListId}', contactListId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a contact list.
  * @memberOf OutboundApi
  * @instance
  * @param {string} contactListId - ContactList ID
  */
OutboundApi.prototype.deleteContactlistsContactlistId = function deleteContactlistsContactlistId(contactListId){
    var requestPath = '/api/v2/outbound/contactlists/{contactListId}';
    var requestQuery = {};
    var requestBody;

    if(contactListId === undefined || contactListId === null){
      throw new Error('Missing required  parameter: contactListId');
    }
    requestPath = requestPath.replace('{contactListId}', contactListId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Add contacts to a contact list.
  * @memberOf OutboundApi
  * @instance
  * @param {string} contactListId - Contact List ID
  * @param {} body - Contact
  * @param {boolean} priority - Contact priority.  True means the contact(s) will go to the beginning of the list, false means at the end.
  * @example
  * Body Example:
  * [
 {
  "name": "",
  "contactListId": "",
  "data": {},
  "callable": true,
  "phoneNumberStatus": {}
 }
]
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "contactListId": "",
  "data": {},
  "callRecords": {},
  "callable": true,
  "phoneNumberStatus": {},
  "selfUri": ""
 }
]
  */
OutboundApi.prototype.postContactlistsContactlistIdContacts = function postContactlistsContactlistIdContacts(contactListId, body, priority){
    var requestPath = '/api/v2/outbound/contactlists/{contactListId}/contacts';
    var requestQuery = {};
    var requestBody;

    if(contactListId === undefined || contactListId === null){
      throw new Error('Missing required  parameter: contactListId');
    }
    requestPath = requestPath.replace('{contactListId}', contactListId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["priority"] = priority;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a contact.
  * @memberOf OutboundApi
  * @instance
  * @param {string} contactListId - Contact List ID
  * @param {string} contactId - Contact ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "contactListId": "",
   "data": {},
   "callRecords": {},
   "callable": true,
   "phoneNumberStatus": {},
   "selfUri": ""
}
  */
OutboundApi.prototype.getContactlistsContactlistIdContactsContactId = function getContactlistsContactlistIdContactsContactId(contactListId, contactId){
    var requestPath = '/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}';
    var requestQuery = {};
    var requestBody;

    if(contactListId === undefined || contactListId === null){
      throw new Error('Missing required  parameter: contactListId');
    }
    requestPath = requestPath.replace('{contactListId}', contactListId);
    if(contactId === undefined || contactId === null){
      throw new Error('Missing required  parameter: contactId');
    }
    requestPath = requestPath.replace('{contactId}', contactId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a contact.
  * @memberOf OutboundApi
  * @instance
  * @param {string} contactListId - Contact List ID
  * @param {string} contactId - Contact ID
  * @param {} body - Contact
  * @example
  * Body Example:
  * {
   "name": "",
   "contactListId": "",
   "data": {},
   "callable": true,
   "phoneNumberStatus": {}
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "contactListId": "",
   "data": {},
   "callRecords": {},
   "callable": true,
   "phoneNumberStatus": {},
   "selfUri": ""
}
  */
OutboundApi.prototype.putContactlistsContactlistIdContactsContactId = function putContactlistsContactlistIdContactsContactId(contactListId, contactId, body){
    var requestPath = '/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}';
    var requestQuery = {};
    var requestBody;

    if(contactListId === undefined || contactListId === null){
      throw new Error('Missing required  parameter: contactListId');
    }
    requestPath = requestPath.replace('{contactListId}', contactListId);
    if(contactId === undefined || contactId === null){
      throw new Error('Missing required  parameter: contactId');
    }
    requestPath = requestPath.replace('{contactId}', contactId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a contact.
  * @memberOf OutboundApi
  * @instance
  * @param {string} contactListId - Contact List ID
  * @param {string} contactId - Contact ID
  */
OutboundApi.prototype.deleteContactlistsContactlistIdContactsContactId = function deleteContactlistsContactlistIdContactsContactId(contactListId, contactId){
    var requestPath = '/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}';
    var requestQuery = {};
    var requestBody;

    if(contactListId === undefined || contactListId === null){
      throw new Error('Missing required  parameter: contactListId');
    }
    requestPath = requestPath.replace('{contactListId}', contactListId);
    if(contactId === undefined || contactId === null){
      throw new Error('Missing required  parameter: contactId');
    }
    requestPath = requestPath.replace('{contactId}', contactId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the URI of a contact list export.
  * @memberOf OutboundApi
  * @instance
  * @param {string} contactListId - ContactList ID
  * @param {string} download - Redirect to download uri
  * @example
  * 200 Response Example:
  * {
   "uri": "",
   "exportTimestamp": ""
}
  */
OutboundApi.prototype.getContactlistsContactlistIdExport = function getContactlistsContactlistIdExport(contactListId, download){
    var requestPath = '/api/v2/outbound/contactlists/{contactListId}/export';
    var requestQuery = {};
    var requestBody;

    if(contactListId === undefined || contactListId === null){
      throw new Error('Missing required  parameter: contactListId');
    }
    requestPath = requestPath.replace('{contactListId}', contactListId);
    requestQuery["download"] = download;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Initiate the export of a contact list.
  * @description Returns 200 if received OK.
  * @memberOf OutboundApi
  * @instance
  * @param {string} contactListId - ContactList ID
  */
OutboundApi.prototype.postContactlistsContactlistIdExport = function postContactlistsContactlistIdExport(contactListId){
    var requestPath = '/api/v2/outbound/contactlists/{contactListId}/export';
    var requestQuery = {};
    var requestBody;

    if(contactListId === undefined || contactListId === null){
      throw new Error('Missing required  parameter: contactListId');
    }
    requestPath = requestPath.replace('{contactListId}', contactListId);
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get dialer contactList import status.
  * @memberOf OutboundApi
  * @instance
  * @param {string} contactListId - ContactList ID
  * @example
  * 200 Response Example:
  * {
   "state": "",
   "totalRecords": 0,
   "completedRecords": 0,
   "percentComplete": 0,
   "failureReason": ""
}
  */
OutboundApi.prototype.getContactlistsContactlistIdImportstatus = function getContactlistsContactlistIdImportstatus(contactListId){
    var requestPath = '/api/v2/outbound/contactlists/{contactListId}/importstatus';
    var requestQuery = {};
    var requestBody;

    if(contactListId === undefined || contactListId === null){
      throw new Error('Missing required  parameter: contactListId');
    }
    requestPath = requestPath.replace('{contactListId}', contactListId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Add phone numbers to a Dialer DNC list.
  * @memberOf OutboundApi
  * @instance
  * @param {string} conversationId - Conversation ID
  */
OutboundApi.prototype.postConversationsConversationIdDnc = function postConversationsConversationIdDnc(conversationId){
    var requestPath = '/api/v2/outbound/conversations/{conversationId}/dnc';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query dialer DNC lists
  * @memberOf OutboundApi
  * @instance
  * @param {boolean} includeImportStatus - Import status
  * @param {boolean} includeSize - Include size
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} filterType - Filter type
  EQUALS,
  REGEX,
  CONTAINS,
  PREFIX,
  LESSTHAN,
  LESSTHANEQUALTO,
  GREATERTHAN,
  GREATERTHANEQUALTO,
  BEGINSWITH,
  ENDSWITH,
  * @param {string} name - Name
  * @param {string} sortBy - Sort by
  * @param {string} sortOrder - Sort order
  ascending,
  descending,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
OutboundApi.prototype.getDnclists = function getDnclists(includeImportStatus, includeSize, pageSize, pageNumber, filterType, name, sortBy, sortOrder){
    var requestPath = '/api/v2/outbound/dnclists';
    var requestQuery = {};
    var requestBody;

    requestQuery["includeImportStatus"] = includeImportStatus;
    requestQuery["includeSize"] = includeSize;
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["filterType"] = filterType;
    requestQuery["name"] = name;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create dialer DNC list
  * @memberOf OutboundApi
  * @instance
  * @param {} body - DncList
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "importStatus": {
      "state": "",
      "totalRecords": 0,
      "completedRecords": 0,
      "percentComplete": 0,
      "failureReason": ""
   },
   "size": 0,
   "dncSourceType": "",
   "loginId": "",
   "dncCodes": [],
   "licenseId": "",
   "selfUri": ""
}
  */
OutboundApi.prototype.postDnclists = function postDnclists(body){
    var requestPath = '/api/v2/outbound/dnclists';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get dialer DNC list
  * @memberOf OutboundApi
  * @instance
  * @param {string} dncListId - DncList ID
  * @param {boolean} includeImportStatus - Import status
  * @param {boolean} includeSize - Include size
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "importStatus": {
      "state": "",
      "totalRecords": 0,
      "completedRecords": 0,
      "percentComplete": 0,
      "failureReason": ""
   },
   "size": 0,
   "dncSourceType": "",
   "loginId": "",
   "dncCodes": [],
   "licenseId": "",
   "selfUri": ""
}
  */
OutboundApi.prototype.getDnclistsDnclistId = function getDnclistsDnclistId(dncListId, includeImportStatus, includeSize){
    var requestPath = '/api/v2/outbound/dnclists/{dncListId}';
    var requestQuery = {};
    var requestBody;

    if(dncListId === undefined || dncListId === null){
      throw new Error('Missing required  parameter: dncListId');
    }
    requestPath = requestPath.replace('{dncListId}', dncListId);
    requestQuery["includeImportStatus"] = includeImportStatus;
    requestQuery["includeSize"] = includeSize;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update dialer DNC list
  * @memberOf OutboundApi
  * @instance
  * @param {string} dncListId - DncList ID
  * @param {} body - DncList
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "importStatus": {
      "state": "",
      "totalRecords": 0,
      "completedRecords": 0,
      "percentComplete": 0,
      "failureReason": ""
   },
   "size": 0,
   "dncSourceType": "",
   "loginId": "",
   "dncCodes": [],
   "licenseId": "",
   "selfUri": ""
}
  */
OutboundApi.prototype.putDnclistsDnclistId = function putDnclistsDnclistId(dncListId, body){
    var requestPath = '/api/v2/outbound/dnclists/{dncListId}';
    var requestQuery = {};
    var requestBody;

    if(dncListId === undefined || dncListId === null){
      throw new Error('Missing required  parameter: dncListId');
    }
    requestPath = requestPath.replace('{dncListId}', dncListId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete dialer DNC list
  * @memberOf OutboundApi
  * @instance
  * @param {string} dncListId - DncList ID
  */
OutboundApi.prototype.deleteDnclistsDnclistId = function deleteDnclistsDnclistId(dncListId){
    var requestPath = '/api/v2/outbound/dnclists/{dncListId}';
    var requestQuery = {};
    var requestBody;

    if(dncListId === undefined || dncListId === null){
      throw new Error('Missing required  parameter: dncListId');
    }
    requestPath = requestPath.replace('{dncListId}', dncListId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the URI of a DNC list export.
  * @memberOf OutboundApi
  * @instance
  * @param {string} dncListId - DncList ID
  * @param {string} download - Redirect to download uri
  * @example
  * 200 Response Example:
  * {
   "uri": "",
   "exportTimestamp": ""
}
  */
OutboundApi.prototype.getDnclistsDnclistIdExport = function getDnclistsDnclistIdExport(dncListId, download){
    var requestPath = '/api/v2/outbound/dnclists/{dncListId}/export';
    var requestQuery = {};
    var requestBody;

    if(dncListId === undefined || dncListId === null){
      throw new Error('Missing required  parameter: dncListId');
    }
    requestPath = requestPath.replace('{dncListId}', dncListId);
    requestQuery["download"] = download;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Initiate the export of a dnc list.
  * @description Returns 200 if received OK.
  * @memberOf OutboundApi
  * @instance
  * @param {string} dncListId - DncList ID
  */
OutboundApi.prototype.postDnclistsDnclistIdExport = function postDnclistsDnclistIdExport(dncListId){
    var requestPath = '/api/v2/outbound/dnclists/{dncListId}/export';
    var requestQuery = {};
    var requestBody;

    if(dncListId === undefined || dncListId === null){
      throw new Error('Missing required  parameter: dncListId');
    }
    requestPath = requestPath.replace('{dncListId}', dncListId);
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get dialer dncList import status.
  * @memberOf OutboundApi
  * @instance
  * @param {string} dncListId - DncList ID
  * @example
  * 200 Response Example:
  * {
   "state": "",
   "totalRecords": 0,
   "completedRecords": 0,
   "percentComplete": 0,
   "failureReason": ""
}
  */
OutboundApi.prototype.getDnclistsDnclistIdImportstatus = function getDnclistsDnclistIdImportstatus(dncListId){
    var requestPath = '/api/v2/outbound/dnclists/{dncListId}/importstatus';
    var requestQuery = {};
    var requestBody;

    if(dncListId === undefined || dncListId === null){
      throw new Error('Missing required  parameter: dncListId');
    }
    requestPath = requestPath.replace('{dncListId}', dncListId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Add phone numbers to a Dialer DNC list.
  * @description Only Internal DNC lists may be appended to
  * @memberOf OutboundApi
  * @instance
  * @param {string} dncListId - DncList ID
  * @param {} body - DNC Phone Numbers
  */
OutboundApi.prototype.postDnclistsDnclistIdPhonenumbers = function postDnclistsDnclistIdPhonenumbers(dncListId, body){
    var requestPath = '/api/v2/outbound/dnclists/{dncListId}/phonenumbers';
    var requestQuery = {};
    var requestBody;

    if(dncListId === undefined || dncListId === null){
      throw new Error('Missing required  parameter: dncListId');
    }
    requestPath = requestPath.replace('{dncListId}', dncListId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query a list of Rule Sets.
  * @memberOf OutboundApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} filterType - Filter type
  EQUALS,
  REGEX,
  CONTAINS,
  PREFIX,
  LESSTHAN,
  LESSTHANEQUALTO,
  GREATERTHAN,
  GREATERTHANEQUALTO,
  BEGINSWITH,
  ENDSWITH,
  * @param {string} name - Name
  * @param {string} sortBy - Sort by
  * @param {string} sortOrder - Sort order
  ascending,
  descending,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
OutboundApi.prototype.getRulesets = function getRulesets(pageSize, pageNumber, filterType, name, sortBy, sortOrder){
    var requestPath = '/api/v2/outbound/rulesets';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["filterType"] = filterType;
    requestQuery["name"] = name;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a Dialer Call Analysis Response Set.
  * @memberOf OutboundApi
  * @instance
  * @param {} body - RuleSet
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "contactList": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "rules": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "contactList": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "rules": [],
   "selfUri": ""
}
  */
OutboundApi.prototype.postRulesets = function postRulesets(body){
    var requestPath = '/api/v2/outbound/rulesets';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Rule Set by ID.
  * @memberOf OutboundApi
  * @instance
  * @param {string} ruleSetId - Rule Set ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "contactList": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "rules": [],
   "selfUri": ""
}
  */
OutboundApi.prototype.getRulesetsRulesetId = function getRulesetsRulesetId(ruleSetId){
    var requestPath = '/api/v2/outbound/rulesets/{ruleSetId}';
    var requestQuery = {};
    var requestBody;

    if(ruleSetId === undefined || ruleSetId === null){
      throw new Error('Missing required  parameter: ruleSetId');
    }
    requestPath = requestPath.replace('{ruleSetId}', ruleSetId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a RuleSet.
  * @memberOf OutboundApi
  * @instance
  * @param {string} ruleSetId - Rule Set ID
  * @param {} body - RuleSet
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "contactList": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "rules": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "contactList": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "rules": [],
   "selfUri": ""
}
  */
OutboundApi.prototype.putRulesetsRulesetId = function putRulesetsRulesetId(ruleSetId, body){
    var requestPath = '/api/v2/outbound/rulesets/{ruleSetId}';
    var requestQuery = {};
    var requestBody;

    if(ruleSetId === undefined || ruleSetId === null){
      throw new Error('Missing required  parameter: ruleSetId');
    }
    requestPath = requestPath.replace('{ruleSetId}', ruleSetId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a Rule set.
  * @memberOf OutboundApi
  * @instance
  * @param {string} ruleSetId - Rule Set ID
  */
OutboundApi.prototype.deleteRulesetsRulesetId = function deleteRulesetsRulesetId(ruleSetId){
    var requestPath = '/api/v2/outbound/rulesets/{ruleSetId}';
    var requestQuery = {};
    var requestBody;

    if(ruleSetId === undefined || ruleSetId === null){
      throw new Error('Missing required  parameter: ruleSetId');
    }
    requestPath = requestPath.replace('{ruleSetId}', ruleSetId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query for a list of dialer campaign schedules.
  * @memberOf OutboundApi
  * @instance
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "dateCreated": "",
  "dateModified": "",
  "version": 0,
  "intervals": [],
  "timeZone": "",
  "campaign": {
   "id": "",
   "name": "",
   "selfUri": ""
  },
  "selfUri": ""
 }
]
  */
OutboundApi.prototype.getSchedulesCampaigns = function getSchedulesCampaigns(){
    var requestPath = '/api/v2/outbound/schedules/campaigns';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a dialer campaign schedule.
  * @memberOf OutboundApi
  * @instance
  * @param {string} campaignId - Campaign ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "intervals": [],
   "timeZone": "",
   "campaign": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
OutboundApi.prototype.getSchedulesCampaignsCampaignId = function getSchedulesCampaignsCampaignId(campaignId){
    var requestPath = '/api/v2/outbound/schedules/campaigns/{campaignId}';
    var requestQuery = {};
    var requestBody;

    if(campaignId === undefined || campaignId === null){
      throw new Error('Missing required  parameter: campaignId');
    }
    requestPath = requestPath.replace('{campaignId}', campaignId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a new campaign schedule.
  * @memberOf OutboundApi
  * @instance
  * @param {string} campaignId - Campaign ID
  * @param {} body - CampaignSchedule
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "intervals": [],
   "timeZone": "",
   "campaign": {
      "id": "",
      "name": "",
      "selfUri": ""
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "intervals": [],
   "timeZone": "",
   "campaign": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
OutboundApi.prototype.putSchedulesCampaignsCampaignId = function putSchedulesCampaignsCampaignId(campaignId, body){
    var requestPath = '/api/v2/outbound/schedules/campaigns/{campaignId}';
    var requestQuery = {};
    var requestBody;

    if(campaignId === undefined || campaignId === null){
      throw new Error('Missing required  parameter: campaignId');
    }
    requestPath = requestPath.replace('{campaignId}', campaignId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a dialer campaign schedule.
  * @memberOf OutboundApi
  * @instance
  * @param {string} campaignId - Campaign ID
  */
OutboundApi.prototype.deleteSchedulesCampaignsCampaignId = function deleteSchedulesCampaignsCampaignId(campaignId){
    var requestPath = '/api/v2/outbound/schedules/campaigns/{campaignId}';
    var requestQuery = {};
    var requestBody;

    if(campaignId === undefined || campaignId === null){
      throw new Error('Missing required  parameter: campaignId');
    }
    requestPath = requestPath.replace('{campaignId}', campaignId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query for a list of dialer sequence schedules.
  * @memberOf OutboundApi
  * @instance
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "dateCreated": "",
  "dateModified": "",
  "version": 0,
  "intervals": [],
  "timeZone": "",
  "sequence": {
   "id": "",
   "name": "",
   "selfUri": ""
  },
  "selfUri": ""
 }
]
  */
OutboundApi.prototype.getSchedulesSequences = function getSchedulesSequences(){
    var requestPath = '/api/v2/outbound/schedules/sequences';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a dialer sequence schedule.
  * @memberOf OutboundApi
  * @instance
  * @param {string} sequenceId - Sequence ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "intervals": [],
   "timeZone": "",
   "sequence": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
OutboundApi.prototype.getSchedulesSequencesSequenceId = function getSchedulesSequencesSequenceId(sequenceId){
    var requestPath = '/api/v2/outbound/schedules/sequences/{sequenceId}';
    var requestQuery = {};
    var requestBody;

    if(sequenceId === undefined || sequenceId === null){
      throw new Error('Missing required  parameter: sequenceId');
    }
    requestPath = requestPath.replace('{sequenceId}', sequenceId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a new sequence schedule.
  * @memberOf OutboundApi
  * @instance
  * @param {string} sequenceId - Sequence ID
  * @param {} body - SequenceSchedule
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "intervals": [],
   "timeZone": "",
   "sequence": {
      "id": "",
      "name": "",
      "selfUri": ""
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "intervals": [],
   "timeZone": "",
   "sequence": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
OutboundApi.prototype.putSchedulesSequencesSequenceId = function putSchedulesSequencesSequenceId(sequenceId, body){
    var requestPath = '/api/v2/outbound/schedules/sequences/{sequenceId}';
    var requestQuery = {};
    var requestBody;

    if(sequenceId === undefined || sequenceId === null){
      throw new Error('Missing required  parameter: sequenceId');
    }
    requestPath = requestPath.replace('{sequenceId}', sequenceId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a dialer sequence schedule.
  * @memberOf OutboundApi
  * @instance
  * @param {string} sequenceId - Sequence ID
  */
OutboundApi.prototype.deleteSchedulesSequencesSequenceId = function deleteSchedulesSequencesSequenceId(sequenceId){
    var requestPath = '/api/v2/outbound/schedules/sequences/{sequenceId}';
    var requestQuery = {};
    var requestBody;

    if(sequenceId === undefined || sequenceId === null){
      throw new Error('Missing required  parameter: sequenceId');
    }
    requestPath = requestPath.replace('{sequenceId}', sequenceId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query a list of dialer campaign sequences.
  * @memberOf OutboundApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} filterType - Filter type
  EQUALS,
  REGEX,
  CONTAINS,
  PREFIX,
  LESSTHAN,
  LESSTHANEQUALTO,
  GREATERTHAN,
  GREATERTHANEQUALTO,
  BEGINSWITH,
  ENDSWITH,
  * @param {string} name - Name
  * @param {string} sortBy - Sort by
  * @param {string} sortOrder - Sort order
  ascending,
  descending,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
OutboundApi.prototype.getSequences = function getSequences(pageSize, pageNumber, filterType, name, sortBy, sortOrder){
    var requestPath = '/api/v2/outbound/sequences';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["filterType"] = filterType;
    requestQuery["name"] = name;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a new campaign sequence.
  * @memberOf OutboundApi
  * @instance
  * @param {} body - Organization
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "campaigns": [],
   "status": "",
   "repeat": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "campaigns": [],
   "currentCampaign": 0,
   "status": "",
   "stopMessage": "",
   "repeat": true,
   "selfUri": ""
}
  */
OutboundApi.prototype.postSequences = function postSequences(body){
    var requestPath = '/api/v2/outbound/sequences';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a dialer campaign sequence.
  * @memberOf OutboundApi
  * @instance
  * @param {string} sequenceId - Campaign Sequence ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "campaigns": [],
   "currentCampaign": 0,
   "status": "",
   "stopMessage": "",
   "repeat": true,
   "selfUri": ""
}
  */
OutboundApi.prototype.getSequencesSequenceId = function getSequencesSequenceId(sequenceId){
    var requestPath = '/api/v2/outbound/sequences/{sequenceId}';
    var requestQuery = {};
    var requestBody;

    if(sequenceId === undefined || sequenceId === null){
      throw new Error('Missing required  parameter: sequenceId');
    }
    requestPath = requestPath.replace('{sequenceId}', sequenceId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a new campaign sequence.
  * @memberOf OutboundApi
  * @instance
  * @param {string} sequenceId - Campaign Sequence ID
  * @param {} body - Organization
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "campaigns": [],
   "status": "",
   "repeat": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "campaigns": [],
   "currentCampaign": 0,
   "status": "",
   "stopMessage": "",
   "repeat": true,
   "selfUri": ""
}
  */
OutboundApi.prototype.putSequencesSequenceId = function putSequencesSequenceId(sequenceId, body){
    var requestPath = '/api/v2/outbound/sequences/{sequenceId}';
    var requestQuery = {};
    var requestBody;

    if(sequenceId === undefined || sequenceId === null){
      throw new Error('Missing required  parameter: sequenceId');
    }
    requestPath = requestPath.replace('{sequenceId}', sequenceId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a dialer campaign sequence.
  * @memberOf OutboundApi
  * @instance
  * @param {string} sequenceId - Campaign Sequence ID
  */
OutboundApi.prototype.deleteSequencesSequenceId = function deleteSequencesSequenceId(sequenceId){
    var requestPath = '/api/v2/outbound/sequences/{sequenceId}';
    var requestQuery = {};
    var requestBody;

    if(sequenceId === undefined || sequenceId === null){
      throw new Error('Missing required  parameter: sequenceId');
    }
    requestPath = requestPath.replace('{sequenceId}', sequenceId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the Dialer wrap up code mapping.
  * @memberOf OutboundApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "defaultSet": [],
   "mapping": {},
   "selfUri": ""
}
  */
OutboundApi.prototype.getWrapupcodemappings = function getWrapupcodemappings(){
    var requestPath = '/api/v2/outbound/wrapupcodemappings';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update the Dialer wrap up code mapping.
  * @memberOf OutboundApi
  * @instance
  * @param {} body - wrapUpCodeMapping
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "defaultSet": [],
   "mapping": {}
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "defaultSet": [],
   "mapping": {},
   "selfUri": ""
}
  */
OutboundApi.prototype.putWrapupcodemappings = function putWrapupcodemappings(body){
    var requestPath = '/api/v2/outbound/wrapupcodemappings';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};


module.exports = OutboundApi;

},{}],20:[function(require,module,exports){
/**
* @class PresenceApi
* @example
* var api = new purecloud.platform.PresenceApi(pureCloudSession);
*/
function PresenceApi(session) {
    if(!(this instanceof PresenceApi)) {
        return new PresenceApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('PresenceApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get an Organization's list of Presence Definitions
  * @memberOf PresenceApi
  * @instance
  * @param {integer} pageNumber - Page number
  * @param {integer} pageSize - Page size
  * @param {string} doDeleted - Deleted query can be true, false or all
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
PresenceApi.prototype.getPresencedefinitions = function getPresencedefinitions(pageNumber, pageSize, doDeleted){
    var requestPath = '/api/v2/presencedefinitions';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageNumber"] = pageNumber;
    requestQuery["pageSize"] = pageSize;
    requestQuery["deleted"] = doDeleted;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a Presence Definition
  * @memberOf PresenceApi
  * @instance
  * @param {} body - The Presence Definition to create
  * @example
  * Body Example:
  * {
   "name": "",
   "languageLabels": {},
   "systemPresence": "",
   "deactivated": true,
   "primary": true,
   "createdBy": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "createdDate": "",
   "modifiedBy": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "modifiedDate": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "languageLabels": {},
   "systemPresence": "",
   "deactivated": true,
   "primary": true,
   "createdBy": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "createdDate": "",
   "modifiedBy": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "modifiedDate": "",
   "selfUri": ""
}
  */
PresenceApi.prototype.postPresencedefinitions = function postPresencedefinitions(body){
    var requestPath = '/api/v2/presencedefinitions';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Presence Definition
  * @memberOf PresenceApi
  * @instance
  * @param {string} presenceId - Organization Presence ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "languageLabels": {},
   "systemPresence": "",
   "deactivated": true,
   "primary": true,
   "createdBy": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "createdDate": "",
   "modifiedBy": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "modifiedDate": "",
   "selfUri": ""
}
  */
PresenceApi.prototype.getPresenceId = function getPresenceId(presenceId){
    var requestPath = '/api/v2/presencedefinitions/{presenceId}';
    var requestQuery = {};
    var requestBody;

    if(presenceId === undefined || presenceId === null){
      throw new Error('Missing required  parameter: presenceId');
    }
    requestPath = requestPath.replace('{presenceId}', presenceId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a Presence Definition
  * @memberOf PresenceApi
  * @instance
  * @param {string} presenceId - Organization Presence ID
  * @param {} body - The OrganizationPresence to update
  * @example
  * Body Example:
  * {
   "name": "",
   "languageLabels": {},
   "systemPresence": "",
   "deactivated": true,
   "primary": true,
   "createdBy": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "createdDate": "",
   "modifiedBy": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "modifiedDate": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "languageLabels": {},
   "systemPresence": "",
   "deactivated": true,
   "primary": true,
   "createdBy": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "createdDate": "",
   "modifiedBy": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "modifiedDate": "",
   "selfUri": ""
}
  */
PresenceApi.prototype.putPresenceId = function putPresenceId(presenceId, body){
    var requestPath = '/api/v2/presencedefinitions/{presenceId}';
    var requestQuery = {};
    var requestBody;

    if(presenceId === undefined || presenceId === null){
      throw new Error('Missing required  parameter: presenceId');
    }
    requestPath = requestPath.replace('{presenceId}', presenceId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a Presence Definition
  * @memberOf PresenceApi
  * @instance
  * @param {string} presenceId - Organization Presence ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "languageLabels": {},
   "systemPresence": "",
   "deactivated": true,
   "primary": true,
   "createdBy": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "createdDate": "",
   "modifiedBy": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "modifiedDate": "",
   "selfUri": ""
}
  */
PresenceApi.prototype.deletePresenceId = function deletePresenceId(presenceId){
    var requestPath = '/api/v2/presencedefinitions/{presenceId}';
    var requestQuery = {};
    var requestBody;

    if(presenceId === undefined || presenceId === null){
      throw new Error('Missing required  parameter: presenceId');
    }
    requestPath = requestPath.replace('{presenceId}', presenceId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of SystemPresences
  * @memberOf PresenceApi
  * @instance
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "selfUri": ""
 }
]
  */
PresenceApi.prototype.getSystempresences = function getSystempresences(){
    var requestPath = '/api/v2/systempresences';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a user's Presence
  * @memberOf PresenceApi
  * @instance
  * @param {string} userId - user Id
  * @param {string} sourceId - Source
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "source": "",
   "primary": true,
   "presenceDefinition": {
      "id": "",
      "name": "",
      "languageLabels": {},
      "systemPresence": "",
      "deactivated": true,
      "primary": true,
      "createdBy": {},
      "createdDate": "",
      "modifiedBy": {},
      "modifiedDate": "",
      "selfUri": ""
   },
   "message": "",
   "modifiedDate": "",
   "selfUri": ""
}
  */
PresenceApi.prototype.getUserIdPresencesSourceId = function getUserIdPresencesSourceId(userId, sourceId){
    var requestPath = '/api/v2/users/{userId}/presences/{sourceId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(sourceId === undefined || sourceId === null){
      throw new Error('Missing required  parameter: sourceId');
    }
    requestPath = requestPath.replace('{sourceId}', sourceId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Patch a user's Presence
  * @description The presence object can be patched one of three ways. Option 1: Set the 'primary' property to true. This will set the 'source' defined in the path as the user's primary presence source. Option 2: Provide the presenceDefinition value. The 'id' is the only value required within the presenceDefinition. Option 3: Provide the message value. Option 1 can be combined with Option 2 and/or Option 3.
  * @memberOf PresenceApi
  * @instance
  * @param {string} userId - user Id
  * @param {string} sourceId - Source
  * @param {} body - User presence
  * @example
  * Body Example:
  * {
   "name": "",
   "source": "",
   "primary": true,
   "presenceDefinition": {
      "name": "",
      "languageLabels": {},
      "systemPresence": "",
      "deactivated": true,
      "primary": true,
      "createdBy": {},
      "createdDate": "",
      "modifiedBy": {},
      "modifiedDate": ""
   },
   "message": "",
   "modifiedDate": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "source": "",
   "primary": true,
   "presenceDefinition": {
      "id": "",
      "name": "",
      "languageLabels": {},
      "systemPresence": "",
      "deactivated": true,
      "primary": true,
      "createdBy": {},
      "createdDate": "",
      "modifiedBy": {},
      "modifiedDate": "",
      "selfUri": ""
   },
   "message": "",
   "modifiedDate": "",
   "selfUri": ""
}
  */
PresenceApi.prototype.patchUserIdPresencesSourceId = function patchUserIdPresencesSourceId(userId, sourceId, body){
    var requestPath = '/api/v2/users/{userId}/presences/{sourceId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(sourceId === undefined || sourceId === null){
      throw new Error('Missing required  parameter: sourceId');
    }
    requestPath = requestPath.replace('{sourceId}', sourceId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};


module.exports = PresenceApi;

},{}],21:[function(require,module,exports){
/**
* @class QualityApi
* @example
* var api = new purecloud.platform.QualityApi(pureCloudSession);
*/
function QualityApi(session) {
    if(!(this instanceof QualityApi)) {
        return new QualityApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('QualityApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Query for evaluation aggregates
  * @memberOf QualityApi
  * @instance
  * @param {} body - query
  * @example
  * Body Example:
  * {
   "interval": "",
   "granularity": "",
   "groupBy": [],
   "filter": {
      "type": "",
      "clauses": [],
      "predicates": []
   },
   "metrics": [],
   "flattenMultivaluedDimensions": true
}
  * @example
  * 200 Response Example:
  * {
   "results": []
}
  */
QualityApi.prototype.postEvaluationsAggregatesQuery = function postEvaluationsAggregatesQuery(body){
    var requestPath = '/api/v2/analytics/evaluations/aggregates/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Gets a list of Agent Activities
  * @description Including the number of evaluations and average evaluation score
  * @memberOf QualityApi
  * @instance
  * @param {integer} pageSize - The total page size requested
  * @param {integer} pageNumber - The page number requested
  * @param {string} sortBy - variable name requested to sort by
  * @param {array} expand - variable name requested by expand list
  * @param {string} nextPage - next page token
  * @param {string} previousPage - Previous page token
  * @param {string} startTime - Start time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
  * @param {string} endTime - End time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
  * @param {array} agentUserId - user id of agent requested
  * @param {string} evaluatorUserId - user id of the evaluator
  * @param {string} name - name
  * @param {string} group - group id
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
QualityApi.prototype.getAgentsActivity = function getAgentsActivity(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, startTime, endTime, agentUserId, evaluatorUserId, name, group){
    var requestPath = '/api/v2/quality/agents/activity';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["expand"] = expand;
    requestQuery["nextPage"] = nextPage;
    requestQuery["previousPage"] = previousPage;
    requestQuery["startTime"] = startTime;
    requestQuery["endTime"] = endTime;
    requestQuery["agentUserId"] = agentUserId;
    requestQuery["evaluatorUserId"] = evaluatorUserId;
    requestQuery["name"] = name;
    requestQuery["group"] = group;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of calibrations
  * @memberOf QualityApi
  * @instance
  * @param {integer} pageSize - The total page size requested
  * @param {integer} pageNumber - The page number requested
  * @param {string} sortBy - variable name requested to sort by
  * @param {array} expand - variable name requested by expand list
  * @param {string} nextPage - next page token
  * @param {string} previousPage - Previous page token
  * @param {string} conversationId - conversation id
  * @param {string} startTime - Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
  * @param {string} endTime - end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
  * @param {string} calibratorId - user id of calibrator
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
QualityApi.prototype.getCalibrations = function getCalibrations(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, conversationId, startTime, endTime, calibratorId){
    var requestPath = '/api/v2/quality/calibrations';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["expand"] = expand;
    requestQuery["nextPage"] = nextPage;
    requestQuery["previousPage"] = previousPage;
    requestQuery["conversationId"] = conversationId;
    requestQuery["startTime"] = startTime;
    requestQuery["endTime"] = endTime;
    if(calibratorId === undefined || calibratorId === null){
      throw new Error('Missing required  parameter: calibratorId');
    }
    requestQuery["calibratorId"] = calibratorId;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a calibration
  * @memberOf QualityApi
  * @instance
  * @param {} body - calibration
  * @param {string} expand - calibratorId
  * @example
  * Body Example:
  * {
   "name": "",
   "calibrator": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "agent": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "conversation": {
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": ""
   },
   "evaluationForm": {
      "name": "",
      "type": "",
      "modifiedDate": "",
      "published": true,
      "contextId": "",
      "questionGroups": [],
      "publishedVersions": {}
   },
   "contextId": "",
   "averageScore": 0,
   "highScore": 0,
   "lowScore": 0,
   "createdDate": "",
   "evaluations": [],
   "evaluators": [],
   "scoringIndex": {
      "name": "",
      "conversation": {},
      "evaluationForm": {},
      "evaluator": {},
      "agent": {},
      "calibration": {},
      "status": "",
      "answers": {},
      "agentHasRead": true,
      "releaseDate": "",
      "assignedDate": "",
      "changedDate": "",
      "queue": {},
      "neverRelease": true,
      "resourceId": "",
      "resourceType": "",
      "redacted": true,
      "isScoringIndex": true
   },
   "expertEvaluator": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "calibrator": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "agent": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "conversation": {
      "id": "",
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": "",
      "selfUri": ""
   },
   "evaluationForm": {
      "id": "",
      "name": "",
      "type": "",
      "modifiedDate": "",
      "published": true,
      "contextId": "",
      "questionGroups": [],
      "publishedVersions": {},
      "selfUri": ""
   },
   "contextId": "",
   "averageScore": 0,
   "highScore": 0,
   "lowScore": 0,
   "createdDate": "",
   "evaluations": [],
   "evaluators": [],
   "scoringIndex": {
      "id": "",
      "name": "",
      "conversation": {},
      "evaluationForm": {},
      "evaluator": {},
      "agent": {},
      "calibration": {},
      "status": "",
      "answers": {},
      "agentHasRead": true,
      "releaseDate": "",
      "assignedDate": "",
      "changedDate": "",
      "queue": {},
      "neverRelease": true,
      "resourceId": "",
      "resourceType": "",
      "redacted": true,
      "isScoringIndex": true,
      "selfUri": ""
   },
   "expertEvaluator": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "selfUri": ""
}
  */
QualityApi.prototype.postCalibrations = function postCalibrations(body, expand){
    var requestPath = '/api/v2/quality/calibrations';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["expand"] = expand;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a calibration by id.
  * @memberOf QualityApi
  * @instance
  * @param {string} calibrationId - Calibration ID
  * @param {string} calibratorId - calibratorId
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "calibrator": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "agent": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "conversation": {
      "id": "",
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": "",
      "selfUri": ""
   },
   "evaluationForm": {
      "id": "",
      "name": "",
      "type": "",
      "modifiedDate": "",
      "published": true,
      "contextId": "",
      "questionGroups": [],
      "publishedVersions": {},
      "selfUri": ""
   },
   "contextId": "",
   "averageScore": 0,
   "highScore": 0,
   "lowScore": 0,
   "createdDate": "",
   "evaluations": [],
   "evaluators": [],
   "scoringIndex": {
      "id": "",
      "name": "",
      "conversation": {},
      "evaluationForm": {},
      "evaluator": {},
      "agent": {},
      "calibration": {},
      "status": "",
      "answers": {},
      "agentHasRead": true,
      "releaseDate": "",
      "assignedDate": "",
      "changedDate": "",
      "queue": {},
      "neverRelease": true,
      "resourceId": "",
      "resourceType": "",
      "redacted": true,
      "isScoringIndex": true,
      "selfUri": ""
   },
   "expertEvaluator": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "selfUri": ""
}
  */
QualityApi.prototype.getCalibrationsCalibrationId = function getCalibrationsCalibrationId(calibrationId, calibratorId){
    var requestPath = '/api/v2/quality/calibrations/{calibrationId}';
    var requestQuery = {};
    var requestBody;

    if(calibrationId === undefined || calibrationId === null){
      throw new Error('Missing required  parameter: calibrationId');
    }
    requestPath = requestPath.replace('{calibrationId}', calibrationId);
    if(calibratorId === undefined || calibratorId === null){
      throw new Error('Missing required  parameter: calibratorId');
    }
    requestQuery["calibratorId"] = calibratorId;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a calibration to the specified calibration via PUT.  Editable fields include: evaluators, expertEvaluator, and scoringIndex
  * @memberOf QualityApi
  * @instance
  * @param {string} calibrationId - Calibration ID
  * @param {} body - Calibration
  * @example
  * Body Example:
  * {
   "name": "",
   "calibrator": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "agent": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "conversation": {
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": ""
   },
   "evaluationForm": {
      "name": "",
      "type": "",
      "modifiedDate": "",
      "published": true,
      "contextId": "",
      "questionGroups": [],
      "publishedVersions": {}
   },
   "contextId": "",
   "averageScore": 0,
   "highScore": 0,
   "lowScore": 0,
   "createdDate": "",
   "evaluations": [],
   "evaluators": [],
   "scoringIndex": {
      "name": "",
      "conversation": {},
      "evaluationForm": {},
      "evaluator": {},
      "agent": {},
      "calibration": {},
      "status": "",
      "answers": {},
      "agentHasRead": true,
      "releaseDate": "",
      "assignedDate": "",
      "changedDate": "",
      "queue": {},
      "neverRelease": true,
      "resourceId": "",
      "resourceType": "",
      "redacted": true,
      "isScoringIndex": true
   },
   "expertEvaluator": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "calibrator": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "agent": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "conversation": {
      "id": "",
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": "",
      "selfUri": ""
   },
   "evaluationForm": {
      "id": "",
      "name": "",
      "type": "",
      "modifiedDate": "",
      "published": true,
      "contextId": "",
      "questionGroups": [],
      "publishedVersions": {},
      "selfUri": ""
   },
   "contextId": "",
   "averageScore": 0,
   "highScore": 0,
   "lowScore": 0,
   "createdDate": "",
   "evaluations": [],
   "evaluators": [],
   "scoringIndex": {
      "id": "",
      "name": "",
      "conversation": {},
      "evaluationForm": {},
      "evaluator": {},
      "agent": {},
      "calibration": {},
      "status": "",
      "answers": {},
      "agentHasRead": true,
      "releaseDate": "",
      "assignedDate": "",
      "changedDate": "",
      "queue": {},
      "neverRelease": true,
      "resourceId": "",
      "resourceType": "",
      "redacted": true,
      "isScoringIndex": true,
      "selfUri": ""
   },
   "expertEvaluator": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "selfUri": ""
}
  */
QualityApi.prototype.putCalibrationsCalibrationId = function putCalibrationsCalibrationId(calibrationId, body){
    var requestPath = '/api/v2/quality/calibrations/{calibrationId}';
    var requestQuery = {};
    var requestBody;

    if(calibrationId === undefined || calibrationId === null){
      throw new Error('Missing required  parameter: calibrationId');
    }
    requestPath = requestPath.replace('{calibrationId}', calibrationId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a calibration by id.
  * @memberOf QualityApi
  * @instance
  * @param {string} calibrationId - Calibration ID
  * @param {string} calibratorId - calibratorId
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "calibrator": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "agent": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "conversation": {
      "id": "",
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": "",
      "selfUri": ""
   },
   "evaluationForm": {
      "id": "",
      "name": "",
      "type": "",
      "modifiedDate": "",
      "published": true,
      "contextId": "",
      "questionGroups": [],
      "publishedVersions": {},
      "selfUri": ""
   },
   "contextId": "",
   "averageScore": 0,
   "highScore": 0,
   "lowScore": 0,
   "createdDate": "",
   "evaluations": [],
   "evaluators": [],
   "scoringIndex": {
      "id": "",
      "name": "",
      "conversation": {},
      "evaluationForm": {},
      "evaluator": {},
      "agent": {},
      "calibration": {},
      "status": "",
      "answers": {},
      "agentHasRead": true,
      "releaseDate": "",
      "assignedDate": "",
      "changedDate": "",
      "queue": {},
      "neverRelease": true,
      "resourceId": "",
      "resourceType": "",
      "redacted": true,
      "isScoringIndex": true,
      "selfUri": ""
   },
   "expertEvaluator": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "selfUri": ""
}
  */
QualityApi.prototype.deleteCalibrationsCalibrationId = function deleteCalibrationsCalibrationId(calibrationId, calibratorId){
    var requestPath = '/api/v2/quality/calibrations/{calibrationId}';
    var requestQuery = {};
    var requestBody;

    if(calibrationId === undefined || calibrationId === null){
      throw new Error('Missing required  parameter: calibrationId');
    }
    requestPath = requestPath.replace('{calibrationId}', calibrationId);
    if(calibratorId === undefined || calibratorId === null){
      throw new Error('Missing required  parameter: calibratorId');
    }
    requestQuery["calibratorId"] = calibratorId;
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get audits for conversation or recording
  * @memberOf QualityApi
  * @instance
  * @param {string} conversationId - Conversation ID
  * @param {integer} pageSize - The total page size requested
  * @param {integer} pageNumber - The page number requested
  * @param {string} sortBy - variable name requested to sort by
  * @param {array} expand - variable name requested by expand list
  * @param {string} nextPage - next page token
  * @param {string} previousPage - Previous page token
  * @param {string} recordingId - id of the recording
  * @param {string} entityType - entity type options: Recording, Calibration, Evaluation, Annotation
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
QualityApi.prototype.getConversationsConversationIdAudits = function getConversationsConversationIdAudits(conversationId, pageSize, pageNumber, sortBy, expand, nextPage, previousPage, recordingId, entityType){
    var requestPath = '/api/v2/quality/conversations/{conversationId}/audits';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["expand"] = expand;
    requestQuery["nextPage"] = nextPage;
    requestQuery["previousPage"] = previousPage;
    requestQuery["recordingId"] = recordingId;
    requestQuery["entityType"] = entityType;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create an evaluation
  * @memberOf QualityApi
  * @instance
  * @param {string} conversationId - conversationId
  * @param {} body - evaluation
  * @param {string} expand - evaluatorId
  * @example
  * Body Example:
  * {
   "name": "",
   "conversation": {
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": ""
   },
   "evaluationForm": {
      "name": "",
      "type": "",
      "modifiedDate": "",
      "published": true,
      "contextId": "",
      "questionGroups": [],
      "publishedVersions": {}
   },
   "evaluator": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "agent": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "calibration": {
      "name": "",
      "calibrator": {},
      "agent": {},
      "conversation": {},
      "evaluationForm": {},
      "contextId": "",
      "averageScore": 0,
      "highScore": 0,
      "lowScore": 0,
      "createdDate": "",
      "evaluations": [],
      "evaluators": [],
      "scoringIndex": {},
      "expertEvaluator": {}
   },
   "status": "",
   "answers": {
      "totalScore": {},
      "totalCriticalScore": {},
      "questionGroupScores": [],
      "anyFailedKillQuestions": true,
      "comments": "",
      "agentComments": ""
   },
   "agentHasRead": true,
   "releaseDate": "",
   "assignedDate": "",
   "changedDate": "",
   "queue": {
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "mediaSettings": {},
      "bullseye": {},
      "acwSettings": {},
      "skillEvaluationMethod": "",
      "queueFlow": {},
      "callingPartyName": "",
      "callingPartyNumber": "",
      "memberCount": 0
   },
   "neverRelease": true,
   "resourceId": "",
   "resourceType": "",
   "redacted": true,
   "isScoringIndex": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "conversation": {
      "id": "",
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": "",
      "selfUri": ""
   },
   "evaluationForm": {
      "id": "",
      "name": "",
      "type": "",
      "modifiedDate": "",
      "published": true,
      "contextId": "",
      "questionGroups": [],
      "publishedVersions": {},
      "selfUri": ""
   },
   "evaluator": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "agent": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "calibration": {
      "id": "",
      "name": "",
      "calibrator": {},
      "agent": {},
      "conversation": {},
      "evaluationForm": {},
      "contextId": "",
      "averageScore": 0,
      "highScore": 0,
      "lowScore": 0,
      "createdDate": "",
      "evaluations": [],
      "evaluators": [],
      "scoringIndex": {},
      "expertEvaluator": {},
      "selfUri": ""
   },
   "status": "",
   "answers": {
      "totalScore": {},
      "totalCriticalScore": {},
      "questionGroupScores": [],
      "anyFailedKillQuestions": true,
      "comments": "",
      "agentComments": ""
   },
   "agentHasRead": true,
   "releaseDate": "",
   "assignedDate": "",
   "changedDate": "",
   "queue": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "mediaSettings": {},
      "bullseye": {},
      "acwSettings": {},
      "skillEvaluationMethod": "",
      "queueFlow": {},
      "callingPartyName": "",
      "callingPartyNumber": "",
      "memberCount": 0,
      "selfUri": ""
   },
   "neverRelease": true,
   "resourceId": "",
   "resourceType": "",
   "redacted": true,
   "isScoringIndex": true,
   "selfUri": ""
}
  */
QualityApi.prototype.postConversationsConversationIdEvaluations = function postConversationsConversationIdEvaluations(conversationId, body, expand){
    var requestPath = '/api/v2/quality/conversations/{conversationId}/evaluations';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["expand"] = expand;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get an evaluation
  * @memberOf QualityApi
  * @instance
  * @param {string} conversationId - conversationId
  * @param {string} evaluationId - evaluationId
  * @param {string} expand - agent, evaluator, evaluationForm
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "conversation": {
      "id": "",
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": "",
      "selfUri": ""
   },
   "evaluationForm": {
      "id": "",
      "name": "",
      "type": "",
      "modifiedDate": "",
      "published": true,
      "contextId": "",
      "questionGroups": [],
      "publishedVersions": {},
      "selfUri": ""
   },
   "evaluator": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "agent": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "calibration": {
      "id": "",
      "name": "",
      "calibrator": {},
      "agent": {},
      "conversation": {},
      "evaluationForm": {},
      "contextId": "",
      "averageScore": 0,
      "highScore": 0,
      "lowScore": 0,
      "createdDate": "",
      "evaluations": [],
      "evaluators": [],
      "scoringIndex": {},
      "expertEvaluator": {},
      "selfUri": ""
   },
   "status": "",
   "answers": {
      "totalScore": {},
      "totalCriticalScore": {},
      "questionGroupScores": [],
      "anyFailedKillQuestions": true,
      "comments": "",
      "agentComments": ""
   },
   "agentHasRead": true,
   "releaseDate": "",
   "assignedDate": "",
   "changedDate": "",
   "queue": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "mediaSettings": {},
      "bullseye": {},
      "acwSettings": {},
      "skillEvaluationMethod": "",
      "queueFlow": {},
      "callingPartyName": "",
      "callingPartyNumber": "",
      "memberCount": 0,
      "selfUri": ""
   },
   "neverRelease": true,
   "resourceId": "",
   "resourceType": "",
   "redacted": true,
   "isScoringIndex": true,
   "selfUri": ""
}
  */
QualityApi.prototype.getConversationsConversationIdEvaluationsEvaluationId = function getConversationsConversationIdEvaluationsEvaluationId(conversationId, evaluationId, expand){
    var requestPath = '/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(evaluationId === undefined || evaluationId === null){
      throw new Error('Missing required  parameter: evaluationId');
    }
    requestPath = requestPath.replace('{evaluationId}', evaluationId);
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an evaluation
  * @memberOf QualityApi
  * @instance
  * @param {string} conversationId - conversationId
  * @param {string} evaluationId - evaluationId
  * @param {} body - evaluation
  * @param {string} expand - evaluatorId
  * @example
  * Body Example:
  * {
   "name": "",
   "conversation": {
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": ""
   },
   "evaluationForm": {
      "name": "",
      "type": "",
      "modifiedDate": "",
      "published": true,
      "contextId": "",
      "questionGroups": [],
      "publishedVersions": {}
   },
   "evaluator": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "agent": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "calibration": {
      "name": "",
      "calibrator": {},
      "agent": {},
      "conversation": {},
      "evaluationForm": {},
      "contextId": "",
      "averageScore": 0,
      "highScore": 0,
      "lowScore": 0,
      "createdDate": "",
      "evaluations": [],
      "evaluators": [],
      "scoringIndex": {},
      "expertEvaluator": {}
   },
   "status": "",
   "answers": {
      "totalScore": {},
      "totalCriticalScore": {},
      "questionGroupScores": [],
      "anyFailedKillQuestions": true,
      "comments": "",
      "agentComments": ""
   },
   "agentHasRead": true,
   "releaseDate": "",
   "assignedDate": "",
   "changedDate": "",
   "queue": {
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "mediaSettings": {},
      "bullseye": {},
      "acwSettings": {},
      "skillEvaluationMethod": "",
      "queueFlow": {},
      "callingPartyName": "",
      "callingPartyNumber": "",
      "memberCount": 0
   },
   "neverRelease": true,
   "resourceId": "",
   "resourceType": "",
   "redacted": true,
   "isScoringIndex": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "conversation": {
      "id": "",
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": "",
      "selfUri": ""
   },
   "evaluationForm": {
      "id": "",
      "name": "",
      "type": "",
      "modifiedDate": "",
      "published": true,
      "contextId": "",
      "questionGroups": [],
      "publishedVersions": {},
      "selfUri": ""
   },
   "evaluator": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "agent": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "calibration": {
      "id": "",
      "name": "",
      "calibrator": {},
      "agent": {},
      "conversation": {},
      "evaluationForm": {},
      "contextId": "",
      "averageScore": 0,
      "highScore": 0,
      "lowScore": 0,
      "createdDate": "",
      "evaluations": [],
      "evaluators": [],
      "scoringIndex": {},
      "expertEvaluator": {},
      "selfUri": ""
   },
   "status": "",
   "answers": {
      "totalScore": {},
      "totalCriticalScore": {},
      "questionGroupScores": [],
      "anyFailedKillQuestions": true,
      "comments": "",
      "agentComments": ""
   },
   "agentHasRead": true,
   "releaseDate": "",
   "assignedDate": "",
   "changedDate": "",
   "queue": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "mediaSettings": {},
      "bullseye": {},
      "acwSettings": {},
      "skillEvaluationMethod": "",
      "queueFlow": {},
      "callingPartyName": "",
      "callingPartyNumber": "",
      "memberCount": 0,
      "selfUri": ""
   },
   "neverRelease": true,
   "resourceId": "",
   "resourceType": "",
   "redacted": true,
   "isScoringIndex": true,
   "selfUri": ""
}
  */
QualityApi.prototype.putConversationsConversationIdEvaluationsEvaluationId = function putConversationsConversationIdEvaluationsEvaluationId(conversationId, evaluationId, body, expand){
    var requestPath = '/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(evaluationId === undefined || evaluationId === null){
      throw new Error('Missing required  parameter: evaluationId');
    }
    requestPath = requestPath.replace('{evaluationId}', evaluationId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["expand"] = expand;
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete an evaluation
  * @memberOf QualityApi
  * @instance
  * @param {string} conversationId - conversationId
  * @param {string} evaluationId - evaluationId
  * @param {string} expand - evaluatorId
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "conversation": {
      "id": "",
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": "",
      "selfUri": ""
   },
   "evaluationForm": {
      "id": "",
      "name": "",
      "type": "",
      "modifiedDate": "",
      "published": true,
      "contextId": "",
      "questionGroups": [],
      "publishedVersions": {},
      "selfUri": ""
   },
   "evaluator": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "agent": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "calibration": {
      "id": "",
      "name": "",
      "calibrator": {},
      "agent": {},
      "conversation": {},
      "evaluationForm": {},
      "contextId": "",
      "averageScore": 0,
      "highScore": 0,
      "lowScore": 0,
      "createdDate": "",
      "evaluations": [],
      "evaluators": [],
      "scoringIndex": {},
      "expertEvaluator": {},
      "selfUri": ""
   },
   "status": "",
   "answers": {
      "totalScore": {},
      "totalCriticalScore": {},
      "questionGroupScores": [],
      "anyFailedKillQuestions": true,
      "comments": "",
      "agentComments": ""
   },
   "agentHasRead": true,
   "releaseDate": "",
   "assignedDate": "",
   "changedDate": "",
   "queue": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "mediaSettings": {},
      "bullseye": {},
      "acwSettings": {},
      "skillEvaluationMethod": "",
      "queueFlow": {},
      "callingPartyName": "",
      "callingPartyNumber": "",
      "memberCount": 0,
      "selfUri": ""
   },
   "neverRelease": true,
   "resourceId": "",
   "resourceType": "",
   "redacted": true,
   "isScoringIndex": true,
   "selfUri": ""
}
  */
QualityApi.prototype.deleteConversationsConversationIdEvaluationsEvaluationId = function deleteConversationsConversationIdEvaluationsEvaluationId(conversationId, evaluationId, expand){
    var requestPath = '/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(evaluationId === undefined || evaluationId === null){
      throw new Error('Missing required  parameter: evaluationId');
    }
    requestPath = requestPath.replace('{evaluationId}', evaluationId);
    requestQuery["expand"] = expand;
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Queries Evaluations and returns a paged list
  * @description Query params must include one of conversationId, evaluatorUserId, or agentUserId
  * @memberOf QualityApi
  * @instance
  * @param {integer} pageSize - The total page size requested
  * @param {integer} pageNumber - The page number requested
  * @param {string} sortBy - variable name requested to sort by
  * @param {array} expand - variable name requested by expand list
  * @param {string} nextPage - next page token
  * @param {string} previousPage - Previous page token
  * @param {string} conversationId - conversationId specified
  * @param {string} agentUserId - user id of the agent
  * @param {string} evaluatorUserId - evaluator user id
  * @param {string} queueId - queue id
  * @param {string} startTime - start time of the evaluation query
  * @param {string} endTime - end time of the evaluation query
  * @param {array} evaluationState - evaluation state options: Pending, InProgress, Finished
  * @param {boolean} isReleased - the evaluation has been released
  * @param {boolean} agentHasRead - agent has the evaluation
  * @param {boolean} expandAnswerTotalScores - get the total scores for evaluations
  * @param {integer} maximum - maximum
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
QualityApi.prototype.getEvaluationsQuery = function getEvaluationsQuery(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, conversationId, agentUserId, evaluatorUserId, queueId, startTime, endTime, evaluationState, isReleased, agentHasRead, expandAnswerTotalScores, maximum){
    var requestPath = '/api/v2/quality/evaluations/query';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["expand"] = expand;
    requestQuery["nextPage"] = nextPage;
    requestQuery["previousPage"] = previousPage;
    requestQuery["conversationId"] = conversationId;
    requestQuery["agentUserId"] = agentUserId;
    requestQuery["evaluatorUserId"] = evaluatorUserId;
    requestQuery["queueId"] = queueId;
    requestQuery["startTime"] = startTime;
    requestQuery["endTime"] = endTime;
    requestQuery["evaluationState"] = evaluationState;
    requestQuery["isReleased"] = isReleased;
    requestQuery["agentHasRead"] = agentHasRead;
    requestQuery["expandAnswerTotalScores"] = expandAnswerTotalScores;
    requestQuery["maximum"] = maximum;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Score evaluation
  * @memberOf QualityApi
  * @instance
  * @param {} body - evaluationAndScoringSet
  * @example
  * Body Example:
  * {
   "evaluationForm": {
      "name": "",
      "type": "",
      "modifiedDate": "",
      "published": true,
      "contextId": "",
      "questionGroups": [],
      "publishedVersions": {}
   },
   "answers": {
      "totalScore": {},
      "totalCriticalScore": {},
      "questionGroupScores": [],
      "anyFailedKillQuestions": true,
      "comments": "",
      "agentComments": ""
   }
}
  * @example
  * 200 Response Example:
  * {
   "totalScore": {},
   "totalCriticalScore": {},
   "questionGroupScores": [],
   "anyFailedKillQuestions": true,
   "comments": "",
   "agentComments": ""
}
  */
QualityApi.prototype.postEvaluationsScoring = function postEvaluationsScoring(body){
    var requestPath = '/api/v2/quality/evaluations/scoring';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get an evaluator activity
  * @memberOf QualityApi
  * @instance
  * @param {integer} pageSize - The total page size requested
  * @param {integer} pageNumber - The page number requested
  * @param {string} sortBy - variable name requested to sort by
  * @param {array} expand - variable name requested by expand list
  * @param {string} nextPage - next page token
  * @param {string} previousPage - Previous page token
  * @param {string} startTime - The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
  * @param {string} endTime - The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
  * @param {string} name - Evaluator name
  * @param {array} permission - permission strings
  * @param {string} group - group id
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
QualityApi.prototype.getEvaluatorsActivity = function getEvaluatorsActivity(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, startTime, endTime, name, permission, group){
    var requestPath = '/api/v2/quality/evaluators/activity';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["expand"] = expand;
    requestQuery["nextPage"] = nextPage;
    requestQuery["previousPage"] = previousPage;
    requestQuery["startTime"] = startTime;
    requestQuery["endTime"] = endTime;
    requestQuery["name"] = name;
    requestQuery["permission"] = permission;
    requestQuery["group"] = group;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of evaluation forms
  * @memberOf QualityApi
  * @instance
  * @param {integer} pageSize - The total page size requested
  * @param {integer} pageNumber - The page number requested
  * @param {string} sortBy - variable name requested to sort by
  * @param {string} nextPage - next page token
  * @param {string} previousPage - Previous page token
  * @param {string} expand - Expand
  * @param {string} name - Name
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
QualityApi.prototype.getForms = function getForms(pageSize, pageNumber, sortBy, nextPage, previousPage, expand, name){
    var requestPath = '/api/v2/quality/forms';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["nextPage"] = nextPage;
    requestQuery["previousPage"] = previousPage;
    requestQuery["expand"] = expand;
    requestQuery["name"] = name;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create an evaluation form.
  * @memberOf QualityApi
  * @instance
  * @param {} body - Evaluation form
  * @example
  * Body Example:
  * {
   "name": "",
   "type": "",
   "modifiedDate": "",
   "published": true,
   "contextId": "",
   "questionGroups": [],
   "publishedVersions": {
      "pageSize": 0,
      "pageNumber": 0,
      "total": 0,
      "entities": [],
      "selfUri": "",
      "firstUri": "",
      "previousUri": "",
      "nextUri": "",
      "lastUri": "",
      "pageCount": 0
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "modifiedDate": "",
   "published": true,
   "contextId": "",
   "questionGroups": [],
   "publishedVersions": {
      "pageSize": 0,
      "pageNumber": 0,
      "total": 0,
      "entities": [],
      "selfUri": "",
      "firstUri": "",
      "previousUri": "",
      "nextUri": "",
      "lastUri": "",
      "pageCount": 0
   },
   "selfUri": ""
}
  */
QualityApi.prototype.postForms = function postForms(body){
    var requestPath = '/api/v2/quality/forms';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get an evaluation form
  * @memberOf QualityApi
  * @instance
  * @param {string} formId - Form ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "modifiedDate": "",
   "published": true,
   "contextId": "",
   "questionGroups": [],
   "publishedVersions": {
      "pageSize": 0,
      "pageNumber": 0,
      "total": 0,
      "entities": [],
      "selfUri": "",
      "firstUri": "",
      "previousUri": "",
      "nextUri": "",
      "lastUri": "",
      "pageCount": 0
   },
   "selfUri": ""
}
  */
QualityApi.prototype.getFormsFormId = function getFormsFormId(formId){
    var requestPath = '/api/v2/quality/forms/{formId}';
    var requestQuery = {};
    var requestBody;

    if(formId === undefined || formId === null){
      throw new Error('Missing required  parameter: formId');
    }
    requestPath = requestPath.replace('{formId}', formId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an evaluation form.
  * @memberOf QualityApi
  * @instance
  * @param {string} formId - Form ID
  * @param {} body - Evaluation form
  * @example
  * Body Example:
  * {
   "name": "",
   "type": "",
   "modifiedDate": "",
   "published": true,
   "contextId": "",
   "questionGroups": [],
   "publishedVersions": {
      "pageSize": 0,
      "pageNumber": 0,
      "total": 0,
      "entities": [],
      "selfUri": "",
      "firstUri": "",
      "previousUri": "",
      "nextUri": "",
      "lastUri": "",
      "pageCount": 0
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "modifiedDate": "",
   "published": true,
   "contextId": "",
   "questionGroups": [],
   "publishedVersions": {
      "pageSize": 0,
      "pageNumber": 0,
      "total": 0,
      "entities": [],
      "selfUri": "",
      "firstUri": "",
      "previousUri": "",
      "nextUri": "",
      "lastUri": "",
      "pageCount": 0
   },
   "selfUri": ""
}
  */
QualityApi.prototype.putFormsFormId = function putFormsFormId(formId, body){
    var requestPath = '/api/v2/quality/forms/{formId}';
    var requestQuery = {};
    var requestBody;

    if(formId === undefined || formId === null){
      throw new Error('Missing required  parameter: formId');
    }
    requestPath = requestPath.replace('{formId}', formId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete an evaluation form.
  * @memberOf QualityApi
  * @instance
  * @param {string} formId - Form ID
  */
QualityApi.prototype.deleteFormsFormId = function deleteFormsFormId(formId){
    var requestPath = '/api/v2/quality/forms/{formId}';
    var requestQuery = {};
    var requestBody;

    if(formId === undefined || formId === null){
      throw new Error('Missing required  parameter: formId');
    }
    requestPath = requestPath.replace('{formId}', formId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Gets all the revisions for a specific evaluation.
  * @memberOf QualityApi
  * @instance
  * @param {string} formId - Form ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
QualityApi.prototype.getFormsFormIdVersions = function getFormsFormIdVersions(formId, pageSize, pageNumber){
    var requestPath = '/api/v2/quality/forms/{formId}/versions';
    var requestQuery = {};
    var requestBody;

    if(formId === undefined || formId === null){
      throw new Error('Missing required  parameter: formId');
    }
    requestPath = requestPath.replace('{formId}', formId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of keyword sets
  * @memberOf QualityApi
  * @instance
  * @param {integer} pageSize - The total page size requested
  * @param {integer} pageNumber - The page number requested
  * @param {string} sortBy - variable name requested to sort by
  * @param {array} expand - variable name requested by expand list
  * @param {string} nextPage - next page token
  * @param {string} previousPage - Previous page token
  * @param {string} name - the keyword set name - used for filtering results in searches.
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
QualityApi.prototype.getKeywordsets = function getKeywordsets(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name){
    var requestPath = '/api/v2/quality/keywordsets';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["expand"] = expand;
    requestQuery["nextPage"] = nextPage;
    requestQuery["previousPage"] = previousPage;
    requestQuery["name"] = name;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a Keyword Set
  * @memberOf QualityApi
  * @instance
  * @param {} body - keywordSet
  * @param {string} expand - queueId
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "queue": {
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "mediaSettings": {},
      "bullseye": {},
      "acwSettings": {},
      "skillEvaluationMethod": "",
      "queueFlow": {},
      "callingPartyName": "",
      "callingPartyNumber": "",
      "memberCount": 0
   },
   "queues": [],
   "language": "",
   "agents": [],
   "keywords": [],
   "participantPurposes": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "queue": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "mediaSettings": {},
      "bullseye": {},
      "acwSettings": {},
      "skillEvaluationMethod": "",
      "queueFlow": {},
      "callingPartyName": "",
      "callingPartyNumber": "",
      "memberCount": 0,
      "selfUri": ""
   },
   "queues": [],
   "language": "",
   "agents": [],
   "keywords": [],
   "participantPurposes": [],
   "selfUri": ""
}
  */
QualityApi.prototype.postKeywordsets = function postKeywordsets(body, expand){
    var requestPath = '/api/v2/quality/keywordsets';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["expand"] = expand;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete keyword sets
  * @description Bulk delete of keyword sets; this will only delete the keyword sets that match the ids specified in the query param.
  * @memberOf QualityApi
  * @instance
  * @param {string} ids - A comma-delimited list of valid KeywordSet ids
  */
QualityApi.prototype.deleteKeywordsets = function deleteKeywordsets(ids){
    var requestPath = '/api/v2/quality/keywordsets';
    var requestQuery = {};
    var requestBody;

    if(ids === undefined || ids === null){
      throw new Error('Missing required  parameter: ids');
    }
    requestQuery["ids"] = ids;
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a keywordSet by id.
  * @memberOf QualityApi
  * @instance
  * @param {string} keywordSetId - KeywordSet ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "queue": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "mediaSettings": {},
      "bullseye": {},
      "acwSettings": {},
      "skillEvaluationMethod": "",
      "queueFlow": {},
      "callingPartyName": "",
      "callingPartyNumber": "",
      "memberCount": 0,
      "selfUri": ""
   },
   "queues": [],
   "language": "",
   "agents": [],
   "keywords": [],
   "participantPurposes": [],
   "selfUri": ""
}
  */
QualityApi.prototype.getKeywordsetsKeywordsetId = function getKeywordsetsKeywordsetId(keywordSetId){
    var requestPath = '/api/v2/quality/keywordsets/{keywordSetId}';
    var requestQuery = {};
    var requestBody;

    if(keywordSetId === undefined || keywordSetId === null){
      throw new Error('Missing required  parameter: keywordSetId');
    }
    requestPath = requestPath.replace('{keywordSetId}', keywordSetId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a keywordSet to the specified keywordSet via PUT.
  * @memberOf QualityApi
  * @instance
  * @param {string} keywordSetId - KeywordSet ID
  * @param {} body - keywordSet
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "queue": {
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "mediaSettings": {},
      "bullseye": {},
      "acwSettings": {},
      "skillEvaluationMethod": "",
      "queueFlow": {},
      "callingPartyName": "",
      "callingPartyNumber": "",
      "memberCount": 0
   },
   "queues": [],
   "language": "",
   "agents": [],
   "keywords": [],
   "participantPurposes": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "queue": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "mediaSettings": {},
      "bullseye": {},
      "acwSettings": {},
      "skillEvaluationMethod": "",
      "queueFlow": {},
      "callingPartyName": "",
      "callingPartyNumber": "",
      "memberCount": 0,
      "selfUri": ""
   },
   "queues": [],
   "language": "",
   "agents": [],
   "keywords": [],
   "participantPurposes": [],
   "selfUri": ""
}
  */
QualityApi.prototype.putKeywordsetsKeywordsetId = function putKeywordsetsKeywordsetId(keywordSetId, body){
    var requestPath = '/api/v2/quality/keywordsets/{keywordSetId}';
    var requestQuery = {};
    var requestBody;

    if(keywordSetId === undefined || keywordSetId === null){
      throw new Error('Missing required  parameter: keywordSetId');
    }
    requestPath = requestPath.replace('{keywordSetId}', keywordSetId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a keywordSet by id.
  * @memberOf QualityApi
  * @instance
  * @param {string} keywordSetId - KeywordSet ID
  */
QualityApi.prototype.deleteKeywordsetsKeywordsetId = function deleteKeywordsetsKeywordsetId(keywordSetId){
    var requestPath = '/api/v2/quality/keywordsets/{keywordSetId}';
    var requestQuery = {};
    var requestBody;

    if(keywordSetId === undefined || keywordSetId === null){
      throw new Error('Missing required  parameter: keywordSetId');
    }
    requestPath = requestPath.replace('{keywordSetId}', keywordSetId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the published evaluation forms.
  * @memberOf QualityApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} name - Name
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
QualityApi.prototype.getPublishedforms = function getPublishedforms(pageSize, pageNumber, name){
    var requestPath = '/api/v2/quality/publishedforms';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["name"] = name;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Publish an evaluation form.
  * @memberOf QualityApi
  * @instance
  * @param {} body - Evaluation form
  * @example
  * Body Example:
  * {
   "name": "",
   "type": "",
   "modifiedDate": "",
   "published": true,
   "contextId": "",
   "questionGroups": [],
   "publishedVersions": {
      "pageSize": 0,
      "pageNumber": 0,
      "total": 0,
      "entities": [],
      "selfUri": "",
      "firstUri": "",
      "previousUri": "",
      "nextUri": "",
      "lastUri": "",
      "pageCount": 0
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "modifiedDate": "",
   "published": true,
   "contextId": "",
   "questionGroups": [],
   "publishedVersions": {
      "pageSize": 0,
      "pageNumber": 0,
      "total": 0,
      "entities": [],
      "selfUri": "",
      "firstUri": "",
      "previousUri": "",
      "nextUri": "",
      "lastUri": "",
      "pageCount": 0
   },
   "selfUri": ""
}
  */
QualityApi.prototype.postPublishedforms = function postPublishedforms(body){
    var requestPath = '/api/v2/quality/publishedforms';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the published evaluation forms.
  * @memberOf QualityApi
  * @instance
  * @param {string} formId - Form ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "modifiedDate": "",
   "published": true,
   "contextId": "",
   "questionGroups": [],
   "publishedVersions": {
      "pageSize": 0,
      "pageNumber": 0,
      "total": 0,
      "entities": [],
      "selfUri": "",
      "firstUri": "",
      "previousUri": "",
      "nextUri": "",
      "lastUri": "",
      "pageCount": 0
   },
   "selfUri": ""
}
  */
QualityApi.prototype.getPublishedformsFormId = function getPublishedformsFormId(formId){
    var requestPath = '/api/v2/quality/publishedforms/{formId}';
    var requestQuery = {};
    var requestBody;

    if(formId === undefined || formId === null){
      throw new Error('Missing required  parameter: formId');
    }
    requestPath = requestPath.replace('{formId}', formId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Retrieve the spotability statistic
  * @memberOf QualityApi
  * @instance
  * @param {} body - Keyword Set
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "queue": {
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "mediaSettings": {},
      "bullseye": {},
      "acwSettings": {},
      "skillEvaluationMethod": "",
      "queueFlow": {},
      "callingPartyName": "",
      "callingPartyNumber": "",
      "memberCount": 0
   },
   "queues": [],
   "language": "",
   "agents": [],
   "keywords": [],
   "participantPurposes": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "queue": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "mediaSettings": {},
      "bullseye": {},
      "acwSettings": {},
      "skillEvaluationMethod": "",
      "queueFlow": {},
      "callingPartyName": "",
      "callingPartyNumber": "",
      "memberCount": 0,
      "selfUri": ""
   },
   "queues": [],
   "language": "",
   "agents": [],
   "keywords": [],
   "participantPurposes": [],
   "selfUri": ""
}
  */
QualityApi.prototype.postSpotability = function postSpotability(body){
    var requestPath = '/api/v2/quality/spotability';
    var requestQuery = {};
    var requestBody;

    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};


module.exports = QualityApi;

},{}],22:[function(require,module,exports){
/**
* @class RecordingApi
* @example
* var api = new purecloud.platform.RecordingApi(pureCloudSession);
*/
function RecordingApi(session) {
    if(!(this instanceof RecordingApi)) {
        return new RecordingApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('RecordingApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get all of a Conversation's Recordings.
  * @memberOf RecordingApi
  * @instance
  * @param {string} conversationId - Conversation ID
  * @param {integer} maxWaitMs - The maximum number of milliseconds to wait for the recording to be ready.
  Any integer greater than or equal to 0.,
  * @param {string} formatId - The desired media format
  WAV,
  WEBM,
  WAV_ULAW,
  OGG_VORBIS,
  OGG_OPUS,
  NONE,
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "conversationId": "",
  "path": "",
  "startTime": "",
  "endTime": "",
  "media": "",
  "annotations": [],
  "transcript": [],
  "emailTranscript": [],
  "fileState": "",
  "restoreExpirationTime": "",
  "mediaUris": {},
  "estimatedTranscodeTimeMs": 0,
  "actualTranscodeTimeMs": 0,
  "archiveDate": "",
  "archiveMedium": "",
  "deleteDate": "",
  "maxAllowedRestorationsForOrg": 0,
  "remainingRestorationsAllowedForOrg": 0,
  "sessionId": "",
  "selfUri": ""
 }
]
  */
RecordingApi.prototype.getConversationIdRecordings = function getConversationIdRecordings(conversationId, maxWaitMs, formatId){
    var requestPath = '/api/v2/conversations/{conversationId}/recordings';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    requestQuery["maxWaitMs"] = maxWaitMs;
    requestQuery["formatId"] = formatId;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Gets a specific recording.
  * @memberOf RecordingApi
  * @instance
  * @param {string} conversationId - Conversation ID
  * @param {string} recordingId - Recording ID
  * @param {string} formatId - The desired media format.
  WAV,
  WEBM,
  WAV_ULAW,
  OGG_VORBIS,
  OGG_OPUS,
  NONE,
  * @param {boolean} download - requesting a download format of the recording
  true,
  false,
  * @param {string} fileName - the name of the downloaded fileName
  */
RecordingApi.prototype.getConversationIdRecordingsRecordingId = function getConversationIdRecordingsRecordingId(conversationId, recordingId, formatId, download, fileName){
    var requestPath = '/api/v2/conversations/{conversationId}/recordings/{recordingId}';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(recordingId === undefined || recordingId === null){
      throw new Error('Missing required  parameter: recordingId');
    }
    requestPath = requestPath.replace('{recordingId}', recordingId);
    requestQuery["formatId"] = formatId;
    requestQuery["download"] = download;
    requestQuery["fileName"] = fileName;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Updates the retention records on a recording.
  * @description Currently supports updating and removing both archive and delete dates for eligible recordings. A request to change the archival date of an archived recording will result in a restoration of the recording until the new date set. Use of the query parameter 'restoreDays' is deprecated and will be removed in the next major version release. If 'restoreDays' is provided, no attempt at updating other retention data will be made. To migrate to the new usage, issuing a request with restoreDays=10 would instead set the archiveDate's time stamp in the PUT body to 10 days in the future.
  * @memberOf RecordingApi
  * @instance
  * @param {string} conversationId - Conversation ID
  * @param {string} recordingId - Recording ID
  * @param {} body - recording
  * @example
  * Body Example:
  * {
   "name": "",
   "conversationId": "",
   "path": "",
   "startTime": "",
   "endTime": "",
   "media": "",
   "annotations": [],
   "transcript": [],
   "emailTranscript": [],
   "fileState": "",
   "restoreExpirationTime": "",
   "mediaUris": {},
   "estimatedTranscodeTimeMs": 0,
   "actualTranscodeTimeMs": 0,
   "archiveDate": "",
   "archiveMedium": "",
   "deleteDate": "",
   "maxAllowedRestorationsForOrg": 0,
   "remainingRestorationsAllowedForOrg": 0,
   "sessionId": ""
}
  */
RecordingApi.prototype.putConversationIdRecordingsRecordingId = function putConversationIdRecordingsRecordingId(conversationId, recordingId, body){
    var requestPath = '/api/v2/conversations/{conversationId}/recordings/{recordingId}';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(recordingId === undefined || recordingId === null){
      throw new Error('Missing required  parameter: recordingId');
    }
    requestPath = requestPath.replace('{recordingId}', recordingId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get annotations for recording
  * @memberOf RecordingApi
  * @instance
  * @param {string} conversationId - Conversation ID
  * @param {string} recordingId - Recording ID
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "type": "",
  "location": 0,
  "durationMs": 0,
  "user": {
   "id": "",
   "name": "",
   "chat": {},
   "department": "",
   "email": "",
   "primaryContactInfo": [],
   "addresses": [],
   "state": "",
   "title": "",
   "username": "",
   "images": [],
   "version": 0,
   "routingStatus": {},
   "presence": {},
   "conversationSummary": {},
   "outOfOffice": {},
   "geolocation": {},
   "station": {},
   "authorization": {},
   "profileSkills": [],
   "selfUri": ""
  },
  "description": "",
  "selfUri": ""
 }
]
  */
RecordingApi.prototype.getConversationIdRecordingsRecordingIdAnnotations = function getConversationIdRecordingsRecordingIdAnnotations(conversationId, recordingId){
    var requestPath = '/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(recordingId === undefined || recordingId === null){
      throw new Error('Missing required  parameter: recordingId');
    }
    requestPath = requestPath.replace('{recordingId}', recordingId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create annotation
  * @memberOf RecordingApi
  * @instance
  * @param {string} conversationId - Conversation ID
  * @param {string} recordingId - Recording ID
  * @param {} body - annotation
  * @example
  * Body Example:
  * {
   "name": "",
   "type": "",
   "location": 0,
   "durationMs": 0,
   "user": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "description": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "location": 0,
   "durationMs": 0,
   "user": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "description": "",
   "selfUri": ""
}
  */
RecordingApi.prototype.postConversationIdRecordingsRecordingIdAnnotations = function postConversationIdRecordingsRecordingIdAnnotations(conversationId, recordingId, body){
    var requestPath = '/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(recordingId === undefined || recordingId === null){
      throw new Error('Missing required  parameter: recordingId');
    }
    requestPath = requestPath.replace('{recordingId}', recordingId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get annotation
  * @memberOf RecordingApi
  * @instance
  * @param {string} conversationId - Conversation ID
  * @param {string} recordingId - Recording ID
  * @param {string} annotationId - Annotation ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "location": 0,
   "durationMs": 0,
   "user": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "description": "",
   "selfUri": ""
}
  */
RecordingApi.prototype.getConversationIdRecordingsRecordingIdAnnotationsAnnotationId = function getConversationIdRecordingsRecordingIdAnnotationsAnnotationId(conversationId, recordingId, annotationId){
    var requestPath = '/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(recordingId === undefined || recordingId === null){
      throw new Error('Missing required  parameter: recordingId');
    }
    requestPath = requestPath.replace('{recordingId}', recordingId);
    if(annotationId === undefined || annotationId === null){
      throw new Error('Missing required  parameter: annotationId');
    }
    requestPath = requestPath.replace('{annotationId}', annotationId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update annotation
  * @memberOf RecordingApi
  * @instance
  * @param {string} conversationId - Conversation ID
  * @param {string} recordingId - Recording ID
  * @param {string} annotationId - Annotation ID
  * @param {} body - annotation
  * @example
  * Body Example:
  * {
   "name": "",
   "type": "",
   "location": 0,
   "durationMs": 0,
   "user": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "description": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "location": 0,
   "durationMs": 0,
   "user": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "description": "",
   "selfUri": ""
}
  */
RecordingApi.prototype.putConversationIdRecordingsRecordingIdAnnotationsAnnotationId = function putConversationIdRecordingsRecordingIdAnnotationsAnnotationId(conversationId, recordingId, annotationId, body){
    var requestPath = '/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(recordingId === undefined || recordingId === null){
      throw new Error('Missing required  parameter: recordingId');
    }
    requestPath = requestPath.replace('{recordingId}', recordingId);
    if(annotationId === undefined || annotationId === null){
      throw new Error('Missing required  parameter: annotationId');
    }
    requestPath = requestPath.replace('{annotationId}', annotationId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete annotation
  * @memberOf RecordingApi
  * @instance
  * @param {string} conversationId - Conversation ID
  * @param {string} recordingId - Recording ID
  * @param {string} annotationId - Annotation ID
  */
RecordingApi.prototype.deleteConversationIdRecordingsRecordingIdAnnotationsAnnotationId = function deleteConversationIdRecordingsRecordingIdAnnotationsAnnotationId(conversationId, recordingId, annotationId){
    var requestPath = '/api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}';
    var requestQuery = {};
    var requestBody;

    if(conversationId === undefined || conversationId === null){
      throw new Error('Missing required  parameter: conversationId');
    }
    requestPath = requestPath.replace('{conversationId}', conversationId);
    if(recordingId === undefined || recordingId === null){
      throw new Error('Missing required  parameter: recordingId');
    }
    requestPath = requestPath.replace('{recordingId}', recordingId);
    if(annotationId === undefined || annotationId === null){
      throw new Error('Missing required  parameter: annotationId');
    }
    requestPath = requestPath.replace('{annotationId}', annotationId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Gets all orphan recordings
  * @memberOf RecordingApi
  * @instance
  * @param {integer} pageSize - The total page size requested
  * @param {integer} pageNumber - The page number requested
  * @param {string} sortBy - variable name requested to sort by
  * @param {array} expand - variable name requested by expand list
  * @param {string} nextPage - next page token
  * @param {string} previousPage - Previous page token
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RecordingApi.prototype.getOrphanrecordings = function getOrphanrecordings(pageSize, pageNumber, sortBy, expand, nextPage, previousPage){
    var requestPath = '/api/v2/orphanrecordings';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["expand"] = expand;
    requestQuery["nextPage"] = nextPage;
    requestQuery["previousPage"] = previousPage;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Gets a single orphan recording
  * @memberOf RecordingApi
  * @instance
  * @param {string} orphanId - Orphan ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "createdTime": "",
   "recoveredTime": "",
   "providerType": "",
   "mediaSizeBytes": 0,
   "mediaType": "",
   "fileState": "",
   "providerEndpoint": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "count": 0,
      "properties": {},
      "schema": {},
      "enabled": true,
      "site": {},
      "dids": [],
      "selfUri": ""
   },
   "recording": {
      "id": "",
      "name": "",
      "conversationId": "",
      "path": "",
      "startTime": "",
      "endTime": "",
      "media": "",
      "annotations": [],
      "transcript": [],
      "emailTranscript": [],
      "fileState": "",
      "restoreExpirationTime": "",
      "mediaUris": {},
      "estimatedTranscodeTimeMs": 0,
      "actualTranscodeTimeMs": 0,
      "archiveDate": "",
      "archiveMedium": "",
      "deleteDate": "",
      "maxAllowedRestorationsForOrg": 0,
      "remainingRestorationsAllowedForOrg": 0,
      "sessionId": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
RecordingApi.prototype.getOrphanId = function getOrphanId(orphanId){
    var requestPath = '/api/v2/orphanrecordings/{orphanId}';
    var requestQuery = {};
    var requestBody;

    if(orphanId === undefined || orphanId === null){
      throw new Error('Missing required  parameter: orphanId');
    }
    requestPath = requestPath.replace('{orphanId}', orphanId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary  deletes a single orphan recording
  * @memberOf RecordingApi
  * @instance
  * @param {string} orphanId - Orphan ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "createdTime": "",
   "recoveredTime": "",
   "providerType": "",
   "mediaSizeBytes": 0,
   "mediaType": "",
   "fileState": "",
   "providerEndpoint": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "count": 0,
      "properties": {},
      "schema": {},
      "enabled": true,
      "site": {},
      "dids": [],
      "selfUri": ""
   },
   "recording": {
      "id": "",
      "name": "",
      "conversationId": "",
      "path": "",
      "startTime": "",
      "endTime": "",
      "media": "",
      "annotations": [],
      "transcript": [],
      "emailTranscript": [],
      "fileState": "",
      "restoreExpirationTime": "",
      "mediaUris": {},
      "estimatedTranscodeTimeMs": 0,
      "actualTranscodeTimeMs": 0,
      "archiveDate": "",
      "archiveMedium": "",
      "deleteDate": "",
      "maxAllowedRestorationsForOrg": 0,
      "remainingRestorationsAllowedForOrg": 0,
      "sessionId": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
RecordingApi.prototype.deleteOrphanId = function deleteOrphanId(orphanId){
    var requestPath = '/api/v2/orphanrecordings/{orphanId}';
    var requestQuery = {};
    var requestBody;

    if(orphanId === undefined || orphanId === null){
      throw new Error('Missing required  parameter: orphanId');
    }
    requestPath = requestPath.replace('{orphanId}', orphanId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Gets media retention policy list with query options to filter on name and enabled.
  * @description for a less verbose response, add summary=true to this endpoint
  * @memberOf RecordingApi
  * @instance
  * @param {integer} pageSize - The total page size requested
  * @param {integer} pageNumber - The page number requested
  * @param {string} sortBy - variable name requested to sort by
  * @param {array} expand - variable name requested by expand list
  * @param {string} nextPage - next page token
  * @param {string} previousPage - Previous page token
  * @param {string} name - the policy name - used for filtering results in searches.
  * @param {boolean} enabled - checks to see if policy is enabled - use enabled = true or enabled = false
  * @param {boolean} summary - provides a less verbose response of policy lists.
  * @param {boolean} hasErrors - provides a way to fetch all policies with errors or policies that do not have errors
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RecordingApi.prototype.getMediaretentionpolicies = function getMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors){
    var requestPath = '/api/v2/recording/mediaretentionpolicies';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["expand"] = expand;
    requestQuery["nextPage"] = nextPage;
    requestQuery["previousPage"] = previousPage;
    requestQuery["name"] = name;
    requestQuery["enabled"] = enabled;
    requestQuery["summary"] = summary;
    requestQuery["hasErrors"] = hasErrors;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create media retention policy
  * @memberOf RecordingApi
  * @instance
  * @param {} body - Policy
  * @example
  * Body Example:
  * {
   "name": "",
   "modifiedDate": "",
   "createdDate": "",
   "order": 0,
   "description": "",
   "enabled": true,
   "mediaPolicies": {
      "callPolicy": {},
      "chatPolicy": {},
      "emailPolicy": {}
   },
   "conditions": {
      "forUsers": [],
      "directions": [],
      "dateRanges": [],
      "mediaTypes": [],
      "forQueues": [],
      "duration": {},
      "wrapupCodes": [],
      "timeAllowed": {}
   },
   "actions": {
      "retainRecording": true,
      "deleteRecording": true,
      "alwaysDelete": true,
      "assignEvaluations": [],
      "assignMeteredEvaluations": [],
      "assignCalibrations": [],
      "retentionDuration": {},
      "initiateScreenRecording": {}
   },
   "policyErrors": {
      "policyErrorMessages": []
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "modifiedDate": "",
   "createdDate": "",
   "order": 0,
   "description": "",
   "enabled": true,
   "mediaPolicies": {
      "callPolicy": {},
      "chatPolicy": {},
      "emailPolicy": {}
   },
   "conditions": {
      "forUsers": [],
      "directions": [],
      "dateRanges": [],
      "mediaTypes": [],
      "forQueues": [],
      "duration": {},
      "wrapupCodes": [],
      "timeAllowed": {}
   },
   "actions": {
      "retainRecording": true,
      "deleteRecording": true,
      "alwaysDelete": true,
      "assignEvaluations": [],
      "assignMeteredEvaluations": [],
      "assignCalibrations": [],
      "retentionDuration": {},
      "initiateScreenRecording": {}
   },
   "policyErrors": {
      "policyErrorMessages": []
   },
   "selfUri": ""
}
  */
RecordingApi.prototype.postMediaretentionpolicies = function postMediaretentionpolicies(body){
    var requestPath = '/api/v2/recording/mediaretentionpolicies';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete media retention policies
  * @description Bulk delete of media retention policies, this will only delete the polices that match the ids specified in the query param.
  * @memberOf RecordingApi
  * @instance
  * @param {string} ids - Bulk delete of media retention policies, this will only delete the polices that match the ids specified in the query param.
  */
RecordingApi.prototype.deleteMediaretentionpolicies = function deleteMediaretentionpolicies(ids){
    var requestPath = '/api/v2/recording/mediaretentionpolicies';
    var requestQuery = {};
    var requestBody;

    if(ids === undefined || ids === null){
      throw new Error('Missing required  parameter: ids');
    }
    requestQuery["ids"] = ids;
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a media retention policy
  * @memberOf RecordingApi
  * @instance
  * @param {string} policyId - Policy ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "modifiedDate": "",
   "createdDate": "",
   "order": 0,
   "description": "",
   "enabled": true,
   "mediaPolicies": {
      "callPolicy": {},
      "chatPolicy": {},
      "emailPolicy": {}
   },
   "conditions": {
      "forUsers": [],
      "directions": [],
      "dateRanges": [],
      "mediaTypes": [],
      "forQueues": [],
      "duration": {},
      "wrapupCodes": [],
      "timeAllowed": {}
   },
   "actions": {
      "retainRecording": true,
      "deleteRecording": true,
      "alwaysDelete": true,
      "assignEvaluations": [],
      "assignMeteredEvaluations": [],
      "assignCalibrations": [],
      "retentionDuration": {},
      "initiateScreenRecording": {}
   },
   "policyErrors": {
      "policyErrorMessages": []
   },
   "selfUri": ""
}
  */
RecordingApi.prototype.getMediaretentionpoliciesPolicyId = function getMediaretentionpoliciesPolicyId(policyId){
    var requestPath = '/api/v2/recording/mediaretentionpolicies/{policyId}';
    var requestQuery = {};
    var requestBody;

    if(policyId === undefined || policyId === null){
      throw new Error('Missing required  parameter: policyId');
    }
    requestPath = requestPath.replace('{policyId}', policyId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a media retention policy
  * @memberOf RecordingApi
  * @instance
  * @param {string} policyId - Policy ID
  * @param {} body - Policy
  * @example
  * Body Example:
  * {
   "name": "",
   "modifiedDate": "",
   "createdDate": "",
   "order": 0,
   "description": "",
   "enabled": true,
   "mediaPolicies": {
      "callPolicy": {},
      "chatPolicy": {},
      "emailPolicy": {}
   },
   "conditions": {
      "forUsers": [],
      "directions": [],
      "dateRanges": [],
      "mediaTypes": [],
      "forQueues": [],
      "duration": {},
      "wrapupCodes": [],
      "timeAllowed": {}
   },
   "actions": {
      "retainRecording": true,
      "deleteRecording": true,
      "alwaysDelete": true,
      "assignEvaluations": [],
      "assignMeteredEvaluations": [],
      "assignCalibrations": [],
      "retentionDuration": {},
      "initiateScreenRecording": {}
   },
   "policyErrors": {
      "policyErrorMessages": []
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "modifiedDate": "",
   "createdDate": "",
   "order": 0,
   "description": "",
   "enabled": true,
   "mediaPolicies": {
      "callPolicy": {},
      "chatPolicy": {},
      "emailPolicy": {}
   },
   "conditions": {
      "forUsers": [],
      "directions": [],
      "dateRanges": [],
      "mediaTypes": [],
      "forQueues": [],
      "duration": {},
      "wrapupCodes": [],
      "timeAllowed": {}
   },
   "actions": {
      "retainRecording": true,
      "deleteRecording": true,
      "alwaysDelete": true,
      "assignEvaluations": [],
      "assignMeteredEvaluations": [],
      "assignCalibrations": [],
      "retentionDuration": {},
      "initiateScreenRecording": {}
   },
   "policyErrors": {
      "policyErrorMessages": []
   },
   "selfUri": ""
}
  */
RecordingApi.prototype.putMediaretentionpoliciesPolicyId = function putMediaretentionpoliciesPolicyId(policyId, body){
    var requestPath = '/api/v2/recording/mediaretentionpolicies/{policyId}';
    var requestQuery = {};
    var requestBody;

    if(policyId === undefined || policyId === null){
      throw new Error('Missing required  parameter: policyId');
    }
    requestPath = requestPath.replace('{policyId}', policyId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a media retention policy
  * @memberOf RecordingApi
  * @instance
  * @param {string} policyId - Policy ID
  */
RecordingApi.prototype.deleteMediaretentionpoliciesPolicyId = function deleteMediaretentionpoliciesPolicyId(policyId){
    var requestPath = '/api/v2/recording/mediaretentionpolicies/{policyId}';
    var requestQuery = {};
    var requestBody;

    if(policyId === undefined || policyId === null){
      throw new Error('Missing required  parameter: policyId');
    }
    requestPath = requestPath.replace('{policyId}', policyId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Patch a media retention policy
  * @memberOf RecordingApi
  * @instance
  * @param {string} policyId - Policy ID
  * @param {} body - Policy
  * @example
  * Body Example:
  * {
   "name": "",
   "modifiedDate": "",
   "createdDate": "",
   "order": 0,
   "description": "",
   "enabled": true,
   "mediaPolicies": {
      "callPolicy": {},
      "chatPolicy": {},
      "emailPolicy": {}
   },
   "conditions": {
      "forUsers": [],
      "directions": [],
      "dateRanges": [],
      "mediaTypes": [],
      "forQueues": [],
      "duration": {},
      "wrapupCodes": [],
      "timeAllowed": {}
   },
   "actions": {
      "retainRecording": true,
      "deleteRecording": true,
      "alwaysDelete": true,
      "assignEvaluations": [],
      "assignMeteredEvaluations": [],
      "assignCalibrations": [],
      "retentionDuration": {},
      "initiateScreenRecording": {}
   },
   "policyErrors": {
      "policyErrorMessages": []
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "modifiedDate": "",
   "createdDate": "",
   "order": 0,
   "description": "",
   "enabled": true,
   "mediaPolicies": {
      "callPolicy": {},
      "chatPolicy": {},
      "emailPolicy": {}
   },
   "conditions": {
      "forUsers": [],
      "directions": [],
      "dateRanges": [],
      "mediaTypes": [],
      "forQueues": [],
      "duration": {},
      "wrapupCodes": [],
      "timeAllowed": {}
   },
   "actions": {
      "retainRecording": true,
      "deleteRecording": true,
      "alwaysDelete": true,
      "assignEvaluations": [],
      "assignMeteredEvaluations": [],
      "assignCalibrations": [],
      "retentionDuration": {},
      "initiateScreenRecording": {}
   },
   "policyErrors": {
      "policyErrorMessages": []
   },
   "selfUri": ""
}
  */
RecordingApi.prototype.patchMediaretentionpoliciesPolicyId = function patchMediaretentionpoliciesPolicyId(policyId, body){
    var requestPath = '/api/v2/recording/mediaretentionpolicies/{policyId}';
    var requestQuery = {};
    var requestBody;

    if(policyId === undefined || policyId === null){
      throw new Error('Missing required  parameter: policyId');
    }
    requestPath = requestPath.replace('{policyId}', policyId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the Recording Settings for the Organization
  * @memberOf RecordingApi
  * @instance
  * @param {boolean} createDefault - If no settings are found, a new one is created with default values
  * @example
  * 200 Response Example:
  * {
   "maxSimultaneousStreams": 0
}
  */
RecordingApi.prototype.getSettings = function getSettings(createDefault){
    var requestPath = '/api/v2/recording/settings';
    var requestQuery = {};
    var requestBody;

    requestQuery["createDefault"] = createDefault;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update the Recording Settings for the Organization
  * @memberOf RecordingApi
  * @instance
  * @param {} body - Recording settings
  * @example
  * Body Example:
  * {
   "maxSimultaneousStreams": 0
}
  * @example
  * 200 Response Example:
  * {
   "maxSimultaneousStreams": 0
}
  */
RecordingApi.prototype.putSettings = function putSettings(body){
    var requestPath = '/api/v2/recording/settings';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Retrieves a paged listing of screen recording sessions
  * @memberOf RecordingApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "pageCount": 0
}
  */
RecordingApi.prototype.getsScreensessions = function getsScreensessions(pageSize, pageNumber){
    var requestPath = '/api/v2/recordings/screensessions';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};


module.exports = RecordingApi;

},{}],23:[function(require,module,exports){
/**
* @class ResponseManagementApi
* @example
* var api = new purecloud.platform.ResponseManagementApi(pureCloudSession);
*/
function ResponseManagementApi(session) {
    if(!(this instanceof ResponseManagementApi)) {
        return new ResponseManagementApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('ResponseManagementApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Gets a list of existing response libraries.
  * @memberOf ResponseManagementApi
  * @instance
  * @param {integer} pageNumber - Page number
  * @param {integer} pageSize - Page size
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ResponseManagementApi.prototype.getLibraries = function getLibraries(pageNumber, pageSize){
    var requestPath = '/api/v2/responsemanagement/libraries';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageNumber"] = pageNumber;
    requestQuery["pageSize"] = pageSize;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a response library.
  * @memberOf ResponseManagementApi
  * @instance
  * @param {} body - Library
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "createdBy": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "dateCreated": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "version": 0,
   "createdBy": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "dateCreated": "",
   "selfUri": ""
}
  */
ResponseManagementApi.prototype.postLibraries = function postLibraries(body){
    var requestPath = '/api/v2/responsemanagement/libraries';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get details about an existing response library.
  * @memberOf ResponseManagementApi
  * @instance
  * @param {string} libraryId - Library ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "version": 0,
   "createdBy": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "dateCreated": "",
   "selfUri": ""
}
  */
ResponseManagementApi.prototype.getLibrariesLibraryId = function getLibrariesLibraryId(libraryId){
    var requestPath = '/api/v2/responsemanagement/libraries/{libraryId}';
    var requestQuery = {};
    var requestBody;

    if(libraryId === undefined || libraryId === null){
      throw new Error('Missing required  parameter: libraryId');
    }
    requestPath = requestPath.replace('{libraryId}', libraryId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an existing response library.
  * @description Fields that can be updated: name. The most recent version is required for updates.
  * @memberOf ResponseManagementApi
  * @instance
  * @param {string} libraryId - Library ID
  * @param {} body - Library
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "createdBy": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "dateCreated": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "version": 0,
   "createdBy": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "dateCreated": "",
   "selfUri": ""
}
  */
ResponseManagementApi.prototype.putLibrariesLibraryId = function putLibrariesLibraryId(libraryId, body){
    var requestPath = '/api/v2/responsemanagement/libraries/{libraryId}';
    var requestQuery = {};
    var requestBody;

    if(libraryId === undefined || libraryId === null){
      throw new Error('Missing required  parameter: libraryId');
    }
    requestPath = requestPath.replace('{libraryId}', libraryId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete an existing response library.
  * @description This will remove any responses associated with the library.
  * @memberOf ResponseManagementApi
  * @instance
  * @param {string} libraryId - Library ID
  */
ResponseManagementApi.prototype.deleteLibrariesLibraryId = function deleteLibrariesLibraryId(libraryId){
    var requestPath = '/api/v2/responsemanagement/libraries/{libraryId}';
    var requestQuery = {};
    var requestBody;

    if(libraryId === undefined || libraryId === null){
      throw new Error('Missing required  parameter: libraryId');
    }
    requestPath = requestPath.replace('{libraryId}', libraryId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Gets a list of existing responses.
  * @memberOf ResponseManagementApi
  * @instance
  * @param {string} libraryId - Library ID
  * @param {integer} pageNumber - Page number
  * @param {integer} pageSize - Page size
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
ResponseManagementApi.prototype.getResponses = function getResponses(libraryId, pageNumber, pageSize){
    var requestPath = '/api/v2/responsemanagement/responses';
    var requestQuery = {};
    var requestBody;

    if(libraryId === undefined || libraryId === null){
      throw new Error('Missing required  parameter: libraryId');
    }
    requestQuery["libraryId"] = libraryId;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["pageSize"] = pageSize;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a response.
  * @memberOf ResponseManagementApi
  * @instance
  * @param {} body - Response
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "libraries": [],
   "texts": [],
   "createdBy": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "dateCreated": "",
   "interactionType": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "version": 0,
   "libraries": [],
   "texts": [],
   "createdBy": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "dateCreated": "",
   "interactionType": "",
   "selfUri": ""
}
  */
ResponseManagementApi.prototype.postResponses = function postResponses(body){
    var requestPath = '/api/v2/responsemanagement/responses';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query responses
  * @memberOf ResponseManagementApi
  * @instance
  * @param {} body - Response
  * @example
  * Body Example:
  * {
   "queryPhrase": "",
   "pageSize": 0,
   "filters": []
}
  * @example
  * 200 Response Example:
  * {
   "results": {
      "pageSize": 0,
      "pageNumber": 0,
      "total": 0,
      "entities": [],
      "selfUri": "",
      "firstUri": "",
      "previousUri": "",
      "nextUri": "",
      "lastUri": "",
      "pageCount": 0
   }
}
  */
ResponseManagementApi.prototype.postResponsesQuery = function postResponsesQuery(body){
    var requestPath = '/api/v2/responsemanagement/responses/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get details about an existing response.
  * @memberOf ResponseManagementApi
  * @instance
  * @param {string} responseId - Response ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "version": 0,
   "libraries": [],
   "texts": [],
   "createdBy": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "dateCreated": "",
   "interactionType": "",
   "selfUri": ""
}
  */
ResponseManagementApi.prototype.getResponsesResponseId = function getResponsesResponseId(responseId){
    var requestPath = '/api/v2/responsemanagement/responses/{responseId}';
    var requestQuery = {};
    var requestBody;

    if(responseId === undefined || responseId === null){
      throw new Error('Missing required  parameter: responseId');
    }
    requestPath = requestPath.replace('{responseId}', responseId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an existing response.
  * @description Fields that can be updated: name, libraries, and texts. The most recent version is required for updates.
  * @memberOf ResponseManagementApi
  * @instance
  * @param {string} responseId - Response ID
  * @param {} body - Response
  * @example
  * Body Example:
  * {
   "name": "",
   "version": 0,
   "libraries": [],
   "texts": [],
   "createdBy": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "dateCreated": "",
   "interactionType": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "version": 0,
   "libraries": [],
   "texts": [],
   "createdBy": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "dateCreated": "",
   "interactionType": "",
   "selfUri": ""
}
  */
ResponseManagementApi.prototype.putResponsesResponseId = function putResponsesResponseId(responseId, body){
    var requestPath = '/api/v2/responsemanagement/responses/{responseId}';
    var requestQuery = {};
    var requestBody;

    if(responseId === undefined || responseId === null){
      throw new Error('Missing required  parameter: responseId');
    }
    requestPath = requestPath.replace('{responseId}', responseId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete an existing response.
  * @description This will remove the response from any libraries associated with it.
  * @memberOf ResponseManagementApi
  * @instance
  * @param {string} responseId - Response ID
  */
ResponseManagementApi.prototype.deleteResponsesResponseId = function deleteResponsesResponseId(responseId){
    var requestPath = '/api/v2/responsemanagement/responses/{responseId}';
    var requestQuery = {};
    var requestBody;

    if(responseId === undefined || responseId === null){
      throw new Error('Missing required  parameter: responseId');
    }
    requestPath = requestPath.replace('{responseId}', responseId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};


module.exports = ResponseManagementApi;

},{}],24:[function(require,module,exports){
/**
* @class RoutingApi
* @example
* var api = new purecloud.platform.RoutingApi(pureCloudSession);
*/
function RoutingApi(session) {
    if(!(this instanceof RoutingApi)) {
        return new RoutingApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('RoutingApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Query for queue observations
  * @memberOf RoutingApi
  * @instance
  * @param {} body - query
  * @example
  * Body Example:
  * {
   "filter": {
      "type": "",
      "clauses": [],
      "predicates": []
   },
   "metrics": []
}
  * @example
  * 200 Response Example:
  * {
   "systemToOrganizationMappings": {},
   "results": []
}
  */
RoutingApi.prototype.postQueuesObservationsQuery = function postQueuesObservationsQuery(body){
    var requestPath = '/api/v2/analytics/queues/observations/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get domains
  * @memberOf RoutingApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RoutingApi.prototype.getEmailDomains = function getEmailDomains(){
    var requestPath = '/api/v2/routing/email/domains';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a domain
  * @memberOf RoutingApi
  * @instance
  * @param {} body - Domain
  * @example
  * Body Example:
  * {
   "name": "",
   "mxRecordStatus": "",
   "subDomain": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "mxRecordStatus": "",
   "subDomain": true,
   "selfUri": ""
}
  */
RoutingApi.prototype.postEmailDomains = function postEmailDomains(body){
    var requestPath = '/api/v2/routing/email/domains';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a domain
  * @memberOf RoutingApi
  * @instance
  * @param {string} domainId - domain ID
  */
RoutingApi.prototype.deleteEmailDomainsDomainId = function deleteEmailDomainsDomainId(domainId){
    var requestPath = '/api/v2/routing/email/domains/{domainId}';
    var requestQuery = {};
    var requestBody;

    if(domainId === undefined || domainId === null){
      throw new Error('Missing required  parameter: domainId');
    }
    requestPath = requestPath.replace('{domainId}', domainId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get routes
  * @memberOf RoutingApi
  * @instance
  * @param {string} domainName - email domain
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RoutingApi.prototype.getEmailDomainsDomainnameRoutes = function getEmailDomainsDomainnameRoutes(domainName){
    var requestPath = '/api/v2/routing/email/domains/{domainName}/routes';
    var requestQuery = {};
    var requestBody;

    if(domainName === undefined || domainName === null){
      throw new Error('Missing required  parameter: domainName');
    }
    requestPath = requestPath.replace('{domainName}', domainName);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a route
  * @memberOf RoutingApi
  * @instance
  * @param {string} domainName - email domain
  * @param {} body - Route
  * @example
  * Body Example:
  * {
   "name": "",
   "pattern": "",
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "priority": 0,
   "skills": [],
   "language": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "fromName": "",
   "fromEmail": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "pattern": "",
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "priority": 0,
   "skills": [],
   "language": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "fromName": "",
   "fromEmail": "",
   "selfUri": ""
}
  */
RoutingApi.prototype.postEmailDomainsDomainnameRoutes = function postEmailDomainsDomainnameRoutes(domainName, body){
    var requestPath = '/api/v2/routing/email/domains/{domainName}/routes';
    var requestQuery = {};
    var requestBody;

    if(domainName === undefined || domainName === null){
      throw new Error('Missing required  parameter: domainName');
    }
    requestPath = requestPath.replace('{domainName}', domainName);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a route
  * @memberOf RoutingApi
  * @instance
  * @param {string} domainName - email domain
  * @param {string} routeId - route ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "pattern": "",
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "priority": 0,
   "skills": [],
   "language": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "fromName": "",
   "fromEmail": "",
   "selfUri": ""
}
  */
RoutingApi.prototype.getEmailDomainsDomainnameRoutesRouteId = function getEmailDomainsDomainnameRoutesRouteId(domainName, routeId){
    var requestPath = '/api/v2/routing/email/domains/{domainName}/routes/{routeId}';
    var requestQuery = {};
    var requestBody;

    if(domainName === undefined || domainName === null){
      throw new Error('Missing required  parameter: domainName');
    }
    requestPath = requestPath.replace('{domainName}', domainName);
    if(routeId === undefined || routeId === null){
      throw new Error('Missing required  parameter: routeId');
    }
    requestPath = requestPath.replace('{routeId}', routeId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a route
  * @memberOf RoutingApi
  * @instance
  * @param {string} domainName - email domain
  * @param {string} routeId - route ID
  * @param {} body - Route
  * @example
  * Body Example:
  * {
   "name": "",
   "pattern": "",
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "priority": 0,
   "skills": [],
   "language": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "fromName": "",
   "fromEmail": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "pattern": "",
   "queue": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "priority": 0,
   "skills": [],
   "language": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "fromName": "",
   "fromEmail": "",
   "selfUri": ""
}
  */
RoutingApi.prototype.putEmailDomainsDomainnameRoutesRouteId = function putEmailDomainsDomainnameRoutesRouteId(domainName, routeId, body){
    var requestPath = '/api/v2/routing/email/domains/{domainName}/routes/{routeId}';
    var requestQuery = {};
    var requestBody;

    if(domainName === undefined || domainName === null){
      throw new Error('Missing required  parameter: domainName');
    }
    requestPath = requestPath.replace('{domainName}', domainName);
    if(routeId === undefined || routeId === null){
      throw new Error('Missing required  parameter: routeId');
    }
    requestPath = requestPath.replace('{routeId}', routeId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a route
  * @memberOf RoutingApi
  * @instance
  * @param {string} domainName - email domain
  * @param {string} routeId - route ID
  */
RoutingApi.prototype.deleteEmailDomainsDomainnameRoutesRouteId = function deleteEmailDomainsDomainnameRoutesRouteId(domainName, routeId){
    var requestPath = '/api/v2/routing/email/domains/{domainName}/routes/{routeId}';
    var requestQuery = {};
    var requestBody;

    if(domainName === undefined || domainName === null){
      throw new Error('Missing required  parameter: domainName');
    }
    requestPath = requestPath.replace('{domainName}', domainName);
    if(routeId === undefined || routeId === null){
      throw new Error('Missing required  parameter: routeId');
    }
    requestPath = requestPath.replace('{routeId}', routeId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get email setup
  * @memberOf RoutingApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "rootDomain": ""
}
  */
RoutingApi.prototype.getEmailSetup = function getEmailSetup(){
    var requestPath = '/api/v2/routing/email/setup';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get list of queues.
  * @memberOf RoutingApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortBy - Sort by
  * @param {string} name - Name
  * @param {boolean} active - Active
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RoutingApi.prototype.getQueues = function getQueues(pageSize, pageNumber, sortBy, name, active){
    var requestPath = '/api/v2/routing/queues';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["name"] = name;
    requestQuery["active"] = active;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create queue
  * @memberOf RoutingApi
  * @instance
  * @param {} body - Queue
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "mediaSettings": {},
   "bullseye": {
      "rings": []
   },
   "acwSettings": {
      "wrapupPrompt": "",
      "timeoutMs": 0
   },
   "skillEvaluationMethod": "",
   "queueFlow": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callingPartyName": "",
   "callingPartyNumber": "",
   "sourceQueueId": "",
   "memberCount": 0
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "mediaSettings": {},
   "bullseye": {
      "rings": []
   },
   "acwSettings": {
      "wrapupPrompt": "",
      "timeoutMs": 0
   },
   "skillEvaluationMethod": "",
   "queueFlow": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callingPartyName": "",
   "callingPartyNumber": "",
   "memberCount": 0,
   "selfUri": ""
}
  */
RoutingApi.prototype.postQueues = function postQueues(body){
    var requestPath = '/api/v2/routing/queues';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get details about this queue.
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "mediaSettings": {},
   "bullseye": {
      "rings": []
   },
   "acwSettings": {
      "wrapupPrompt": "",
      "timeoutMs": 0
   },
   "skillEvaluationMethod": "",
   "queueFlow": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callingPartyName": "",
   "callingPartyNumber": "",
   "memberCount": 0,
   "selfUri": ""
}
  */
RoutingApi.prototype.getQueuesQueueId = function getQueuesQueueId(queueId){
    var requestPath = '/api/v2/routing/queues/{queueId}';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a queue
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {} body - Queue
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "mediaSettings": {},
   "bullseye": {
      "rings": []
   },
   "acwSettings": {
      "wrapupPrompt": "",
      "timeoutMs": 0
   },
   "skillEvaluationMethod": "",
   "queueFlow": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callingPartyName": "",
   "callingPartyNumber": "",
   "memberCount": 0
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "mediaSettings": {},
   "bullseye": {
      "rings": []
   },
   "acwSettings": {
      "wrapupPrompt": "",
      "timeoutMs": 0
   },
   "skillEvaluationMethod": "",
   "queueFlow": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callingPartyName": "",
   "callingPartyNumber": "",
   "memberCount": 0,
   "selfUri": ""
}
  */
RoutingApi.prototype.putQueuesQueueId = function putQueuesQueueId(queueId, body){
    var requestPath = '/api/v2/routing/queues/{queueId}';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a queue
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {boolean} forceDelete - forceDelete
  */
RoutingApi.prototype.deleteQueuesQueueId = function deleteQueuesQueueId(queueId, forceDelete){
    var requestPath = '/api/v2/routing/queues/{queueId}';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    requestQuery["forceDelete"] = forceDelete;
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get recent conversations that are still active
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RoutingApi.prototype.getQueuesQueueIdConversations = function getQueuesQueueIdConversations(queueId, pageSize, pageNumber){
    var requestPath = '/api/v2/routing/queues/{queueId}/conversations';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get recent callback conversations that are still active
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RoutingApi.prototype.getQueuesQueueIdConversationsCallbacks = function getQueuesQueueIdConversationsCallbacks(queueId, pageSize, pageNumber){
    var requestPath = '/api/v2/routing/queues/{queueId}/conversations/callbacks';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get recent call conversations that are still active
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RoutingApi.prototype.getQueuesQueueIdConversationsCalls = function getQueuesQueueIdConversationsCalls(queueId, pageSize, pageNumber){
    var requestPath = '/api/v2/routing/queues/{queueId}/conversations/calls';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get recent chat conversations that are still active
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RoutingApi.prototype.getQueuesQueueIdConversationsChats = function getQueuesQueueIdConversationsChats(queueId, pageSize, pageNumber){
    var requestPath = '/api/v2/routing/queues/{queueId}/conversations/chats';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get recent email conversations that are still active
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RoutingApi.prototype.getQueuesQueueIdConversationsEmails = function getQueuesQueueIdConversationsEmails(queueId, pageSize, pageNumber){
    var requestPath = '/api/v2/routing/queues/{queueId}/conversations/emails';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get Estimated Wait Time
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - queueId
  * @param {string} conversationId - conversationId
  * @example
  * 200 Response Example:
  * {
   "results": []
}
  */
RoutingApi.prototype.getQueuesQueueIdEstimatedwaittime = function getQueuesQueueIdEstimatedwaittime(queueId, conversationId){
    var requestPath = '/api/v2/routing/queues/{queueId}/estimatedwaittime';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    requestQuery["conversationId"] = conversationId;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the members of this queue
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortBy - Sort by
  * @param {array} expand - Which fields, if any, to expand. Valid Values: routingStatus, presence, conversationSummary, outOfOffice, geolocation, station, authorization, profileSkills, date, geolocationsettings, organization, presencedefinitions, locations
  * @param {boolean} joined - Filter by joined status
  * @param {string} name - Filter by queue member name
  * @param {array} skills - Filter by skill
  * @param {array} languages - Filter by language
  * @param {array} routingStatus - Filter by routing status
  * @param {array} presence - Filter by presence
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RoutingApi.prototype.getQueuesQueueIdUsers = function getQueuesQueueIdUsers(queueId, pageSize, pageNumber, sortBy, expand, joined, name, skills, languages, routingStatus, presence){
    var requestPath = '/api/v2/routing/queues/{queueId}/users';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["expand"] = expand;
    requestQuery["joined"] = joined;
    requestQuery["name"] = name;
    requestQuery["skills"] = skills;
    requestQuery["languages"] = languages;
    requestQuery["routingStatus"] = routingStatus;
    requestQuery["presence"] = presence;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Bulk add or delete up to 100 queue members
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {} body - Queue Members
  * @param {boolean} doDelete - True to delete queue members
  * @example
  * Body Example:
  * [
 {
  "name": "",
  "user": {
   "name": "",
   "chat": {},
   "department": "",
   "email": "",
   "addresses": [],
   "title": "",
   "username": "",
   "images": [],
   "version": 0
  },
  "ringNumber": 0,
  "joined": true,
  "memberBy": "",
  "routingStatus": {
   "userId": "",
   "status": "",
   "startTime": ""
  }
 }
]
  */
RoutingApi.prototype.postQueuesQueueIdUsers = function postQueuesQueueIdUsers(queueId, body, doDelete){
    var requestPath = '/api/v2/routing/queues/{queueId}/users';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["delete"] = doDelete;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Join or unjoin a set of users for a queue
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {} body - Queue Members
  * @example
  * Body Example:
  * [
 {
  "name": "",
  "user": {
   "name": "",
   "chat": {},
   "department": "",
   "email": "",
   "addresses": [],
   "title": "",
   "username": "",
   "images": [],
   "version": 0
  },
  "ringNumber": 0,
  "joined": true,
  "memberBy": "",
  "routingStatus": {
   "userId": "",
   "status": "",
   "startTime": ""
  }
 }
]
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RoutingApi.prototype.patchQueuesQueueIdUsers = function patchQueuesQueueIdUsers(queueId, body){
    var requestPath = '/api/v2/routing/queues/{queueId}/users';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete queue member
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {string} memberId - Member ID
  */
RoutingApi.prototype.deleteQueuesQueueIdUsersMemberId = function deleteQueuesQueueIdUsersMemberId(queueId, memberId){
    var requestPath = '/api/v2/routing/queues/{queueId}/users/{memberId}';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    if(memberId === undefined || memberId === null){
      throw new Error('Missing required  parameter: memberId');
    }
    requestPath = requestPath.replace('{memberId}', memberId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update the ring number of joined status for a User in a Queue
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {string} memberId - Member ID
  * @param {} body - Queue Member
  * @example
  * Body Example:
  * {
   "name": "",
   "user": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "ringNumber": 0,
   "joined": true,
   "memberBy": "",
   "routingStatus": {
      "userId": "",
      "status": "",
      "startTime": ""
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "user": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "ringNumber": 0,
   "joined": true,
   "memberBy": "",
   "routingStatus": {
      "userId": "",
      "status": "",
      "startTime": ""
   },
   "selfUri": ""
}
  */
RoutingApi.prototype.patchQueuesQueueIdUsersMemberId = function patchQueuesQueueIdUsersMemberId(queueId, memberId, body){
    var requestPath = '/api/v2/routing/queues/{queueId}/users/{memberId}';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    if(memberId === undefined || memberId === null){
      throw new Error('Missing required  parameter: memberId');
    }
    requestPath = requestPath.replace('{memberId}', memberId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the wrap-up codes for a queue
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {string} codeId - Code ID
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RoutingApi.prototype.getQueuesQueueIdWrapupcodes = function getQueuesQueueIdWrapupcodes(queueId, codeId){
    var requestPath = '/api/v2/routing/queues/{queueId}/wrapupcodes';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    if(codeId === undefined || codeId === null){
      throw new Error('Missing required  parameter: codeId');
    }
    requestPath = requestPath.replace('{codeId}', codeId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Add up to 100 wrap-up codes to a queue
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {string} codeId - Code ID
  * @param {} body - List of wrapup codes
  * @example
  * Body Example:
  * [
 {
  "name": "",
  "dateCreated": "",
  "dateModified": "",
  "modifiedBy": "",
  "createdBy": ""
 }
]
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "dateCreated": "",
  "dateModified": "",
  "modifiedBy": "",
  "createdBy": "",
  "selfUri": ""
 }
]
  */
RoutingApi.prototype.postQueuesQueueIdWrapupcodes = function postQueuesQueueIdWrapupcodes(queueId, codeId, body){
    var requestPath = '/api/v2/routing/queues/{queueId}/wrapupcodes';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    if(codeId === undefined || codeId === null){
      throw new Error('Missing required  parameter: codeId');
    }
    requestPath = requestPath.replace('{codeId}', codeId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a wrap-up code from a queue
  * @memberOf RoutingApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {string} codeId - Code ID
  */
RoutingApi.prototype.deleteQueuesQueueIdWrapupcodesCodeId = function deleteQueuesQueueIdWrapupcodesCodeId(queueId, codeId){
    var requestPath = '/api/v2/routing/queues/{queueId}/wrapupcodes/{codeId}';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    if(codeId === undefined || codeId === null){
      throw new Error('Missing required  parameter: codeId');
    }
    requestPath = requestPath.replace('{codeId}', codeId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of routing skills.
  * @memberOf RoutingApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RoutingApi.prototype.getSkills = function getSkills(pageSize, pageNumber){
    var requestPath = '/api/v2/routing/skills';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create Skill
  * @memberOf RoutingApi
  * @instance
  * @param {} body - Skill
  * @example
  * Body Example:
  * {
   "name": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateModified": "",
   "state": "",
   "version": "",
   "selfUri": ""
}
  */
RoutingApi.prototype.postSkills = function postSkills(body){
    var requestPath = '/api/v2/routing/skills';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get Routing Skill
  * @memberOf RoutingApi
  * @instance
  * @param {string} skillId - Skill ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateModified": "",
   "state": "",
   "version": "",
   "selfUri": ""
}
  */
RoutingApi.prototype.getSkillsSkillId = function getSkillsSkillId(skillId){
    var requestPath = '/api/v2/routing/skills/{skillId}';
    var requestQuery = {};
    var requestBody;

    if(skillId === undefined || skillId === null){
      throw new Error('Missing required  parameter: skillId');
    }
    requestPath = requestPath.replace('{skillId}', skillId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete Routing Skill
  * @memberOf RoutingApi
  * @instance
  * @param {string} skillId - Skill ID
  */
RoutingApi.prototype.deleteSkillsSkillId = function deleteSkillsSkillId(skillId){
    var requestPath = '/api/v2/routing/skills/{skillId}';
    var requestQuery = {};
    var requestBody;

    if(skillId === undefined || skillId === null){
      throw new Error('Missing required  parameter: skillId');
    }
    requestPath = requestPath.replace('{skillId}', skillId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the utilization settings.
  * @memberOf RoutingApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "utilization": {}
}
  */
RoutingApi.prototype.getUtilization = function getUtilization(){
    var requestPath = '/api/v2/routing/utilization';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update the utilization settings.
  * @memberOf RoutingApi
  * @instance
  * @param {} body - utilization
  * @example
  * Body Example:
  * {
   "utilization": {}
}
  * @example
  * 200 Response Example:
  * {
   "utilization": {}
}
  */
RoutingApi.prototype.putUtilization = function putUtilization(body){
    var requestPath = '/api/v2/routing/utilization';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete utilization settings and revert to system defaults.
  * @memberOf RoutingApi
  * @instance
  */
RoutingApi.prototype.deleteUtilization = function deleteUtilization(){
    var requestPath = '/api/v2/routing/utilization';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get list of wrapup codes.
  * @memberOf RoutingApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortBy - Sort by
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RoutingApi.prototype.getWrapupcodes = function getWrapupcodes(pageSize, pageNumber, sortBy){
    var requestPath = '/api/v2/routing/wrapupcodes';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a wrap-up code
  * @memberOf RoutingApi
  * @instance
  * @param {} body - WrapupCode
  * @example
  * Body Example:
  * {
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "version": 0,
   "callableTimes": [],
   "selfUri": ""
}
  */
RoutingApi.prototype.postWrapupcodes = function postWrapupcodes(body){
    var requestPath = '/api/v2/routing/wrapupcodes';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get details about this wrap-up code.
  * @memberOf RoutingApi
  * @instance
  * @param {string} codeId - Wrapup Code ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "selfUri": ""
}
  */
RoutingApi.prototype.getWrapupcodesCodeId = function getWrapupcodesCodeId(codeId){
    var requestPath = '/api/v2/routing/wrapupcodes/{codeId}';
    var requestQuery = {};
    var requestBody;

    if(codeId === undefined || codeId === null){
      throw new Error('Missing required  parameter: codeId');
    }
    requestPath = requestPath.replace('{codeId}', codeId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update wrap-up code
  * @memberOf RoutingApi
  * @instance
  * @param {string} codeId - Wrapup Code ID
  * @param {} body - WrapupCode
  * @example
  * Body Example:
  * {
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "selfUri": ""
}
  */
RoutingApi.prototype.putWrapupcodesCodeId = function putWrapupcodesCodeId(codeId, body){
    var requestPath = '/api/v2/routing/wrapupcodes/{codeId}';
    var requestQuery = {};
    var requestBody;

    if(codeId === undefined || codeId === null){
      throw new Error('Missing required  parameter: codeId');
    }
    requestPath = requestPath.replace('{codeId}', codeId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete wrap-up code
  * @memberOf RoutingApi
  * @instance
  * @param {string} codeId - Wrapup Code ID
  */
RoutingApi.prototype.deleteWrapupcodesCodeId = function deleteWrapupcodesCodeId(codeId){
    var requestPath = '/api/v2/routing/wrapupcodes/{codeId}';
    var requestQuery = {};
    var requestBody;

    if(codeId === undefined || codeId === null){
      throw new Error('Missing required  parameter: codeId');
    }
    requestPath = requestPath.replace('{codeId}', codeId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary List routing skills for user
  * @memberOf RoutingApi
  * @instance
  * @param {string} userId - User ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortOrder - Ascending or descending sort order
  ascending,
  descending,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
RoutingApi.prototype.getUserIdRoutingskills = function getUserIdRoutingskills(userId, pageSize, pageNumber, sortOrder){
    var requestPath = '/api/v2/users/{userId}/routingskills';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Add routing skill to user
  * @memberOf RoutingApi
  * @instance
  * @param {string} userId - User ID
  * @param {} body - Skill
  * @example
  * Body Example:
  * {
   "name": "",
   "proficiency": {},
   "state": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "proficiency": {},
   "state": "",
   "skillUri": "",
   "selfUri": ""
}
  */
RoutingApi.prototype.postUserIdRoutingskills = function postUserIdRoutingskills(userId, body){
    var requestPath = '/api/v2/users/{userId}/routingskills';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update routing skill proficiency or state.
  * @memberOf RoutingApi
  * @instance
  * @param {string} userId - User ID
  * @param {string} skillId - skillId
  * @param {} body - Skill
  * @example
  * Body Example:
  * {
   "name": "",
   "proficiency": {},
   "state": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "proficiency": {},
   "state": "",
   "skillUri": "",
   "selfUri": ""
}
  */
RoutingApi.prototype.putUserIdRoutingskillsSkillId = function putUserIdRoutingskillsSkillId(userId, skillId, body){
    var requestPath = '/api/v2/users/{userId}/routingskills/{skillId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(skillId === undefined || skillId === null){
      throw new Error('Missing required  parameter: skillId');
    }
    requestPath = requestPath.replace('{skillId}', skillId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Remove routing skill from user
  * @memberOf RoutingApi
  * @instance
  * @param {string} userId - User ID
  * @param {string} skillId - skillId
  */
RoutingApi.prototype.deleteUserIdRoutingskillsSkillId = function deleteUserIdRoutingskillsSkillId(userId, skillId){
    var requestPath = '/api/v2/users/{userId}/routingskills/{skillId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(skillId === undefined || skillId === null){
      throw new Error('Missing required  parameter: skillId');
    }
    requestPath = requestPath.replace('{skillId}', skillId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};


module.exports = RoutingApi;

},{}],25:[function(require,module,exports){
/**
* @class SearchApi
* @example
* var api = new purecloud.platform.SearchApi(pureCloudSession);
*/
function SearchApi(session) {
    if(!(this instanceof SearchApi)) {
        return new SearchApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('SearchApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Search using q64
  * @memberOf SearchApi
  * @instance
  * @param {string} q64 - q64
  * @param {array} expand - expand
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": []
}
  */
SearchApi.prototype.getSearch = function getSearch(q64, expand){
    var requestPath = '/api/v2/groups/search';
    var requestQuery = {};
    var requestBody;

    if(q64 === undefined || q64 === null){
      throw new Error('Missing required  parameter: q64');
    }
    requestQuery["q64"] = q64;
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Search
  * @memberOf SearchApi
  * @instance
  * @param {} body - Search request options
  * @example
  * Body Example:
  * {
   "sortOrder": "",
   "sortBy": "",
   "pageSize": 0,
   "pageNumber": 0,
   "returnFields": [],
   "expand": [],
   "query": []
}
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": []
}
  */
SearchApi.prototype.postSearch = function postSearch(body){
    var requestPath = '/api/v2/groups/search';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Search using q64
  * @memberOf SearchApi
  * @instance
  * @param {string} q64 - q64
  * @param {array} expand - expand
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": []
}
  */
SearchApi.prototype.getSearch = function getSearch(q64, expand){
    var requestPath = '/api/v2/locations/search';
    var requestQuery = {};
    var requestBody;

    if(q64 === undefined || q64 === null){
      throw new Error('Missing required  parameter: q64');
    }
    requestQuery["q64"] = q64;
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Search
  * @memberOf SearchApi
  * @instance
  * @param {} body - Search request options
  * @example
  * Body Example:
  * {
   "sortOrder": "",
   "sortBy": "",
   "pageSize": 0,
   "pageNumber": 0,
   "returnFields": [],
   "expand": [],
   "query": []
}
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": []
}
  */
SearchApi.prototype.postSearch = function postSearch(body){
    var requestPath = '/api/v2/locations/search';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Search using q64
  * @memberOf SearchApi
  * @instance
  * @param {string} q64 - q64
  * @param {array} expand - expand
  * @param {boolean} profile - profile
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   },
   "aggregations": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   }
}
  */
SearchApi.prototype.getSearch = function getSearch(q64, expand, profile){
    var requestPath = '/api/v2/search';
    var requestQuery = {};
    var requestBody;

    if(q64 === undefined || q64 === null){
      throw new Error('Missing required  parameter: q64');
    }
    requestQuery["q64"] = q64;
    requestQuery["expand"] = expand;
    requestQuery["profile"] = profile;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Search
  * @memberOf SearchApi
  * @instance
  * @param {} body - Search request options
  * @param {boolean} profile - profile
  * @example
  * Body Example:
  * {
   "sortOrder": "",
   "sortBy": "",
   "pageSize": 0,
   "pageNumber": 0,
   "returnFields": [],
   "expand": [],
   "types": [],
   "query": [],
   "aggregations": []
}
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   },
   "aggregations": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   }
}
  */
SearchApi.prototype.postSearch = function postSearch(body, profile){
    var requestPath = '/api/v2/search';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["profile"] = profile;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Suggest using q64
  * @memberOf SearchApi
  * @instance
  * @param {string} q64 - q64
  * @param {boolean} profile - profile
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   },
   "aggregations": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   }
}
  */
SearchApi.prototype.getSuggest = function getSuggest(q64, profile){
    var requestPath = '/api/v2/search/suggest';
    var requestQuery = {};
    var requestBody;

    if(q64 === undefined || q64 === null){
      throw new Error('Missing required  parameter: q64');
    }
    requestQuery["q64"] = q64;
    requestQuery["profile"] = profile;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Suggest
  * @memberOf SearchApi
  * @instance
  * @param {} body - Search request options
  * @param {boolean} profile - profile
  * @example
  * Body Example:
  * {
   "types": [],
   "query": []
}
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   },
   "aggregations": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   }
}
  */
SearchApi.prototype.postSuggest = function postSuggest(body, profile){
    var requestPath = '/api/v2/search/suggest';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["profile"] = profile;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Search using q64
  * @memberOf SearchApi
  * @instance
  * @param {string} q64 - q64
  * @param {array} expand - expand
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": []
}
  */
SearchApi.prototype.getSearch = function getSearch(q64, expand){
    var requestPath = '/api/v2/users/search';
    var requestQuery = {};
    var requestBody;

    if(q64 === undefined || q64 === null){
      throw new Error('Missing required  parameter: q64');
    }
    requestQuery["q64"] = q64;
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Search
  * @memberOf SearchApi
  * @instance
  * @param {} body - Search request options
  * @example
  * Body Example:
  * {
   "sortOrder": "",
   "sortBy": "",
   "pageSize": 0,
   "pageNumber": 0,
   "returnFields": [],
   "expand": [],
   "query": []
}
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": []
}
  */
SearchApi.prototype.postSearch = function postSearch(body){
    var requestPath = '/api/v2/users/search';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};


module.exports = SearchApi;

},{}],26:[function(require,module,exports){
/**
* @class StationsApi
* @example
* var api = new purecloud.platform.StationsApi(pureCloudSession);
*/
function StationsApi(session) {
    if(!(this instanceof StationsApi)) {
        return new StationsApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('StationsApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get the list of available stations.
  * @memberOf StationsApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortBy - Sort by
  * @param {string} name - Name
  * @param {string} lineAppearanceId - lineAppearanceId
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
StationsApi.prototype.getStations = function getStations(pageSize, pageNumber, sortBy, name, lineAppearanceId){
    var requestPath = '/api/v2/stations';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["name"] = name;
    requestQuery["lineAppearanceId"] = lineAppearanceId;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get station.
  * @memberOf StationsApi
  * @instance
  * @param {string} stationId - Station ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "status": "",
   "userId": "",
   "primaryEdge": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "secondaryEdge": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "type": "",
   "lineAppearanceId": "",
   "selfUri": ""
}
  */
StationsApi.prototype.getStationId = function getStationId(stationId){
    var requestPath = '/api/v2/stations/{stationId}';
    var requestQuery = {};
    var requestBody;

    if(stationId === undefined || stationId === null){
      throw new Error('Missing required  parameter: stationId');
    }
    requestPath = requestPath.replace('{stationId}', stationId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Unassigns the user assigned to this station
  * @memberOf StationsApi
  * @instance
  * @param {string} stationId - Station ID
  */
StationsApi.prototype.deleteStationIdAssociateduser = function deleteStationIdAssociateduser(stationId){
    var requestPath = '/api/v2/stations/{stationId}/associateduser';
    var requestQuery = {};
    var requestBody;

    if(stationId === undefined || stationId === null){
      throw new Error('Missing required  parameter: stationId');
    }
    requestPath = requestPath.replace('{stationId}', stationId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};


module.exports = StationsApi;

},{}],27:[function(require,module,exports){
/**
* @class SuggestApi
* @example
* var api = new purecloud.platform.SuggestApi(pureCloudSession);
*/
function SuggestApi(session) {
    if(!(this instanceof SuggestApi)) {
        return new SuggestApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('SuggestApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Search using q64
  * @memberOf SuggestApi
  * @instance
  * @param {string} q64 - q64
  * @param {array} expand - expand
  * @param {boolean} profile - profile
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   },
   "aggregations": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   }
}
  */
SuggestApi.prototype.getSearch = function getSearch(q64, expand, profile){
    var requestPath = '/api/v2/search';
    var requestQuery = {};
    var requestBody;

    if(q64 === undefined || q64 === null){
      throw new Error('Missing required  parameter: q64');
    }
    requestQuery["q64"] = q64;
    requestQuery["expand"] = expand;
    requestQuery["profile"] = profile;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Search
  * @memberOf SuggestApi
  * @instance
  * @param {} body - Search request options
  * @param {boolean} profile - profile
  * @example
  * Body Example:
  * {
   "sortOrder": "",
   "sortBy": "",
   "pageSize": 0,
   "pageNumber": 0,
   "returnFields": [],
   "expand": [],
   "types": [],
   "query": [],
   "aggregations": []
}
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   },
   "aggregations": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   }
}
  */
SuggestApi.prototype.postSearch = function postSearch(body, profile){
    var requestPath = '/api/v2/search';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["profile"] = profile;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Suggest using q64
  * @memberOf SuggestApi
  * @instance
  * @param {string} q64 - q64
  * @param {boolean} profile - profile
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   },
   "aggregations": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   }
}
  */
SuggestApi.prototype.getSuggest = function getSuggest(q64, profile){
    var requestPath = '/api/v2/search/suggest';
    var requestQuery = {};
    var requestBody;

    if(q64 === undefined || q64 === null){
      throw new Error('Missing required  parameter: q64');
    }
    requestQuery["q64"] = q64;
    requestQuery["profile"] = profile;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Suggest
  * @memberOf SuggestApi
  * @instance
  * @param {} body - Search request options
  * @param {boolean} profile - profile
  * @example
  * Body Example:
  * {
   "types": [],
   "query": []
}
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   },
   "aggregations": {
      "nodeType": "",
      "float": true,
      "object": true,
      "boolean": true,
      "number": true,
      "valueNode": true,
      "containerNode": true,
      "missingNode": true,
      "pojo": true,
      "integralNumber": true,
      "floatingPointNumber": true,
      "short": true,
      "int": true,
      "long": true,
      "double": true,
      "bigDecimal": true,
      "bigInteger": true,
      "textual": true,
      "binary": true,
      "array": true,
      "null": true
   }
}
  */
SuggestApi.prototype.postSuggest = function postSuggest(body, profile){
    var requestPath = '/api/v2/search/suggest';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["profile"] = profile;
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};


module.exports = SuggestApi;

},{}],28:[function(require,module,exports){
/**
* @class TelephonyProvidersEdgeApi
* @example
* var api = new purecloud.platform.TelephonyProvidersEdgeApi(pureCloudSession);
*/
function TelephonyProvidersEdgeApi(session) {
    if(!(this instanceof TelephonyProvidersEdgeApi)) {
        return new TelephonyProvidersEdgeApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('TelephonyProvidersEdgeApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Lists available schema categories
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getSchemasEdgesVnext = function getSchemasEdgesVnext(pageSize, pageNumber){
    var requestPath = '/api/v2/configuration/schemas/edges/vnext';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary List schemas of a specific category
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} schemaCategory - Schema category
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getSchemasEdgesVnextSchemacategory = function getSchemasEdgesVnextSchemacategory(schemaCategory, pageSize, pageNumber){
    var requestPath = '/api/v2/configuration/schemas/edges/vnext/{schemaCategory}';
    var requestQuery = {};
    var requestBody;

    if(schemaCategory === undefined || schemaCategory === null){
      throw new Error('Missing required  parameter: schemaCategory');
    }
    requestPath = requestPath.replace('{schemaCategory}', schemaCategory);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary List schemas of a specific category
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} schemaCategory - Schema category
  * @param {string} schemaType - Schema type
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getSchemasEdgesVnextSchemacategorySchematype = function getSchemasEdgesVnextSchemacategorySchematype(schemaCategory, schemaType, pageSize, pageNumber){
    var requestPath = '/api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}';
    var requestQuery = {};
    var requestBody;

    if(schemaCategory === undefined || schemaCategory === null){
      throw new Error('Missing required  parameter: schemaCategory');
    }
    requestPath = requestPath.replace('{schemaCategory}', schemaCategory);
    if(schemaType === undefined || schemaType === null){
      throw new Error('Missing required  parameter: schemaType');
    }
    requestPath = requestPath.replace('{schemaType}', schemaType);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a json schema
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} schemaCategory - Schema category
  * @param {string} schemaType - Schema type
  * @param {string} schemaId - Schema ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "thirdPartyOrgId": "",
   "thirdPartyOrgName": "",
   "thirdPartyURI": "",
   "domain": "",
   "version": 0,
   "state": "",
   "defaultSiteId": "",
   "deletable": true,
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getSchemasEdgesVnextSchemacategorySchematypeSchemaId = function getSchemasEdgesVnextSchemacategorySchematypeSchemaId(schemaCategory, schemaType, schemaId){
    var requestPath = '/api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}';
    var requestQuery = {};
    var requestBody;

    if(schemaCategory === undefined || schemaCategory === null){
      throw new Error('Missing required  parameter: schemaCategory');
    }
    requestPath = requestPath.replace('{schemaCategory}', schemaCategory);
    if(schemaType === undefined || schemaType === null){
      throw new Error('Missing required  parameter: schemaType');
    }
    requestPath = requestPath.replace('{schemaType}', schemaType);
    if(schemaId === undefined || schemaId === null){
      throw new Error('Missing required  parameter: schemaId');
    }
    requestPath = requestPath.replace('{schemaId}', schemaId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get metadata for a schema
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} schemaCategory - Schema category
  * @param {string} schemaType - Schema type
  * @param {string} schemaId - Schema ID
  * @param {string} extensionType - extension
  * @param {string} metadataId - Metadata ID
  * @param {string} type - Type
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "thirdPartyOrgId": "",
   "thirdPartyOrgName": "",
   "thirdPartyURI": "",
   "domain": "",
   "version": 0,
   "state": "",
   "defaultSiteId": "",
   "deletable": true,
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getSchemasEdgesVnextSchemacategorySchematypeSchemaIdExtensiontypeMetadataId = function getSchemasEdgesVnextSchemacategorySchematypeSchemaIdExtensiontypeMetadataId(schemaCategory, schemaType, schemaId, extensionType, metadataId, type){
    var requestPath = '/api/v2/configuration/schemas/edges/vnext/{schemaCategory}/{schemaType}/{schemaId}/{extensionType}/{metadataId}';
    var requestQuery = {};
    var requestBody;

    if(schemaCategory === undefined || schemaCategory === null){
      throw new Error('Missing required  parameter: schemaCategory');
    }
    requestPath = requestPath.replace('{schemaCategory}', schemaCategory);
    if(schemaType === undefined || schemaType === null){
      throw new Error('Missing required  parameter: schemaType');
    }
    requestPath = requestPath.replace('{schemaType}', schemaType);
    if(schemaId === undefined || schemaId === null){
      throw new Error('Missing required  parameter: schemaId');
    }
    requestPath = requestPath.replace('{schemaId}', schemaId);
    if(extensionType === undefined || extensionType === null){
      throw new Error('Missing required  parameter: extensionType');
    }
    requestPath = requestPath.replace('{extensionType}', extensionType);
    if(metadataId === undefined || metadataId === null){
      throw new Error('Missing required  parameter: metadataId');
    }
    requestPath = requestPath.replace('{metadataId}', metadataId);
    requestQuery["type"] = type;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of edges.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} name - Name
  * @param {string} siteid - Filter by site.id
  * @param {string} edgeGroupid - Filter by edgeGroup.id
  * @param {string} sortBy - Sort by
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdges = function getProvidersEdges(pageSize, pageNumber, name, siteid, edgeGroupid, sortBy){
    var requestPath = '/api/v2/telephony/providers/edges';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["name"] = name;
    requestQuery["site.id"] = siteid;
    requestQuery["edgeGroup.id"] = edgeGroupid;
    requestQuery["sortBy"] = sortBy;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create an edge.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {} body - Edge
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "interfaces": [],
   "make": "",
   "model": "",
   "apiVersion": "",
   "softwareVersion": "",
   "softwareVersionTimestamp": "",
   "softwareVersionPlatform": "",
   "softwareVersionConfiguration": "",
   "fullSoftwareVersion": "",
   "pairingId": "",
   "fingerprint": "",
   "fingerprintHint": "",
   "currentVersion": "",
   "stagedVersion": "",
   "patch": "",
   "statusCode": "",
   "edgeGroup": {
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "managed": true,
      "edgeTrunkBaseAssignment": {},
      "phoneTrunkBases": []
   },
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "softwareStatus": {
      "version": {},
      "maxDownloadRate": 0,
      "downloadStartTime": "",
      "executeStartTime": "",
      "executeStopTime": "",
      "executeOnIdle": true,
      "status": "",
      "edgeUri": "",
      "current": true
   },
   "onlineStatus": "",
   "serialNumber": "",
   "physicalEdge": true,
   "managed": true,
   "edgeDeploymentType": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "interfaces": [],
   "make": "",
   "model": "",
   "apiVersion": "",
   "softwareVersion": "",
   "softwareVersionTimestamp": "",
   "softwareVersionPlatform": "",
   "softwareVersionConfiguration": "",
   "fullSoftwareVersion": "",
   "pairingId": "",
   "fingerprint": "",
   "fingerprintHint": "",
   "currentVersion": "",
   "stagedVersion": "",
   "patch": "",
   "statusCode": "",
   "edgeGroup": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "managed": true,
      "edgeTrunkBaseAssignment": {},
      "phoneTrunkBases": [],
      "selfUri": ""
   },
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "softwareStatus": {
      "version": {},
      "maxDownloadRate": 0,
      "downloadStartTime": "",
      "executeStartTime": "",
      "executeStopTime": "",
      "executeOnIdle": true,
      "status": "",
      "edgeUri": "",
      "current": true
   },
   "onlineStatus": "",
   "serialNumber": "",
   "physicalEdge": true,
   "managed": true,
   "edgeDeploymentType": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdges = function postProvidersEdges(body){
    var requestPath = '/api/v2/telephony/providers/edges';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Validates a street address
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {} body - Address
  * @example
  * Body Example:
  * {
   "address": {
      "country": "",
      "A1": "",
      "A3": "",
      "RD": "",
      "HNO": "",
      "LOC": "",
      "NAM": "",
      "PC": ""
   }
}
  * @example
  * 200 Response Example:
  * {
   "valid": true,
   "response": {
      "messageReturned": [],
      "status": ""
   }
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesAddressvalidation = function postProvidersEdgesAddressvalidation(body){
    var requestPath = '/api/v2/telephony/providers/edges/addressvalidation';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of available languages.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "languages": []
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesAvailablelanguages = function getProvidersEdgesAvailablelanguages(){
    var requestPath = '/api/v2/telephony/providers/edges/availablelanguages';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of certificate authorities.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesCertificateauthorities = function getProvidersEdgesCertificateauthorities(){
    var requestPath = '/api/v2/telephony/providers/edges/certificateauthorities';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a certificate authority.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {} body - CertificateAuthority
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "certificate": "",
   "type": "",
   "services": [],
   "certificateDetails": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "certificate": "",
   "type": "",
   "services": [],
   "certificateDetails": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesCertificateauthorities = function postProvidersEdgesCertificateauthorities(body){
    var requestPath = '/api/v2/telephony/providers/edges/certificateauthorities';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a certificate authority.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} certificateId - Certificate ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "certificate": "",
   "type": "",
   "services": [],
   "certificateDetails": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesCertificateauthoritiesCertificateId = function getProvidersEdgesCertificateauthoritiesCertificateId(certificateId){
    var requestPath = '/api/v2/telephony/providers/edges/certificateauthorities/{certificateId}';
    var requestQuery = {};
    var requestBody;

    if(certificateId === undefined || certificateId === null){
      throw new Error('Missing required  parameter: certificateId');
    }
    requestPath = requestPath.replace('{certificateId}', certificateId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a certificate authority.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} certificateId - Certificate ID
  * @param {} body - Certificate authority
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "certificate": "",
   "type": "",
   "services": [],
   "certificateDetails": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "certificate": "",
   "type": "",
   "services": [],
   "certificateDetails": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesCertificateauthoritiesCertificateId = function putProvidersEdgesCertificateauthoritiesCertificateId(certificateId, body){
    var requestPath = '/api/v2/telephony/providers/edges/certificateauthorities/{certificateId}';
    var requestQuery = {};
    var requestBody;

    if(certificateId === undefined || certificateId === null){
      throw new Error('Missing required  parameter: certificateId');
    }
    requestPath = requestPath.replace('{certificateId}', certificateId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a certificate authority.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} certificateId - Certificate ID
  */
TelephonyProvidersEdgeApi.prototype.deleteProvidersEdgesCertificateauthoritiesCertificateId = function deleteProvidersEdgesCertificateauthoritiesCertificateId(certificateId){
    var requestPath = '/api/v2/telephony/providers/edges/certificateauthorities/{certificateId}';
    var requestQuery = {};
    var requestBody;

    if(certificateId === undefined || certificateId === null){
      throw new Error('Missing required  parameter: certificateId');
    }
    requestPath = requestPath.replace('{certificateId}', certificateId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a listing of DID Pools
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortBy - Sort by
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesDidpools = function getProvidersEdgesDidpools(pageSize, pageNumber, sortBy){
    var requestPath = '/api/v2/telephony/providers/edges/didpools';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a new DID pool
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {} body - DID pool
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "startPhoneNumber": "",
   "endPhoneNumber": "",
   "comments": "",
   "provider": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "startPhoneNumber": "",
   "endPhoneNumber": "",
   "comments": "",
   "provider": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesDidpools = function postProvidersEdgesDidpools(body){
    var requestPath = '/api/v2/telephony/providers/edges/didpools';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a DID Pool by ID.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} didPoolId - DID pool ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "startPhoneNumber": "",
   "endPhoneNumber": "",
   "comments": "",
   "provider": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesDidpoolsDidpoolId = function getProvidersEdgesDidpoolsDidpoolId(didPoolId){
    var requestPath = '/api/v2/telephony/providers/edges/didpools/{didPoolId}';
    var requestQuery = {};
    var requestBody;

    if(didPoolId === undefined || didPoolId === null){
      throw new Error('Missing required  parameter: didPoolId');
    }
    requestPath = requestPath.replace('{didPoolId}', didPoolId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a DID Pool by ID.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} didPoolId - DID pool ID
  * @param {} body - DID pool
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "startPhoneNumber": "",
   "endPhoneNumber": "",
   "comments": "",
   "provider": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "startPhoneNumber": "",
   "endPhoneNumber": "",
   "comments": "",
   "provider": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesDidpoolsDidpoolId = function putProvidersEdgesDidpoolsDidpoolId(didPoolId, body){
    var requestPath = '/api/v2/telephony/providers/edges/didpools/{didPoolId}';
    var requestQuery = {};
    var requestBody;

    if(didPoolId === undefined || didPoolId === null){
      throw new Error('Missing required  parameter: didPoolId');
    }
    requestPath = requestPath.replace('{didPoolId}', didPoolId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a DID Pool by ID.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} didPoolId - DID pool ID
  */
TelephonyProvidersEdgeApi.prototype.deleteProvidersEdgesDidpoolsDidpoolId = function deleteProvidersEdgesDidpoolsDidpoolId(didPoolId){
    var requestPath = '/api/v2/telephony/providers/edges/didpools/{didPoolId}';
    var requestQuery = {};
    var requestBody;

    if(didPoolId === undefined || didPoolId === null){
      throw new Error('Missing required  parameter: didPoolId');
    }
    requestPath = requestPath.replace('{didPoolId}', didPoolId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a listing of DIDs
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortBy - Sort by
  * @param {string} sortOrder - Sort order
  * @param {string} phoneNumber - Filter by phoneNumber
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesDids = function getProvidersEdgesDids(pageSize, pageNumber, sortBy, sortOrder, phoneNumber){
    var requestPath = '/api/v2/telephony/providers/edges/dids';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    requestQuery["phoneNumber"] = phoneNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a DID by ID.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} didId - DID ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "phoneNumber": "",
   "didPool": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "ownerType": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesDidsDidId = function getProvidersEdgesDidsDidId(didId){
    var requestPath = '/api/v2/telephony/providers/edges/dids/{didId}';
    var requestQuery = {};
    var requestBody;

    if(didId === undefined || didId === null){
      throw new Error('Missing required  parameter: didId');
    }
    requestPath = requestPath.replace('{didId}', didId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a DID by ID.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} didId - DID ID
  * @param {} body - DID
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "phoneNumber": "",
   "didPool": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "ownerType": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "phoneNumber": "",
   "didPool": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "ownerType": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesDidsDidId = function putProvidersEdgesDidsDidId(didId, body){
    var requestPath = '/api/v2/telephony/providers/edges/dids/{didId}';
    var requestQuery = {};
    var requestBody;

    if(didId === undefined || didId === null){
      throw new Error('Missing required  parameter: didId');
    }
    requestPath = requestPath.replace('{didId}', didId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of edge groups.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} name - Name
  * @param {string} sortBy - Sort by
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEdgegroups = function getProvidersEdgesEdgegroups(pageSize, pageNumber, name, sortBy){
    var requestPath = '/api/v2/telephony/providers/edges/edgegroups';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["name"] = name;
    requestQuery["sortBy"] = sortBy;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create an edge group.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {} body - EdgeGroup
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "managed": true,
   "edgeTrunkBaseAssignment": {
      "family": 0,
      "trunkBase": {}
   },
   "phoneTrunkBases": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "managed": true,
   "edgeTrunkBaseAssignment": {
      "family": 0,
      "trunkBase": {}
   },
   "phoneTrunkBases": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesEdgegroups = function postProvidersEdgesEdgegroups(body){
    var requestPath = '/api/v2/telephony/providers/edges/edgegroups';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get edge group.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeGroupId - Edge group ID
  * @param {array} expand - Fields to expand in the response Valid Values: phoneTrunkBases, edgeTrunkBaseAssignment
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "managed": true,
   "edgeTrunkBaseAssignment": {
      "family": 0,
      "trunkBase": {}
   },
   "phoneTrunkBases": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEdgegroupsEdgegroupId = function getProvidersEdgesEdgegroupsEdgegroupId(edgeGroupId, expand){
    var requestPath = '/api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}';
    var requestQuery = {};
    var requestBody;

    if(edgeGroupId === undefined || edgeGroupId === null){
      throw new Error('Missing required  parameter: edgeGroupId');
    }
    requestPath = requestPath.replace('{edgeGroupId}', edgeGroupId);
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an edge group.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeGroupId - Edge group ID
  * @param {} body - EdgeGroup
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "managed": true,
   "edgeTrunkBaseAssignment": {
      "family": 0,
      "trunkBase": {}
   },
   "phoneTrunkBases": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "managed": true,
   "edgeTrunkBaseAssignment": {
      "family": 0,
      "trunkBase": {}
   },
   "phoneTrunkBases": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesEdgegroupsEdgegroupId = function putProvidersEdgesEdgegroupsEdgegroupId(edgeGroupId, body){
    var requestPath = '/api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}';
    var requestQuery = {};
    var requestBody;

    if(edgeGroupId === undefined || edgeGroupId === null){
      throw new Error('Missing required  parameter: edgeGroupId');
    }
    requestPath = requestPath.replace('{edgeGroupId}', edgeGroupId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete an edge group.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeGroupId - Edge group ID
  */
TelephonyProvidersEdgeApi.prototype.deleteProvidersEdgesEdgegroupsEdgegroupId = function deleteProvidersEdgesEdgegroupsEdgegroupId(edgeGroupId){
    var requestPath = '/api/v2/telephony/providers/edges/edgegroups/{edgeGroupId}';
    var requestQuery = {};
    var requestBody;

    if(edgeGroupId === undefined || edgeGroupId === null){
      throw new Error('Missing required  parameter: edgeGroupId');
    }
    requestPath = requestPath.replace('{edgeGroupId}', edgeGroupId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the edge version report.
  * @description The report will not have consistent data about the edge version(s) until all edges have been reset.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "oldestVersion": {
      "softwareVersion": ""
   },
   "newestVersion": {
      "softwareVersion": ""
   }
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEdgeversionreport = function getProvidersEdgesEdgeversionreport(){
    var requestPath = '/api/v2/telephony/providers/edges/edgeversionreport';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get endpoints
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} name - Name
  * @param {string} sortBy - Sort by
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEndpoints = function getProvidersEdgesEndpoints(pageSize, pageNumber, name, sortBy){
    var requestPath = '/api/v2/telephony/providers/edges/endpoints';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["name"] = name;
    requestQuery["sortBy"] = sortBy;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create endpoint
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {} body - EndpointTemplate
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "count": 0,
   "properties": {},
   "schema": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "enabled": true,
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dids": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "count": 0,
   "properties": {},
   "schema": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "enabled": true,
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dids": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesEndpoints = function postProvidersEdgesEndpoints(body){
    var requestPath = '/api/v2/telephony/providers/edges/endpoints';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get endpoint
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} endpointId - Endpoint ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "count": 0,
   "properties": {},
   "schema": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "enabled": true,
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dids": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEndpointsEndpointId = function getProvidersEdgesEndpointsEndpointId(endpointId){
    var requestPath = '/api/v2/telephony/providers/edges/endpoints/{endpointId}';
    var requestQuery = {};
    var requestBody;

    if(endpointId === undefined || endpointId === null){
      throw new Error('Missing required  parameter: endpointId');
    }
    requestPath = requestPath.replace('{endpointId}', endpointId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update endpoint
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} endpointId - Endpoint ID
  * @param {} body - EndpointTemplate
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "count": 0,
   "properties": {},
   "schema": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "enabled": true,
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dids": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "count": 0,
   "properties": {},
   "schema": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "enabled": true,
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "dids": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesEndpointsEndpointId = function putProvidersEdgesEndpointsEndpointId(endpointId, body){
    var requestPath = '/api/v2/telephony/providers/edges/endpoints/{endpointId}';
    var requestQuery = {};
    var requestBody;

    if(endpointId === undefined || endpointId === null){
      throw new Error('Missing required  parameter: endpointId');
    }
    requestPath = requestPath.replace('{endpointId}', endpointId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete endpoint
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} endpointId - Endpoint ID
  */
TelephonyProvidersEdgeApi.prototype.deleteProvidersEdgesEndpointsEndpointId = function deleteProvidersEdgesEndpointsEndpointId(endpointId){
    var requestPath = '/api/v2/telephony/providers/edges/endpoints/{endpointId}';
    var requestQuery = {};
    var requestBody;

    if(endpointId === undefined || endpointId === null){
      throw new Error('Missing required  parameter: endpointId');
    }
    requestPath = requestPath.replace('{endpointId}', endpointId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a listing of extension pools
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortBy - Sort by
  * @param {string} number - Number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesExtensionpools = function getProvidersEdgesExtensionpools(pageSize, pageNumber, sortBy, number){
    var requestPath = '/api/v2/telephony/providers/edges/extensionpools';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["number"] = number;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a new extension pool
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {} body - ExtensionPool
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "startNumber": "",
   "endNumber": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "number": "",
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "extensionPool": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "ownerType": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesExtensionpools = function postProvidersEdgesExtensionpools(body){
    var requestPath = '/api/v2/telephony/providers/edges/extensionpools';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get an extension pool by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} extensionPoolId - Extension pool ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "startNumber": "",
   "endNumber": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesExtensionpoolsExtensionpoolId = function getProvidersEdgesExtensionpoolsExtensionpoolId(extensionPoolId){
    var requestPath = '/api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}';
    var requestQuery = {};
    var requestBody;

    if(extensionPoolId === undefined || extensionPoolId === null){
      throw new Error('Missing required  parameter: extensionPoolId');
    }
    requestPath = requestPath.replace('{extensionPoolId}', extensionPoolId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an extension pool by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} extensionPoolId - Extension pool ID
  * @param {} body - ExtensionPool
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "startNumber": "",
   "endNumber": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "startNumber": "",
   "endNumber": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesExtensionpoolsExtensionpoolId = function putProvidersEdgesExtensionpoolsExtensionpoolId(extensionPoolId, body){
    var requestPath = '/api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}';
    var requestQuery = {};
    var requestBody;

    if(extensionPoolId === undefined || extensionPoolId === null){
      throw new Error('Missing required  parameter: extensionPoolId');
    }
    requestPath = requestPath.replace('{extensionPoolId}', extensionPoolId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete an extension pool by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} extensionPoolId - Extension pool ID
  */
TelephonyProvidersEdgeApi.prototype.deleteProvidersEdgesExtensionpoolsExtensionpoolId = function deleteProvidersEdgesExtensionpoolsExtensionpoolId(extensionPoolId){
    var requestPath = '/api/v2/telephony/providers/edges/extensionpools/{extensionPoolId}';
    var requestQuery = {};
    var requestBody;

    if(extensionPoolId === undefined || extensionPoolId === null){
      throw new Error('Missing required  parameter: extensionPoolId');
    }
    requestPath = requestPath.replace('{extensionPoolId}', extensionPoolId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a listing of extensions
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortBy - Sort by
  * @param {string} sortOrder - Sort order
  * @param {string} number - Filter by number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesExtensions = function getProvidersEdgesExtensions(pageSize, pageNumber, sortBy, sortOrder, number){
    var requestPath = '/api/v2/telephony/providers/edges/extensions';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    requestQuery["number"] = number;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get an extension by ID.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} extensionId - Extension ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "number": "",
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "extensionPool": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "ownerType": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesExtensionsExtensionId = function getProvidersEdgesExtensionsExtensionId(extensionId){
    var requestPath = '/api/v2/telephony/providers/edges/extensions/{extensionId}';
    var requestQuery = {};
    var requestBody;

    if(extensionId === undefined || extensionId === null){
      throw new Error('Missing required  parameter: extensionId');
    }
    requestPath = requestPath.replace('{extensionId}', extensionId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an extension by ID.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} extensionId - Extension ID
  * @param {} body - Extension
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "number": "",
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "extensionPool": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "ownerType": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "number": "",
   "owner": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "extensionPool": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "ownerType": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesExtensionsExtensionId = function putProvidersEdgesExtensionsExtensionId(extensionId, body){
    var requestPath = '/api/v2/telephony/providers/edges/extensions/{extensionId}';
    var requestQuery = {};
    var requestBody;

    if(extensionId === undefined || extensionId === null){
      throw new Error('Missing required  parameter: extensionId');
    }
    requestPath = requestPath.replace('{extensionId}', extensionId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a listing of line base settings objects
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageNumber - Page number
  * @param {integer} pageSize - Page size
  * @param {string} sortBy - Value by which to sort
  * @param {string} sortOrder - Sort order
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesLinebasesettings = function getProvidersEdgesLinebasesettings(pageNumber, pageSize, sortBy, sortOrder){
    var requestPath = '/api/v2/telephony/providers/edges/linebasesettings';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageNumber"] = pageNumber;
    requestQuery["pageSize"] = pageSize;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a line base settings object by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} lineBaseId - Line base ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "lineMetaBase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "properties": {},
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesLinebasesettingsLinebaseId = function getProvidersEdgesLinebasesettingsLinebaseId(lineBaseId){
    var requestPath = '/api/v2/telephony/providers/edges/linebasesettings/{lineBaseId}';
    var requestQuery = {};
    var requestBody;

    if(lineBaseId === undefined || lineBaseId === null){
      throw new Error('Missing required  parameter: lineBaseId');
    }
    requestPath = requestPath.replace('{lineBaseId}', lineBaseId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of Lines
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} name - Name
  * @param {string} sortBy - Value by which to sort
  * @param {array} expand - Fields to expand in the response, comma-separated Valid Values: properties, site, edgeGroup, primaryEdge, secondaryEdge, edges, assignedUser
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesLines = function getProvidersEdgesLines(pageSize, pageNumber, name, sortBy, expand){
    var requestPath = '/api/v2/telephony/providers/edges/lines';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["name"] = name;
    requestQuery["sortBy"] = sortBy;
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Line instance template based on a Line Base Settings object. This object can then be modified and saved as a new Line instance
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} lineBaseSettingsId - The id of a Line Base Settings object upon which to base this Line
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "properties": {},
   "edgeGroup": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "template": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lineBaseSettings": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "primaryEdge": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "interfaces": [],
      "make": "",
      "model": "",
      "apiVersion": "",
      "softwareVersion": "",
      "softwareVersionTimestamp": "",
      "softwareVersionPlatform": "",
      "softwareVersionConfiguration": "",
      "fullSoftwareVersion": "",
      "pairingId": "",
      "fingerprint": "",
      "fingerprintHint": "",
      "currentVersion": "",
      "stagedVersion": "",
      "patch": "",
      "statusCode": "",
      "edgeGroup": {},
      "site": {},
      "softwareStatus": {},
      "onlineStatus": "",
      "serialNumber": "",
      "physicalEdge": true,
      "managed": true,
      "edgeDeploymentType": "",
      "selfUri": ""
   },
   "secondaryEdge": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "interfaces": [],
      "make": "",
      "model": "",
      "apiVersion": "",
      "softwareVersion": "",
      "softwareVersionTimestamp": "",
      "softwareVersionPlatform": "",
      "softwareVersionConfiguration": "",
      "fullSoftwareVersion": "",
      "pairingId": "",
      "fingerprint": "",
      "fingerprintHint": "",
      "currentVersion": "",
      "stagedVersion": "",
      "patch": "",
      "statusCode": "",
      "edgeGroup": {},
      "site": {},
      "softwareStatus": {},
      "onlineStatus": "",
      "serialNumber": "",
      "physicalEdge": true,
      "managed": true,
      "edgeDeploymentType": "",
      "selfUri": ""
   },
   "loggedInUser": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "defaultForUser": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesLinesTemplate = function getProvidersEdgesLinesTemplate(lineBaseSettingsId){
    var requestPath = '/api/v2/telephony/providers/edges/lines/template';
    var requestQuery = {};
    var requestBody;

    if(lineBaseSettingsId === undefined || lineBaseSettingsId === null){
      throw new Error('Missing required  parameter: lineBaseSettingsId');
    }
    requestQuery["lineBaseSettingsId"] = lineBaseSettingsId;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Line by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} lineId - Line ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "properties": {},
   "edgeGroup": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "template": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lineBaseSettings": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "primaryEdge": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "interfaces": [],
      "make": "",
      "model": "",
      "apiVersion": "",
      "softwareVersion": "",
      "softwareVersionTimestamp": "",
      "softwareVersionPlatform": "",
      "softwareVersionConfiguration": "",
      "fullSoftwareVersion": "",
      "pairingId": "",
      "fingerprint": "",
      "fingerprintHint": "",
      "currentVersion": "",
      "stagedVersion": "",
      "patch": "",
      "statusCode": "",
      "edgeGroup": {},
      "site": {},
      "softwareStatus": {},
      "onlineStatus": "",
      "serialNumber": "",
      "physicalEdge": true,
      "managed": true,
      "edgeDeploymentType": "",
      "selfUri": ""
   },
   "secondaryEdge": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "interfaces": [],
      "make": "",
      "model": "",
      "apiVersion": "",
      "softwareVersion": "",
      "softwareVersionTimestamp": "",
      "softwareVersionPlatform": "",
      "softwareVersionConfiguration": "",
      "fullSoftwareVersion": "",
      "pairingId": "",
      "fingerprint": "",
      "fingerprintHint": "",
      "currentVersion": "",
      "stagedVersion": "",
      "patch": "",
      "statusCode": "",
      "edgeGroup": {},
      "site": {},
      "softwareStatus": {},
      "onlineStatus": "",
      "serialNumber": "",
      "physicalEdge": true,
      "managed": true,
      "edgeDeploymentType": "",
      "selfUri": ""
   },
   "loggedInUser": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "defaultForUser": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesLinesLineId = function getProvidersEdgesLinesLineId(lineId){
    var requestPath = '/api/v2/telephony/providers/edges/lines/{lineId}';
    var requestQuery = {};
    var requestBody;

    if(lineId === undefined || lineId === null){
      throw new Error('Missing required  parameter: lineId');
    }
    requestPath = requestPath.replace('{lineId}', lineId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a file that can be used to configure a hardware Edge's settings.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {} body - EdgeOfflineConfiguration
  * @example
  * Body Example:
  * {
   "pairingId": "",
   "network": {
      "wan": {}
   }
}
  * @example
  * 200 Response Example:
  * {
   "downloadUrl": ""
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesOfflineconfiguration = function postProvidersEdgesOfflineconfiguration(body){
    var requestPath = '/api/v2/telephony/providers/edges/offlineconfiguration';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get outbound routes
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} name - Name
  * @param {string} siteid - Filter by site.id
  * @param {string} sortBy - Sort by
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesOutboundroutes = function getProvidersEdgesOutboundroutes(pageSize, pageNumber, name, siteid, sortBy){
    var requestPath = '/api/v2/telephony/providers/edges/outboundroutes';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["name"] = name;
    requestQuery["site.id"] = siteid;
    requestQuery["sortBy"] = sortBy;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create outbound rule
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {} body - OutboundRoute
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "site": {
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "primarySites": [],
      "secondarySites": [],
      "primaryEdges": [],
      "secondaryEdges": [],
      "addresses": [],
      "edges": [],
      "edgeAutoUpdateConfig": {},
      "location": {},
      "managed": true
   },
   "classificationTypes": [],
   "enabled": true,
   "distribution": "",
   "managed": true,
   "externalTrunkBases": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "site": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "primarySites": [],
      "secondarySites": [],
      "primaryEdges": [],
      "secondaryEdges": [],
      "addresses": [],
      "edges": [],
      "edgeAutoUpdateConfig": {},
      "location": {},
      "managed": true,
      "selfUri": ""
   },
   "classificationTypes": [],
   "enabled": true,
   "distribution": "",
   "managed": true,
   "externalTrunkBases": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesOutboundroutes = function postProvidersEdgesOutboundroutes(body){
    var requestPath = '/api/v2/telephony/providers/edges/outboundroutes';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get outbound route
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} outboundRouteId - Outbound route ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "site": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "primarySites": [],
      "secondarySites": [],
      "primaryEdges": [],
      "secondaryEdges": [],
      "addresses": [],
      "edges": [],
      "edgeAutoUpdateConfig": {},
      "location": {},
      "managed": true,
      "selfUri": ""
   },
   "classificationTypes": [],
   "enabled": true,
   "distribution": "",
   "managed": true,
   "externalTrunkBases": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesOutboundroutesOutboundrouteId = function getProvidersEdgesOutboundroutesOutboundrouteId(outboundRouteId){
    var requestPath = '/api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}';
    var requestQuery = {};
    var requestBody;

    if(outboundRouteId === undefined || outboundRouteId === null){
      throw new Error('Missing required  parameter: outboundRouteId');
    }
    requestPath = requestPath.replace('{outboundRouteId}', outboundRouteId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update outbound route
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} outboundRouteId - Outbound route ID
  * @param {} body - OutboundRoute
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "site": {
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "primarySites": [],
      "secondarySites": [],
      "primaryEdges": [],
      "secondaryEdges": [],
      "addresses": [],
      "edges": [],
      "edgeAutoUpdateConfig": {},
      "location": {},
      "managed": true
   },
   "classificationTypes": [],
   "enabled": true,
   "distribution": "",
   "managed": true,
   "externalTrunkBases": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "site": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "primarySites": [],
      "secondarySites": [],
      "primaryEdges": [],
      "secondaryEdges": [],
      "addresses": [],
      "edges": [],
      "edgeAutoUpdateConfig": {},
      "location": {},
      "managed": true,
      "selfUri": ""
   },
   "classificationTypes": [],
   "enabled": true,
   "distribution": "",
   "managed": true,
   "externalTrunkBases": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesOutboundroutesOutboundrouteId = function putProvidersEdgesOutboundroutesOutboundrouteId(outboundRouteId, body){
    var requestPath = '/api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}';
    var requestQuery = {};
    var requestBody;

    if(outboundRouteId === undefined || outboundRouteId === null){
      throw new Error('Missing required  parameter: outboundRouteId');
    }
    requestPath = requestPath.replace('{outboundRouteId}', outboundRouteId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete Outbound Route
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} outboundRouteId - Outbound route ID
  */
TelephonyProvidersEdgeApi.prototype.deleteProvidersEdgesOutboundroutesOutboundrouteId = function deleteProvidersEdgesOutboundroutesOutboundrouteId(outboundRouteId){
    var requestPath = '/api/v2/telephony/providers/edges/outboundroutes/{outboundRouteId}';
    var requestQuery = {};
    var requestBody;

    if(outboundRouteId === undefined || outboundRouteId === null){
      throw new Error('Missing required  parameter: outboundRouteId');
    }
    requestPath = requestPath.replace('{outboundRouteId}', outboundRouteId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of Phone Base Settings objects
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageNumber - Page number
  * @param {integer} pageSize - Page size
  * @param {string} sortBy - Value by which to sort
  * @param {string} sortOrder - Sort order
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesPhonebasesettings = function getProvidersEdgesPhonebasesettings(pageNumber, pageSize, sortBy, sortOrder){
    var requestPath = '/api/v2/telephony/providers/edges/phonebasesettings';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageNumber"] = pageNumber;
    requestQuery["pageSize"] = pageSize;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a new Phone Base Settings object
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {} body - Phone base settings
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "phoneMetaBase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lines": [],
   "properties": {},
   "capabilities": {
      "provisions": true,
      "registers": true,
      "dualRegisters": true,
      "hardwareIdType": "",
      "allowReboot": true,
      "noRebalance": true
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "phoneMetaBase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lines": [],
   "properties": {},
   "capabilities": {
      "provisions": true,
      "registers": true,
      "dualRegisters": true,
      "hardwareIdType": "",
      "allowReboot": true,
      "noRebalance": true
   },
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesPhonebasesettings = function postProvidersEdgesPhonebasesettings(body){
    var requestPath = '/api/v2/telephony/providers/edges/phonebasesettings';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of available makes and models to create a new Phone Base Settings
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesPhonebasesettingsAvailablemetabases = function getProvidersEdgesPhonebasesettingsAvailablemetabases(pageSize, pageNumber){
    var requestPath = '/api/v2/telephony/providers/edges/phonebasesettings/availablemetabases';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Phone Base Settings instance template from a given make and model. This object can then be modified and saved as a new Phone Base Settings instance
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} phoneMetabaseId - The id of a metabase object upon which to base this Phone Base Settings
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "phoneMetaBase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lines": [],
   "properties": {},
   "capabilities": {
      "provisions": true,
      "registers": true,
      "dualRegisters": true,
      "hardwareIdType": "",
      "allowReboot": true,
      "noRebalance": true
   },
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesPhonebasesettingsTemplate = function getProvidersEdgesPhonebasesettingsTemplate(phoneMetabaseId){
    var requestPath = '/api/v2/telephony/providers/edges/phonebasesettings/template';
    var requestQuery = {};
    var requestBody;

    if(phoneMetabaseId === undefined || phoneMetabaseId === null){
      throw new Error('Missing required  parameter: phoneMetabaseId');
    }
    requestQuery["phoneMetabaseId"] = phoneMetabaseId;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Phone Base Settings object by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} phoneBaseId - Phone base ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "phoneMetaBase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lines": [],
   "properties": {},
   "capabilities": {
      "provisions": true,
      "registers": true,
      "dualRegisters": true,
      "hardwareIdType": "",
      "allowReboot": true,
      "noRebalance": true
   },
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesPhonebasesettingsPhonebaseId = function getProvidersEdgesPhonebasesettingsPhonebaseId(phoneBaseId){
    var requestPath = '/api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}';
    var requestQuery = {};
    var requestBody;

    if(phoneBaseId === undefined || phoneBaseId === null){
      throw new Error('Missing required  parameter: phoneBaseId');
    }
    requestPath = requestPath.replace('{phoneBaseId}', phoneBaseId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a Phone Base Settings by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} phoneBaseId - Phone base ID
  * @param {} body - Phone base settings
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "phoneMetaBase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lines": [],
   "properties": {},
   "capabilities": {
      "provisions": true,
      "registers": true,
      "dualRegisters": true,
      "hardwareIdType": "",
      "allowReboot": true,
      "noRebalance": true
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "phoneMetaBase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lines": [],
   "properties": {},
   "capabilities": {
      "provisions": true,
      "registers": true,
      "dualRegisters": true,
      "hardwareIdType": "",
      "allowReboot": true,
      "noRebalance": true
   },
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesPhonebasesettingsPhonebaseId = function putProvidersEdgesPhonebasesettingsPhonebaseId(phoneBaseId, body){
    var requestPath = '/api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}';
    var requestQuery = {};
    var requestBody;

    if(phoneBaseId === undefined || phoneBaseId === null){
      throw new Error('Missing required  parameter: phoneBaseId');
    }
    requestPath = requestPath.replace('{phoneBaseId}', phoneBaseId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a Phone Base Settings by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} phoneBaseId - Phone base ID
  */
TelephonyProvidersEdgeApi.prototype.deleteProvidersEdgesPhonebasesettingsPhonebaseId = function deleteProvidersEdgesPhonebasesettingsPhonebaseId(phoneBaseId){
    var requestPath = '/api/v2/telephony/providers/edges/phonebasesettings/{phoneBaseId}';
    var requestQuery = {};
    var requestBody;

    if(phoneBaseId === undefined || phoneBaseId === null){
      throw new Error('Missing required  parameter: phoneBaseId');
    }
    requestPath = requestPath.replace('{phoneBaseId}', phoneBaseId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of Phone Instances
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageNumber - Page number
  * @param {integer} pageSize - Page size
  * @param {string} sortBy - Value by which to sort
  * @param {string} sortOrder - Sort order
  * @param {string} siteid - Filter by site.id
  * @param {string} webRtcUserid - Filter by webRtcUser.id
  * @param {string} phoneBaseSettingsid - Filter by phoneBaseSettings.id
  * @param {string} linesloggedInUserid - Filter by lines.loggedInUser.id
  * @param {string} linesdefaultForUserid - Filter by lines.defaultForUser.id
  * @param {string} phone_hardwareId - Filter by phone_hardwareId
  * @param {string} linesid - Filter by lines.id
  * @param {string} linesname - Filter by lines.name
  * @param {array} expand - Fields to expand in the response, comma-separated Valid Values: properties, site, status, status.primaryEdgesStatus, status.secondaryEdgesStatus, phoneBaseSettings, lines
  * @param {array} fields - Fields and properties to get, comma-separated Valid Values: webRtcUser, properties.*, lines.loggedInUser, lines.defaultForUser
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesPhones = function getProvidersEdgesPhones(pageNumber, pageSize, sortBy, sortOrder, siteid, webRtcUserid, phoneBaseSettingsid, linesloggedInUserid, linesdefaultForUserid, phone_hardwareId, linesid, linesname, expand, fields){
    var requestPath = '/api/v2/telephony/providers/edges/phones';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageNumber"] = pageNumber;
    requestQuery["pageSize"] = pageSize;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    requestQuery["site.id"] = siteid;
    requestQuery["webRtcUser.id"] = webRtcUserid;
    requestQuery["phoneBaseSettings.id"] = phoneBaseSettingsid;
    requestQuery["lines.loggedInUser.id"] = linesloggedInUserid;
    requestQuery["lines.defaultForUser.id"] = linesdefaultForUserid;
    requestQuery["phone_hardwareId"] = phone_hardwareId;
    requestQuery["lines.id"] = linesid;
    requestQuery["lines.name"] = linesname;
    requestQuery["expand"] = expand;
    requestQuery["fields"] = fields;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a new Phone
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {} body - Phone
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "phoneBaseSettings": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lineBaseSettings": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "phoneMetaBase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lines": [],
   "status": {
      "name": "",
      "operationalStatus": "",
      "edgesStatus": "",
      "provision": {},
      "lineStatuses": [],
      "phoneAssignmentToEdgeType": "",
      "edge": {}
   },
   "secondaryStatus": {
      "name": "",
      "operationalStatus": "",
      "edgesStatus": "",
      "provision": {},
      "lineStatuses": [],
      "phoneAssignmentToEdgeType": "",
      "edge": {}
   },
   "properties": {},
   "capabilities": {
      "provisions": true,
      "registers": true,
      "dualRegisters": true,
      "hardwareIdType": "",
      "allowReboot": true,
      "noRebalance": true
   },
   "webRtcUser": {
      "id": "",
      "name": "",
      "selfUri": ""
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "phoneBaseSettings": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lineBaseSettings": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "phoneMetaBase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lines": [],
   "status": {
      "id": "",
      "name": "",
      "operationalStatus": "",
      "edgesStatus": "",
      "provision": {},
      "lineStatuses": [],
      "phoneAssignmentToEdgeType": "",
      "edge": {},
      "selfUri": ""
   },
   "secondaryStatus": {
      "id": "",
      "name": "",
      "operationalStatus": "",
      "edgesStatus": "",
      "provision": {},
      "lineStatuses": [],
      "phoneAssignmentToEdgeType": "",
      "edge": {},
      "selfUri": ""
   },
   "properties": {},
   "capabilities": {
      "provisions": true,
      "registers": true,
      "dualRegisters": true,
      "hardwareIdType": "",
      "allowReboot": true,
      "noRebalance": true
   },
   "webRtcUser": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesPhones = function postProvidersEdgesPhones(body){
    var requestPath = '/api/v2/telephony/providers/edges/phones';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Reboot Multiple Phones
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {} body - Phones
  * @example
  * Body Example:
  * {
   "phoneIds": [],
   "siteId": ""
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesPhonesReboot = function postProvidersEdgesPhonesReboot(body){
    var requestPath = '/api/v2/telephony/providers/edges/phones/reboot';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Phone instance template based on a Phone Base Settings object. This object can then be modified and saved as a new Phone instance
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} phoneBaseSettingsId - The id of a Phone Base Settings object upon which to base this Phone
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "phoneBaseSettings": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lineBaseSettings": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "phoneMetaBase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lines": [],
   "status": {
      "id": "",
      "name": "",
      "operationalStatus": "",
      "edgesStatus": "",
      "provision": {},
      "lineStatuses": [],
      "phoneAssignmentToEdgeType": "",
      "edge": {},
      "selfUri": ""
   },
   "secondaryStatus": {
      "id": "",
      "name": "",
      "operationalStatus": "",
      "edgesStatus": "",
      "provision": {},
      "lineStatuses": [],
      "phoneAssignmentToEdgeType": "",
      "edge": {},
      "selfUri": ""
   },
   "properties": {},
   "capabilities": {
      "provisions": true,
      "registers": true,
      "dualRegisters": true,
      "hardwareIdType": "",
      "allowReboot": true,
      "noRebalance": true
   },
   "webRtcUser": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesPhonesTemplate = function getProvidersEdgesPhonesTemplate(phoneBaseSettingsId){
    var requestPath = '/api/v2/telephony/providers/edges/phones/template';
    var requestQuery = {};
    var requestBody;

    if(phoneBaseSettingsId === undefined || phoneBaseSettingsId === null){
      throw new Error('Missing required  parameter: phoneBaseSettingsId');
    }
    requestQuery["phoneBaseSettingsId"] = phoneBaseSettingsId;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Phone by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} phoneId - Phone ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "phoneBaseSettings": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lineBaseSettings": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "phoneMetaBase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lines": [],
   "status": {
      "id": "",
      "name": "",
      "operationalStatus": "",
      "edgesStatus": "",
      "provision": {},
      "lineStatuses": [],
      "phoneAssignmentToEdgeType": "",
      "edge": {},
      "selfUri": ""
   },
   "secondaryStatus": {
      "id": "",
      "name": "",
      "operationalStatus": "",
      "edgesStatus": "",
      "provision": {},
      "lineStatuses": [],
      "phoneAssignmentToEdgeType": "",
      "edge": {},
      "selfUri": ""
   },
   "properties": {},
   "capabilities": {
      "provisions": true,
      "registers": true,
      "dualRegisters": true,
      "hardwareIdType": "",
      "allowReboot": true,
      "noRebalance": true
   },
   "webRtcUser": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesPhonesPhoneId = function getProvidersEdgesPhonesPhoneId(phoneId){
    var requestPath = '/api/v2/telephony/providers/edges/phones/{phoneId}';
    var requestQuery = {};
    var requestBody;

    if(phoneId === undefined || phoneId === null){
      throw new Error('Missing required  parameter: phoneId');
    }
    requestPath = requestPath.replace('{phoneId}', phoneId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a Phone by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} phoneId - Phone ID
  * @param {} body - Phone
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "phoneBaseSettings": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lineBaseSettings": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "phoneMetaBase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lines": [],
   "status": {
      "name": "",
      "operationalStatus": "",
      "edgesStatus": "",
      "provision": {},
      "lineStatuses": [],
      "phoneAssignmentToEdgeType": "",
      "edge": {}
   },
   "secondaryStatus": {
      "name": "",
      "operationalStatus": "",
      "edgesStatus": "",
      "provision": {},
      "lineStatuses": [],
      "phoneAssignmentToEdgeType": "",
      "edge": {}
   },
   "properties": {},
   "capabilities": {
      "provisions": true,
      "registers": true,
      "dualRegisters": true,
      "hardwareIdType": "",
      "allowReboot": true,
      "noRebalance": true
   },
   "webRtcUser": {
      "id": "",
      "name": "",
      "selfUri": ""
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "phoneBaseSettings": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lineBaseSettings": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "phoneMetaBase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "lines": [],
   "status": {
      "id": "",
      "name": "",
      "operationalStatus": "",
      "edgesStatus": "",
      "provision": {},
      "lineStatuses": [],
      "phoneAssignmentToEdgeType": "",
      "edge": {},
      "selfUri": ""
   },
   "secondaryStatus": {
      "id": "",
      "name": "",
      "operationalStatus": "",
      "edgesStatus": "",
      "provision": {},
      "lineStatuses": [],
      "phoneAssignmentToEdgeType": "",
      "edge": {},
      "selfUri": ""
   },
   "properties": {},
   "capabilities": {
      "provisions": true,
      "registers": true,
      "dualRegisters": true,
      "hardwareIdType": "",
      "allowReboot": true,
      "noRebalance": true
   },
   "webRtcUser": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesPhonesPhoneId = function putProvidersEdgesPhonesPhoneId(phoneId, body){
    var requestPath = '/api/v2/telephony/providers/edges/phones/{phoneId}';
    var requestQuery = {};
    var requestBody;

    if(phoneId === undefined || phoneId === null){
      throw new Error('Missing required  parameter: phoneId');
    }
    requestPath = requestPath.replace('{phoneId}', phoneId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a Phone by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} phoneId - Phone ID
  */
TelephonyProvidersEdgeApi.prototype.deleteProvidersEdgesPhonesPhoneId = function deleteProvidersEdgesPhonesPhoneId(phoneId){
    var requestPath = '/api/v2/telephony/providers/edges/phones/{phoneId}';
    var requestQuery = {};
    var requestBody;

    if(phoneId === undefined || phoneId === null){
      throw new Error('Missing required  parameter: phoneId');
    }
    requestPath = requestPath.replace('{phoneId}', phoneId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Reboot a Phone
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} phoneId - Phone Id
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesPhonesPhoneIdReboot = function postProvidersEdgesPhonesPhoneIdReboot(phoneId){
    var requestPath = '/api/v2/telephony/providers/edges/phones/{phoneId}/reboot';
    var requestQuery = {};
    var requestBody;

    if(phoneId === undefined || phoneId === null){
      throw new Error('Missing required  parameter: phoneId');
    }
    requestPath = requestPath.replace('{phoneId}', phoneId);
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of Sites.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortBy - Sort by
  * @param {string} sortOrder - Sort order
  * @param {string} name - Name
  * @param {string} locationid - Location Id
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesSites = function getProvidersEdgesSites(pageSize, pageNumber, sortBy, sortOrder, name, locationid){
    var requestPath = '/api/v2/telephony/providers/edges/sites';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    requestQuery["name"] = name;
    requestQuery["location.id"] = locationid;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a Site.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {} body - Site
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "primarySites": [],
   "secondarySites": [],
   "primaryEdges": [],
   "secondaryEdges": [],
   "addresses": [],
   "edges": [],
   "edgeAutoUpdateConfig": {
      "timeZone": "",
      "rrule": "",
      "start": "",
      "end": ""
   },
   "location": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "managed": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "primarySites": [],
   "secondarySites": [],
   "primaryEdges": [],
   "secondaryEdges": [],
   "addresses": [],
   "edges": [],
   "edgeAutoUpdateConfig": {
      "timeZone": "",
      "rrule": "",
      "start": "",
      "end": ""
   },
   "location": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "managed": true,
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesSites = function postProvidersEdgesSites(body){
    var requestPath = '/api/v2/telephony/providers/edges/sites';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Site by ID.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} siteId - Site ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "primarySites": [],
   "secondarySites": [],
   "primaryEdges": [],
   "secondaryEdges": [],
   "addresses": [],
   "edges": [],
   "edgeAutoUpdateConfig": {
      "timeZone": "",
      "rrule": "",
      "start": "",
      "end": ""
   },
   "location": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "managed": true,
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesSitesSiteId = function getProvidersEdgesSitesSiteId(siteId){
    var requestPath = '/api/v2/telephony/providers/edges/sites/{siteId}';
    var requestQuery = {};
    var requestBody;

    if(siteId === undefined || siteId === null){
      throw new Error('Missing required  parameter: siteId');
    }
    requestPath = requestPath.replace('{siteId}', siteId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a Site by ID.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} siteId - Site ID
  * @param {} body - Site
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "primarySites": [],
   "secondarySites": [],
   "primaryEdges": [],
   "secondaryEdges": [],
   "addresses": [],
   "edges": [],
   "edgeAutoUpdateConfig": {
      "timeZone": "",
      "rrule": "",
      "start": "",
      "end": ""
   },
   "location": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "managed": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "primarySites": [],
   "secondarySites": [],
   "primaryEdges": [],
   "secondaryEdges": [],
   "addresses": [],
   "edges": [],
   "edgeAutoUpdateConfig": {
      "timeZone": "",
      "rrule": "",
      "start": "",
      "end": ""
   },
   "location": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "managed": true,
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesSitesSiteId = function putProvidersEdgesSitesSiteId(siteId, body){
    var requestPath = '/api/v2/telephony/providers/edges/sites/{siteId}';
    var requestQuery = {};
    var requestBody;

    if(siteId === undefined || siteId === null){
      throw new Error('Missing required  parameter: siteId');
    }
    requestPath = requestPath.replace('{siteId}', siteId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a Site by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} siteId - Site ID
  */
TelephonyProvidersEdgeApi.prototype.deleteProvidersEdgesSitesSiteId = function deleteProvidersEdgesSitesSiteId(siteId){
    var requestPath = '/api/v2/telephony/providers/edges/sites/{siteId}';
    var requestQuery = {};
    var requestBody;

    if(siteId === undefined || siteId === null){
      throw new Error('Missing required  parameter: siteId');
    }
    requestPath = requestPath.replace('{siteId}', siteId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of Number Plans for this Site.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} siteId - Site ID
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "description": "",
  "version": 0,
  "dateCreated": "",
  "dateModified": "",
  "modifiedBy": "",
  "createdBy": "",
  "state": "",
  "modifiedByApp": "",
  "createdByApp": "",
  "match": "",
  "normalizedFormat": "",
  "priority": 0,
  "numbers": [],
  "digitLength": {
   "start": "",
   "end": ""
  },
  "classification": "",
  "matchType": "",
  "selfUri": ""
 }
]
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesSitesSiteIdNumberplans = function getProvidersEdgesSitesSiteIdNumberplans(siteId){
    var requestPath = '/api/v2/telephony/providers/edges/sites/{siteId}/numberplans';
    var requestQuery = {};
    var requestBody;

    if(siteId === undefined || siteId === null){
      throw new Error('Missing required  parameter: siteId');
    }
    requestPath = requestPath.replace('{siteId}', siteId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update the list of Number Plans.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} siteId - Site ID
  * @param {} body - List of number plans
  * @example
  * Body Example:
  * [
 {
  "name": "",
  "description": "",
  "version": 0,
  "dateCreated": "",
  "dateModified": "",
  "modifiedBy": "",
  "createdBy": "",
  "state": "",
  "modifiedByApp": "",
  "createdByApp": "",
  "match": "",
  "normalizedFormat": "",
  "priority": 0,
  "numbers": [],
  "digitLength": {
   "start": "",
   "end": ""
  },
  "classification": "",
  "matchType": ""
 }
]
  * @example
  * 200 Response Example:
  * [
 {
  "id": "",
  "name": "",
  "description": "",
  "version": 0,
  "dateCreated": "",
  "dateModified": "",
  "modifiedBy": "",
  "createdBy": "",
  "state": "",
  "modifiedByApp": "",
  "createdByApp": "",
  "match": "",
  "normalizedFormat": "",
  "priority": 0,
  "numbers": [],
  "digitLength": {
   "start": "",
   "end": ""
  },
  "classification": "",
  "matchType": "",
  "selfUri": ""
 }
]
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesSitesSiteIdNumberplans = function putProvidersEdgesSitesSiteIdNumberplans(siteId, body){
    var requestPath = '/api/v2/telephony/providers/edges/sites/{siteId}/numberplans';
    var requestQuery = {};
    var requestBody;

    if(siteId === undefined || siteId === null){
      throw new Error('Missing required  parameter: siteId');
    }
    requestPath = requestPath.replace('{siteId}', siteId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of Classifications for this Site
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} siteId - Site ID
  * @param {string} classification - Classification
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesSitesSiteIdNumberplansClassifications = function getProvidersEdgesSitesSiteIdNumberplansClassifications(siteId, classification){
    var requestPath = '/api/v2/telephony/providers/edges/sites/{siteId}/numberplans/classifications';
    var requestQuery = {};
    var requestBody;

    if(siteId === undefined || siteId === null){
      throw new Error('Missing required  parameter: siteId');
    }
    requestPath = requestPath.replace('{siteId}', siteId);
    requestQuery["classification"] = classification;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Number Plan by ID.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} siteId - Site ID
  * @param {string} numberPlanId - Number Plan ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "match": "",
   "normalizedFormat": "",
   "priority": 0,
   "numbers": [],
   "digitLength": {
      "start": "",
      "end": ""
   },
   "classification": "",
   "matchType": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesSitesSiteIdNumberplansNumberplanId = function getProvidersEdgesSitesSiteIdNumberplansNumberplanId(siteId, numberPlanId){
    var requestPath = '/api/v2/telephony/providers/edges/sites/{siteId}/numberplans/{numberPlanId}';
    var requestQuery = {};
    var requestBody;

    if(siteId === undefined || siteId === null){
      throw new Error('Missing required  parameter: siteId');
    }
    requestPath = requestPath.replace('{siteId}', siteId);
    if(numberPlanId === undefined || numberPlanId === null){
      throw new Error('Missing required  parameter: numberPlanId');
    }
    requestPath = requestPath.replace('{numberPlanId}', numberPlanId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Triggers the rebalance operation.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} siteId - Site ID
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesSitesSiteIdRebalance = function postProvidersEdgesSitesSiteIdRebalance(siteId){
    var requestPath = '/api/v2/telephony/providers/edges/sites/{siteId}/rebalance';
    var requestQuery = {};
    var requestBody;

    if(siteId === undefined || siteId === null){
      throw new Error('Missing required  parameter: siteId');
    }
    requestPath = requestPath.replace('{siteId}', siteId);
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of Edge-compatible time zones
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesTimezones = function getProvidersEdgesTimezones(pageSize, pageNumber){
    var requestPath = '/api/v2/telephony/providers/edges/timezones';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get Trunk Base Settings listing
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageNumber - Page number
  * @param {integer} pageSize - Page size
  * @param {string} sortBy - Value by which to sort
  * @param {string} sortOrder - Sort order
  * @param {boolean} recordingEnabled - Filter trunks by recording enabled
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "trunkMetabase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "properties": {},
   "trunkType": "",
   "managed": true,
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesTrunkbasesettings = function getProvidersEdgesTrunkbasesettings(pageNumber, pageSize, sortBy, sortOrder, recordingEnabled){
    var requestPath = '/api/v2/telephony/providers/edges/trunkbasesettings';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageNumber"] = pageNumber;
    requestQuery["pageSize"] = pageSize;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    requestQuery["recordingEnabled"] = recordingEnabled;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a Trunk Base Settings object
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {} body - Trunk base settings
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "trunkMetabase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "properties": {},
   "trunkType": "",
   "managed": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "trunkMetabase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "properties": {},
   "trunkType": "",
   "managed": true,
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesTrunkbasesettings = function postProvidersEdgesTrunkbasesettings(body){
    var requestPath = '/api/v2/telephony/providers/edges/trunkbasesettings';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a list of available makes and models to create a new Trunk Base Settings
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} type - 
  EXTERNAL,
  PHONE,
  EDGE,
  * @param {integer} pageSize - 
  * @param {integer} pageNumber - 
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesTrunkbasesettingsAvailablemetabases = function getProvidersEdgesTrunkbasesettingsAvailablemetabases(type, pageSize, pageNumber){
    var requestPath = '/api/v2/telephony/providers/edges/trunkbasesettings/availablemetabases';
    var requestQuery = {};
    var requestBody;

    requestQuery["type"] = type;
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Trunk Base Settings instance template from a given make and model. This object can then be modified and saved as a new Trunk Base Settings instance
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} trunkMetabaseId - The id of a metabase object upon which to base this Trunk Base Settings
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "trunkMetabase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "properties": {},
   "trunkType": "",
   "managed": true,
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesTrunkbasesettingsTemplate = function getProvidersEdgesTrunkbasesettingsTemplate(trunkMetabaseId){
    var requestPath = '/api/v2/telephony/providers/edges/trunkbasesettings/template';
    var requestQuery = {};
    var requestBody;

    if(trunkMetabaseId === undefined || trunkMetabaseId === null){
      throw new Error('Missing required  parameter: trunkMetabaseId');
    }
    requestQuery["trunkMetabaseId"] = trunkMetabaseId;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Trunk Base Settings object by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} trunkBaseSettingsId - Trunk Base ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "trunkMetabase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "properties": {},
   "trunkType": "",
   "managed": true,
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesTrunkbasesettingsTrunkbasesettingsId = function getProvidersEdgesTrunkbasesettingsTrunkbasesettingsId(trunkBaseSettingsId){
    var requestPath = '/api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}';
    var requestQuery = {};
    var requestBody;

    if(trunkBaseSettingsId === undefined || trunkBaseSettingsId === null){
      throw new Error('Missing required  parameter: trunkBaseSettingsId');
    }
    requestPath = requestPath.replace('{trunkBaseSettingsId}', trunkBaseSettingsId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a Trunk Base Settings object by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} trunkBaseSettingsId - Trunk Base ID
  * @param {} body - Trunk base settings
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "trunkMetabase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "properties": {},
   "trunkType": "",
   "managed": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "trunkMetabase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "properties": {},
   "trunkType": "",
   "managed": true,
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesTrunkbasesettingsTrunkbasesettingsId = function putProvidersEdgesTrunkbasesettingsTrunkbasesettingsId(trunkBaseSettingsId, body){
    var requestPath = '/api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}';
    var requestQuery = {};
    var requestBody;

    if(trunkBaseSettingsId === undefined || trunkBaseSettingsId === null){
      throw new Error('Missing required  parameter: trunkBaseSettingsId');
    }
    requestPath = requestPath.replace('{trunkBaseSettingsId}', trunkBaseSettingsId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a Trunk Base Settings object by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} trunkBaseSettingsId - Trunk Base ID
  */
TelephonyProvidersEdgeApi.prototype.deleteProvidersEdgesTrunkbasesettingsTrunkbasesettingsId = function deleteProvidersEdgesTrunkbasesettingsTrunkbasesettingsId(trunkBaseSettingsId){
    var requestPath = '/api/v2/telephony/providers/edges/trunkbasesettings/{trunkBaseSettingsId}';
    var requestQuery = {};
    var requestBody;

    if(trunkBaseSettingsId === undefined || trunkBaseSettingsId === null){
      throw new Error('Missing required  parameter: trunkBaseSettingsId');
    }
    requestPath = requestPath.replace('{trunkBaseSettingsId}', trunkBaseSettingsId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of available trunks.
  * @description Trunks are created by assigning trunk base settings to an Edge or Edge Group.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {integer} pageNumber - Page number
  * @param {integer} pageSize - Page size
  * @param {string} sortBy - Value by which to sort
  * @param {string} sortOrder - Sort order
  * @param {string} edgeid - Filter by Edge Ids
  * @param {string} trunkBaseid - Filter by Trunk Base Ids
  * @param {string} trunkType - Filter by a Trunk type
  EXTERNAL,
  PHONE,
  EDGE,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesTrunks = function getProvidersEdgesTrunks(pageNumber, pageSize, sortBy, sortOrder, edgeid, trunkBaseid, trunkType){
    var requestPath = '/api/v2/telephony/providers/edges/trunks';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageNumber"] = pageNumber;
    requestQuery["pageSize"] = pageSize;
    requestQuery["sortBy"] = sortBy;
    requestQuery["sortOrder"] = sortOrder;
    requestQuery["edge.id"] = edgeid;
    requestQuery["trunkBase.id"] = trunkBaseid;
    requestQuery["trunkType"] = trunkType;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a Trunk by ID
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} trunkId - Trunk ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "trunkType": "",
   "edge": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "trunkBase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "trunkMetabase": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "edgeGroup": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "enabled": true,
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesTrunksTrunkId = function getProvidersEdgesTrunksTrunkId(trunkId){
    var requestPath = '/api/v2/telephony/providers/edges/trunks/{trunkId}';
    var requestQuery = {};
    var requestBody;

    if(trunkId === undefined || trunkId === null){
      throw new Error('Missing required  parameter: trunkId');
    }
    requestPath = requestPath.replace('{trunkId}', trunkId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get Counts of trunks that have recording disabled or enabled
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} trunkType - The type of this trunk base.
  EXTERNAL,
  PHONE,
  EDGE,
  * @example
  * 200 Response Example:
  * {
   "enabledCount": 0,
   "disabledCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesTrunkswithrecording = function getProvidersEdgesTrunkswithrecording(trunkType){
    var requestPath = '/api/v2/telephony/providers/edges/trunkswithrecording';
    var requestQuery = {};
    var requestBody;

    requestQuery["trunkType"] = trunkType;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get edge.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "interfaces": [],
   "make": "",
   "model": "",
   "apiVersion": "",
   "softwareVersion": "",
   "softwareVersionTimestamp": "",
   "softwareVersionPlatform": "",
   "softwareVersionConfiguration": "",
   "fullSoftwareVersion": "",
   "pairingId": "",
   "fingerprint": "",
   "fingerprintHint": "",
   "currentVersion": "",
   "stagedVersion": "",
   "patch": "",
   "statusCode": "",
   "edgeGroup": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "managed": true,
      "edgeTrunkBaseAssignment": {},
      "phoneTrunkBases": [],
      "selfUri": ""
   },
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "softwareStatus": {
      "version": {},
      "maxDownloadRate": 0,
      "downloadStartTime": "",
      "executeStartTime": "",
      "executeStopTime": "",
      "executeOnIdle": true,
      "status": "",
      "edgeUri": "",
      "current": true
   },
   "onlineStatus": "",
   "serialNumber": "",
   "physicalEdge": true,
   "managed": true,
   "edgeDeploymentType": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEdgeId = function getProvidersEdgesEdgeId(edgeId){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a edge.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @param {} body - Edge
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "interfaces": [],
   "make": "",
   "model": "",
   "apiVersion": "",
   "softwareVersion": "",
   "softwareVersionTimestamp": "",
   "softwareVersionPlatform": "",
   "softwareVersionConfiguration": "",
   "fullSoftwareVersion": "",
   "pairingId": "",
   "fingerprint": "",
   "fingerprintHint": "",
   "currentVersion": "",
   "stagedVersion": "",
   "patch": "",
   "statusCode": "",
   "edgeGroup": {
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "managed": true,
      "edgeTrunkBaseAssignment": {},
      "phoneTrunkBases": []
   },
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "softwareStatus": {
      "version": {},
      "maxDownloadRate": 0,
      "downloadStartTime": "",
      "executeStartTime": "",
      "executeStopTime": "",
      "executeOnIdle": true,
      "status": "",
      "edgeUri": "",
      "current": true
   },
   "onlineStatus": "",
   "serialNumber": "",
   "physicalEdge": true,
   "managed": true,
   "edgeDeploymentType": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "interfaces": [],
   "make": "",
   "model": "",
   "apiVersion": "",
   "softwareVersion": "",
   "softwareVersionTimestamp": "",
   "softwareVersionPlatform": "",
   "softwareVersionConfiguration": "",
   "fullSoftwareVersion": "",
   "pairingId": "",
   "fingerprint": "",
   "fingerprintHint": "",
   "currentVersion": "",
   "stagedVersion": "",
   "patch": "",
   "statusCode": "",
   "edgeGroup": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "managed": true,
      "edgeTrunkBaseAssignment": {},
      "phoneTrunkBases": [],
      "selfUri": ""
   },
   "site": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "softwareStatus": {
      "version": {},
      "maxDownloadRate": 0,
      "downloadStartTime": "",
      "executeStartTime": "",
      "executeStopTime": "",
      "executeOnIdle": true,
      "status": "",
      "edgeUri": "",
      "current": true
   },
   "onlineStatus": "",
   "serialNumber": "",
   "physicalEdge": true,
   "managed": true,
   "edgeDeploymentType": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesEdgeId = function putProvidersEdgesEdgeId(edgeId, body){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a edge.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  */
TelephonyProvidersEdgeApi.prototype.deleteProvidersEdgesEdgeId = function deleteProvidersEdgesEdgeId(edgeId){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of lines.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEdgeIdLines = function getProvidersEdgesEdgeIdLines(edgeId, pageSize, pageNumber){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/lines';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get line
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @param {string} lineId - Line ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "schema": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "properties": {},
   "edge": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "interfaces": [],
      "make": "",
      "model": "",
      "apiVersion": "",
      "softwareVersion": "",
      "softwareVersionTimestamp": "",
      "softwareVersionPlatform": "",
      "softwareVersionConfiguration": "",
      "fullSoftwareVersion": "",
      "pairingId": "",
      "fingerprint": "",
      "fingerprintHint": "",
      "currentVersion": "",
      "stagedVersion": "",
      "patch": "",
      "statusCode": "",
      "edgeGroup": {},
      "site": {},
      "softwareStatus": {},
      "onlineStatus": "",
      "serialNumber": "",
      "physicalEdge": true,
      "managed": true,
      "edgeDeploymentType": "",
      "selfUri": ""
   },
   "edgeGroup": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "managed": true,
      "edgeTrunkBaseAssignment": {},
      "phoneTrunkBases": [],
      "selfUri": ""
   },
   "lineType": "",
   "endpoint": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "count": 0,
      "properties": {},
      "schema": {},
      "enabled": true,
      "site": {},
      "dids": [],
      "selfUri": ""
   },
   "ipAddress": "",
   "logicalInterfaceId": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEdgeIdLinesLineId = function getProvidersEdgesEdgeIdLinesLineId(edgeId, lineId){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/lines/{lineId}';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    if(lineId === undefined || lineId === null){
      throw new Error('Missing required  parameter: lineId');
    }
    requestPath = requestPath.replace('{lineId}', lineId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a line.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @param {string} lineId - Line ID
  * @param {} body - Line
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "schema": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "properties": {},
   "edge": {
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "interfaces": [],
      "make": "",
      "model": "",
      "apiVersion": "",
      "softwareVersion": "",
      "softwareVersionTimestamp": "",
      "softwareVersionPlatform": "",
      "softwareVersionConfiguration": "",
      "fullSoftwareVersion": "",
      "pairingId": "",
      "fingerprint": "",
      "fingerprintHint": "",
      "currentVersion": "",
      "stagedVersion": "",
      "patch": "",
      "statusCode": "",
      "edgeGroup": {},
      "site": {},
      "softwareStatus": {},
      "onlineStatus": "",
      "serialNumber": "",
      "physicalEdge": true,
      "managed": true,
      "edgeDeploymentType": ""
   },
   "edgeGroup": {
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "managed": true,
      "edgeTrunkBaseAssignment": {},
      "phoneTrunkBases": []
   },
   "lineType": "",
   "endpoint": {
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "count": 0,
      "properties": {},
      "schema": {},
      "enabled": true,
      "site": {},
      "dids": []
   },
   "ipAddress": "",
   "logicalInterfaceId": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "schema": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "properties": {},
   "edge": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "interfaces": [],
      "make": "",
      "model": "",
      "apiVersion": "",
      "softwareVersion": "",
      "softwareVersionTimestamp": "",
      "softwareVersionPlatform": "",
      "softwareVersionConfiguration": "",
      "fullSoftwareVersion": "",
      "pairingId": "",
      "fingerprint": "",
      "fingerprintHint": "",
      "currentVersion": "",
      "stagedVersion": "",
      "patch": "",
      "statusCode": "",
      "edgeGroup": {},
      "site": {},
      "softwareStatus": {},
      "onlineStatus": "",
      "serialNumber": "",
      "physicalEdge": true,
      "managed": true,
      "edgeDeploymentType": "",
      "selfUri": ""
   },
   "edgeGroup": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "managed": true,
      "edgeTrunkBaseAssignment": {},
      "phoneTrunkBases": [],
      "selfUri": ""
   },
   "lineType": "",
   "endpoint": {
      "id": "",
      "name": "",
      "description": "",
      "version": 0,
      "dateCreated": "",
      "dateModified": "",
      "modifiedBy": "",
      "createdBy": "",
      "state": "",
      "modifiedByApp": "",
      "createdByApp": "",
      "count": 0,
      "properties": {},
      "schema": {},
      "enabled": true,
      "site": {},
      "dids": [],
      "selfUri": ""
   },
   "ipAddress": "",
   "logicalInterfaceId": "",
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesEdgeIdLinesLineId = function putProvidersEdgesEdgeIdLinesLineId(edgeId, lineId, body){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/lines/{lineId}';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    if(lineId === undefined || lineId === null){
      throw new Error('Missing required  parameter: lineId');
    }
    requestPath = requestPath.replace('{lineId}', lineId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get edge logical interfaces.
  * @description Retrieve a list of all configured logical interfaces from a specific edge.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @param {array} expand - Field to expand in the response Valid Values: externalTrunkBaseAssignments, phoneTrunkBaseAssignments
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEdgeIdLogicalinterfaces = function getProvidersEdgesEdgeIdLogicalinterfaces(edgeId, expand){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create an edge logical interface.
  * @description Create
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @param {} body - Logical interface
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "edgeUri": "",
   "edgeAssignedId": "",
   "friendlyName": "",
   "vlanTagId": 0,
   "hardwareAddress": "",
   "physicalAdapterId": "",
   "ifStatus": "",
   "routes": [],
   "addresses": [],
   "ipv4Capabilities": {
      "enabled": true,
      "dhcp": true,
      "metric": 0,
      "autoMetric": true
   },
   "ipv6Capabilities": {
      "enabled": true,
      "dhcp": true,
      "metric": 0,
      "autoMetric": true
   },
   "currentState": "",
   "lastModifiedUserId": "",
   "lastModifiedCorrelationId": "",
   "commandResponses": [],
   "inheritPhoneTrunkBasesIPv4": true,
   "inheritPhoneTrunkBasesIPv6": true,
   "useForInternalEdgeCommunication": true,
   "externalTrunkBaseAssignments": [],
   "phoneTrunkBaseAssignments": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "edgeUri": "",
   "edgeAssignedId": "",
   "friendlyName": "",
   "vlanTagId": 0,
   "hardwareAddress": "",
   "physicalAdapterId": "",
   "ifStatus": "",
   "interfaceType": "",
   "routes": [],
   "addresses": [],
   "ipv4Capabilities": {
      "enabled": true,
      "dhcp": true,
      "metric": 0,
      "autoMetric": true,
      "supportsMetric": true
   },
   "ipv6Capabilities": {
      "enabled": true,
      "dhcp": true,
      "metric": 0,
      "autoMetric": true,
      "supportsMetric": true
   },
   "currentState": "",
   "lastModifiedUserId": "",
   "lastModifiedCorrelationId": "",
   "commandResponses": [],
   "inheritPhoneTrunkBasesIPv4": true,
   "inheritPhoneTrunkBasesIPv6": true,
   "useForInternalEdgeCommunication": true,
   "externalTrunkBaseAssignments": [],
   "phoneTrunkBaseAssignments": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesEdgeIdLogicalinterfaces = function postProvidersEdgesEdgeIdLogicalinterfaces(edgeId, body){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get an edge logical interface
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @param {string} interfaceId - Interface ID
  * @param {array} expand - Field to expand in the response Valid Values: externalTrunkBaseAssignments, phoneTrunkBaseAssignments
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "edgeUri": "",
   "edgeAssignedId": "",
   "friendlyName": "",
   "vlanTagId": 0,
   "hardwareAddress": "",
   "physicalAdapterId": "",
   "ifStatus": "",
   "interfaceType": "",
   "routes": [],
   "addresses": [],
   "ipv4Capabilities": {
      "enabled": true,
      "dhcp": true,
      "metric": 0,
      "autoMetric": true,
      "supportsMetric": true
   },
   "ipv6Capabilities": {
      "enabled": true,
      "dhcp": true,
      "metric": 0,
      "autoMetric": true,
      "supportsMetric": true
   },
   "currentState": "",
   "lastModifiedUserId": "",
   "lastModifiedCorrelationId": "",
   "commandResponses": [],
   "inheritPhoneTrunkBasesIPv4": true,
   "inheritPhoneTrunkBasesIPv6": true,
   "useForInternalEdgeCommunication": true,
   "externalTrunkBaseAssignments": [],
   "phoneTrunkBaseAssignments": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEdgeIdLogicalinterfacesInterfaceId = function getProvidersEdgesEdgeIdLogicalinterfacesInterfaceId(edgeId, interfaceId, expand){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    if(interfaceId === undefined || interfaceId === null){
      throw new Error('Missing required  parameter: interfaceId');
    }
    requestPath = requestPath.replace('{interfaceId}', interfaceId);
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an edge logical interface.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @param {string} interfaceId - Interface ID
  * @param {} body - Logical interface
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "edgeUri": "",
   "edgeAssignedId": "",
   "friendlyName": "",
   "vlanTagId": 0,
   "hardwareAddress": "",
   "physicalAdapterId": "",
   "ifStatus": "",
   "routes": [],
   "addresses": [],
   "ipv4Capabilities": {
      "enabled": true,
      "dhcp": true,
      "metric": 0,
      "autoMetric": true
   },
   "ipv6Capabilities": {
      "enabled": true,
      "dhcp": true,
      "metric": 0,
      "autoMetric": true
   },
   "currentState": "",
   "lastModifiedUserId": "",
   "lastModifiedCorrelationId": "",
   "commandResponses": [],
   "inheritPhoneTrunkBasesIPv4": true,
   "inheritPhoneTrunkBasesIPv6": true,
   "useForInternalEdgeCommunication": true,
   "externalTrunkBaseAssignments": [],
   "phoneTrunkBaseAssignments": []
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "edgeUri": "",
   "edgeAssignedId": "",
   "friendlyName": "",
   "vlanTagId": 0,
   "hardwareAddress": "",
   "physicalAdapterId": "",
   "ifStatus": "",
   "interfaceType": "",
   "routes": [],
   "addresses": [],
   "ipv4Capabilities": {
      "enabled": true,
      "dhcp": true,
      "metric": 0,
      "autoMetric": true,
      "supportsMetric": true
   },
   "ipv6Capabilities": {
      "enabled": true,
      "dhcp": true,
      "metric": 0,
      "autoMetric": true,
      "supportsMetric": true
   },
   "currentState": "",
   "lastModifiedUserId": "",
   "lastModifiedCorrelationId": "",
   "commandResponses": [],
   "inheritPhoneTrunkBasesIPv4": true,
   "inheritPhoneTrunkBasesIPv6": true,
   "useForInternalEdgeCommunication": true,
   "externalTrunkBaseAssignments": [],
   "phoneTrunkBaseAssignments": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.putProvidersEdgesEdgeIdLogicalinterfacesInterfaceId = function putProvidersEdgesEdgeIdLogicalinterfacesInterfaceId(edgeId, interfaceId, body){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    if(interfaceId === undefined || interfaceId === null){
      throw new Error('Missing required  parameter: interfaceId');
    }
    requestPath = requestPath.replace('{interfaceId}', interfaceId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete an edge logical interface
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @param {string} interfaceId - Interface ID
  */
TelephonyProvidersEdgeApi.prototype.deleteProvidersEdgesEdgeIdLogicalinterfacesInterfaceId = function deleteProvidersEdgesEdgeIdLogicalinterfacesInterfaceId(edgeId, interfaceId){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/logicalinterfaces/{interfaceId}';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    if(interfaceId === undefined || interfaceId === null){
      throw new Error('Missing required  parameter: interfaceId');
    }
    requestPath = requestPath.replace('{interfaceId}', interfaceId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create a job to upload a list of Edge logs.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @param {} body - EdgeLogsJobRequest
  * @example
  * Body Example:
  * {
   "path": "",
   "query": "",
   "recurse": true
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesEdgeIdLogsJobs = function postProvidersEdgesEdgeIdLogsJobs(edgeId, body){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/logs/jobs';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get an Edge logs job.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @param {string} jobId - Job ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "files": [],
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEdgeIdLogsJobsJobId = function getProvidersEdgesEdgeIdLogsJobsJobId(edgeId, jobId){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/logs/jobs/{jobId}';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    if(jobId === undefined || jobId === null){
      throw new Error('Missing required  parameter: jobId');
    }
    requestPath = requestPath.replace('{jobId}', jobId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Request that the specified fileIds be uploaded from the Edge.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @param {string} jobId - Job ID
  * @param {} body - Log upload request
  * @example
  * Body Example:
  * {
   "fileIds": []
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesEdgeIdLogsJobsJobIdUpload = function postProvidersEdgesEdgeIdLogsJobsJobIdUpload(edgeId, jobId, body){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/logs/jobs/{jobId}/upload';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    if(jobId === undefined || jobId === null){
      throw new Error('Missing required  parameter: jobId');
    }
    requestPath = requestPath.replace('{jobId}', jobId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Retrieve a list of all configured physical interfaces from a specific edge.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEdgeIdPhysicalinterfaces = function getProvidersEdgesEdgeIdPhysicalinterfaces(edgeId){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/physicalinterfaces';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get edge physical interface.
  * @description Retrieve a physical interface from a specific edge.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @param {string} interfaceId - Interface ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "edgeUri": "",
   "friendlyName": "",
   "hardwareAddress": "",
   "portLabel": "",
   "physicalCapabilities": {
      "vlan": true,
      "team": true
   },
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEdgeIdPhysicalinterfacesInterfaceId = function getProvidersEdgesEdgeIdPhysicalinterfacesInterfaceId(edgeId, interfaceId){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/physicalinterfaces/{interfaceId}';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    if(interfaceId === undefined || interfaceId === null){
      throw new Error('Missing required  parameter: interfaceId');
    }
    requestPath = requestPath.replace('{interfaceId}', interfaceId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Reboot an Edge
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesEdgeIdReboot = function postProvidersEdgesEdgeIdReboot(edgeId){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/reboot';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the setup package for a locally deployed edge device. This is needed to complete the setup process for the virtual edge.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @example
  * 200 Response Example:
  * {
   "meta-data": {
      "pairing-token": "",
      "pairing-trust": [],
      "pairing-url": ""
   },
   "edge-id": "",
   "auth-token": "",
   "org-id": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEdgeIdSetuppackage = function getProvidersEdgesEdgeIdSetuppackage(edgeId){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/setuppackage';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Gets software update status information about any edge.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @example
  * 200 Response Example:
  * {
   "version": {
      "id": "",
      "name": "",
      "edgeVersion": "",
      "publishDate": "",
      "edgeUri": "",
      "latestRelease": true,
      "current": true,
      "selfUri": ""
   },
   "maxDownloadRate": 0,
   "downloadStartTime": "",
   "executeStartTime": "",
   "executeStopTime": "",
   "executeOnIdle": true,
   "status": "",
   "edgeUri": "",
   "current": true
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEdgeIdSoftwareupdate = function getProvidersEdgesEdgeIdSoftwareupdate(edgeId){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/softwareupdate';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Starts a software update for this edge.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @param {} body - Software update request
  * @example
  * Body Example:
  * {
   "version": {
      "name": "",
      "edgeVersion": "",
      "publishDate": "",
      "edgeUri": "",
      "latestRelease": true,
      "current": true
   },
   "maxDownloadRate": 0,
   "downloadStartTime": "",
   "executeStartTime": "",
   "executeStopTime": "",
   "executeOnIdle": true,
   "status": "",
   "edgeUri": "",
   "current": true
}
  * @example
  * 200 Response Example:
  * {
   "version": {
      "id": "",
      "name": "",
      "edgeVersion": "",
      "publishDate": "",
      "edgeUri": "",
      "latestRelease": true,
      "current": true,
      "selfUri": ""
   },
   "maxDownloadRate": 0,
   "downloadStartTime": "",
   "executeStartTime": "",
   "executeStopTime": "",
   "executeOnIdle": true,
   "status": "",
   "edgeUri": "",
   "current": true
}
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesEdgeIdSoftwareupdate = function postProvidersEdgesEdgeIdSoftwareupdate(edgeId, body){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/softwareupdate';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Cancels any in-progress update for this edge.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  */
TelephonyProvidersEdgeApi.prototype.deleteProvidersEdgesEdgeIdSoftwareupdate = function deleteProvidersEdgesEdgeIdSoftwareupdate(edgeId){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/softwareupdate';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Gets all the available software versions for this edge.
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "edgeVersion": "",
   "publishDate": "",
   "edgeUri": "",
   "latestRelease": true,
   "current": true,
   "selfUri": ""
}
  */
TelephonyProvidersEdgeApi.prototype.getProvidersEdgesEdgeIdSoftwareversions = function getProvidersEdgesEdgeIdSoftwareversions(edgeId){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/softwareversions';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Unpair an Edge
  * @memberOf TelephonyProvidersEdgeApi
  * @instance
  * @param {string} edgeId - Edge Id
  */
TelephonyProvidersEdgeApi.prototype.postProvidersEdgesEdgeIdUnpair = function postProvidersEdgesEdgeIdUnpair(edgeId){
    var requestPath = '/api/v2/telephony/providers/edges/{edgeId}/unpair';
    var requestQuery = {};
    var requestBody;

    if(edgeId === undefined || edgeId === null){
      throw new Error('Missing required  parameter: edgeId');
    }
    requestPath = requestPath.replace('{edgeId}', edgeId);
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};


module.exports = TelephonyProvidersEdgeApi;

},{}],29:[function(require,module,exports){
/**
* @class TokensApi
* @example
* var api = new purecloud.platform.TokensApi(pureCloudSession);
*/
function TokensApi(session) {
    if(!(this instanceof TokensApi)) {
        return new TokensApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('TokensApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Delete  auth token used to make the request.
  * @memberOf TokensApi
  * @instance
  */
TokensApi.prototype.deleteMe = function deleteMe(){
    var requestPath = '/api/v2/tokens/me';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};


module.exports = TokensApi;

},{}],30:[function(require,module,exports){
/**
* @class UserRecordingsApi
* @example
* var api = new purecloud.platform.UserRecordingsApi(pureCloudSession);
*/
function UserRecordingsApi(session) {
    if(!(this instanceof UserRecordingsApi)) {
        return new UserRecordingsApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('UserRecordingsApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get a list of user recordings.
  * @memberOf UserRecordingsApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} expand - conversation
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
UserRecordingsApi.prototype.getUserrecordings = function getUserrecordings(pageSize, pageNumber, expand){
    var requestPath = '/api/v2/userrecordings';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get user recording summary
  * @memberOf UserRecordingsApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "readCount": 0,
   "unreadCount": 0,
   "totalCount": 0
}
  */
UserRecordingsApi.prototype.getSummary = function getSummary(){
    var requestPath = '/api/v2/userrecordings/summary';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a user recording.
  * @memberOf UserRecordingsApi
  * @instance
  * @param {string} recordingId - User Recording ID
  * @param {string} expand - conversation
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "contentUri": "",
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "createdBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "conversation": {
      "id": "",
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": "",
      "selfUri": ""
   },
   "contentLength": 0,
   "durationMilliseconds": 0,
   "thumbnails": [],
   "read": true,
   "selfUri": ""
}
  */
UserRecordingsApi.prototype.getRecordingId = function getRecordingId(recordingId, expand){
    var requestPath = '/api/v2/userrecordings/{recordingId}';
    var requestQuery = {};
    var requestBody;

    if(recordingId === undefined || recordingId === null){
      throw new Error('Missing required  parameter: recordingId');
    }
    requestPath = requestPath.replace('{recordingId}', recordingId);
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a user recording.
  * @memberOf UserRecordingsApi
  * @instance
  * @param {string} recordingId - User Recording ID
  * @param {} body - UserRecording
  * @param {string} expand - conversation
  * @example
  * Body Example:
  * {
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "contentUri": "",
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "createdBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "conversation": {
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": ""
   },
   "contentLength": 0,
   "durationMilliseconds": 0,
   "thumbnails": [],
   "read": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "dateCreated": "",
   "dateModified": "",
   "contentUri": "",
   "workspace": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "createdBy": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "conversation": {
      "id": "",
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": "",
      "selfUri": ""
   },
   "contentLength": 0,
   "durationMilliseconds": 0,
   "thumbnails": [],
   "read": true,
   "selfUri": ""
}
  */
UserRecordingsApi.prototype.putRecordingId = function putRecordingId(recordingId, body, expand){
    var requestPath = '/api/v2/userrecordings/{recordingId}';
    var requestQuery = {};
    var requestBody;

    if(recordingId === undefined || recordingId === null){
      throw new Error('Missing required  parameter: recordingId');
    }
    requestPath = requestPath.replace('{recordingId}', recordingId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    requestQuery["expand"] = expand;
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a user recording.
  * @memberOf UserRecordingsApi
  * @instance
  * @param {string} recordingId - User Recording ID
  */
UserRecordingsApi.prototype.deleteRecordingId = function deleteRecordingId(recordingId){
    var requestPath = '/api/v2/userrecordings/{recordingId}';
    var requestQuery = {};
    var requestBody;

    if(recordingId === undefined || recordingId === null){
      throw new Error('Missing required  parameter: recordingId');
    }
    requestPath = requestPath.replace('{recordingId}', recordingId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Download a user recording.
  * @memberOf UserRecordingsApi
  * @instance
  * @param {string} recordingId - User Recording ID
  * @param {string} formatId - The desired media format.
  WAV,
  WEBM,
  WAV_ULAW,
  OGG_VORBIS,
  OGG_OPUS,
  NONE,
  * @example
  * 200 Response Example:
  * {
   "contentLocationUri": "",
   "imageUri": "",
   "thumbnails": []
}
  */
UserRecordingsApi.prototype.getRecordingIdMedia = function getRecordingIdMedia(recordingId, formatId){
    var requestPath = '/api/v2/userrecordings/{recordingId}/media';
    var requestQuery = {};
    var requestBody;

    if(recordingId === undefined || recordingId === null){
      throw new Error('Missing required  parameter: recordingId');
    }
    requestPath = requestPath.replace('{recordingId}', recordingId);
    requestQuery["formatId"] = formatId;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};


module.exports = UserRecordingsApi;

},{}],31:[function(require,module,exports){
/**
* @class UsersApi
* @example
* var api = new purecloud.platform.UsersApi(pureCloudSession);
*/
function UsersApi(session) {
    if(!(this instanceof UsersApi)) {
        return new UsersApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('UsersApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Query for user aggregates
  * @memberOf UsersApi
  * @instance
  * @param {} body - query
  * @example
  * Body Example:
  * {
   "interval": "",
   "granularity": "",
   "groupBy": [],
   "filter": {
      "type": "",
      "clauses": [],
      "predicates": []
   },
   "metrics": [],
   "flattenMultivaluedDimensions": true
}
  * @example
  * 200 Response Example:
  * {
   "systemToOrganizationMappings": {},
   "results": []
}
  */
UsersApi.prototype.postUsersAggregatesQuery = function postUsersAggregatesQuery(body){
    var requestPath = '/api/v2/analytics/users/aggregates/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Query for user observations
  * @memberOf UsersApi
  * @instance
  * @param {} body - query
  * @example
  * Body Example:
  * {
   "filter": {
      "type": "",
      "clauses": [],
      "predicates": []
   },
   "metrics": []
}
  * @example
  * 200 Response Example:
  * {
   "results": []
}
  */
UsersApi.prototype.postUsersObservationsQuery = function postUsersObservationsQuery(body){
    var requestPath = '/api/v2/analytics/users/observations/query';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the list of available users.
  * @memberOf UsersApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {array} id - id
  * @param {string} sortOrder - Ascending or descending sort order
  ascending,
  descending,
  * @param {array} expand - Which fields, if any, to expand Valid Values: routingStatus, presence, conversationSummary, outOfOffice, geolocation, station, authorization, profileSkills
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
UsersApi.prototype.getUsers = function getUsers(pageSize, pageNumber, id, sortOrder, expand){
    var requestPath = '/api/v2/users';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["id"] = id;
    requestQuery["sortOrder"] = sortOrder;
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Create user
  * @memberOf UsersApi
  * @instance
  * @param {} body - User
  * @example
  * Body Example:
  * {
   "name": "",
   "department": "",
   "email": "",
   "addresses": [],
   "title": "",
   "password": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "chat": {
      "jabberId": ""
   },
   "department": "",
   "email": "",
   "primaryContactInfo": [],
   "addresses": [],
   "state": "",
   "title": "",
   "username": "",
   "images": [],
   "version": 0,
   "routingStatus": {
      "userId": "",
      "status": "",
      "startTime": ""
   },
   "presence": {
      "id": "",
      "name": "",
      "source": "",
      "primary": true,
      "presenceDefinition": {},
      "message": "",
      "modifiedDate": "",
      "selfUri": ""
   },
   "conversationSummary": {
      "userId": "",
      "call": {},
      "callback": {},
      "email": {},
      "chat": {},
      "socialExpression": {},
      "video": {}
   },
   "outOfOffice": {
      "id": "",
      "name": "",
      "user": {},
      "startDate": "",
      "endDate": "",
      "active": true,
      "selfUri": ""
   },
   "geolocation": {
      "id": "",
      "name": "",
      "type": "",
      "primary": true,
      "latitude": {},
      "longitude": {},
      "country": "",
      "region": "",
      "city": "",
      "selfUri": ""
   },
   "station": {
      "associatedStation": {},
      "effectiveStation": {},
      "defaultStation": {},
      "lastAssociatedStation": {}
   },
   "authorization": {
      "roles": [],
      "permissions": [],
      "permissionPolicies": []
   },
   "profileSkills": [],
   "selfUri": ""
}
  */
UsersApi.prototype.postUsers = function postUsers(body){
    var requestPath = '/api/v2/users';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get current user details.
  * @description This request is not valid when using the Client Credentials OAuth grant.
  * @memberOf UsersApi
  * @instance
  * @param {array} expand - Which fields, if any, to expand. Valid Values: routingStatus, presence, conversationSummary, outOfOffice, geolocation, station, authorization, profileSkills, date, geolocationsettings, organization, presencedefinitions, locations
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "chat": {
      "jabberId": ""
   },
   "department": "",
   "email": "",
   "primaryContactInfo": [],
   "addresses": [],
   "state": "",
   "title": "",
   "username": "",
   "images": [],
   "version": 0,
   "routingStatus": {
      "userId": "",
      "status": "",
      "startTime": ""
   },
   "presence": {
      "id": "",
      "name": "",
      "source": "",
      "primary": true,
      "presenceDefinition": {},
      "message": "",
      "modifiedDate": "",
      "selfUri": ""
   },
   "conversationSummary": {
      "userId": "",
      "call": {},
      "callback": {},
      "email": {},
      "chat": {},
      "socialExpression": {},
      "video": {}
   },
   "outOfOffice": {
      "id": "",
      "name": "",
      "user": {},
      "startDate": "",
      "endDate": "",
      "active": true,
      "selfUri": ""
   },
   "geolocation": {
      "id": "",
      "name": "",
      "type": "",
      "primary": true,
      "latitude": {},
      "longitude": {},
      "country": "",
      "region": "",
      "city": "",
      "selfUri": ""
   },
   "station": {
      "associatedStation": {},
      "effectiveStation": {},
      "defaultStation": {},
      "lastAssociatedStation": {}
   },
   "authorization": {
      "roles": [],
      "permissions": [],
      "permissionPolicies": []
   },
   "profileSkills": [],
   "date": {
      "currentDate": ""
   },
   "geolocationSettings": {
      "id": "",
      "name": "",
      "enabled": true,
      "selfUri": ""
   },
   "organization": {
      "id": "",
      "name": "",
      "thirdPartyOrgId": "",
      "thirdPartyOrgName": "",
      "thirdPartyURI": "",
      "domain": "",
      "version": 0,
      "state": "",
      "defaultSiteId": "",
      "deletable": true,
      "selfUri": ""
   },
   "presenceDefinitions": [],
   "locations": [],
   "selfUri": ""
}
  */
UsersApi.prototype.getMe = function getMe(expand){
    var requestPath = '/api/v2/users/me';
    var requestQuery = {};
    var requestBody;

    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Search using q64
  * @memberOf UsersApi
  * @instance
  * @param {string} q64 - q64
  * @param {array} expand - expand
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": []
}
  */
UsersApi.prototype.getSearch = function getSearch(q64, expand){
    var requestPath = '/api/v2/users/search';
    var requestQuery = {};
    var requestBody;

    if(q64 === undefined || q64 === null){
      throw new Error('Missing required  parameter: q64');
    }
    requestQuery["q64"] = q64;
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Search
  * @memberOf UsersApi
  * @instance
  * @param {} body - Search request options
  * @example
  * Body Example:
  * {
   "sortOrder": "",
   "sortBy": "",
   "pageSize": 0,
   "pageNumber": 0,
   "returnFields": [],
   "expand": [],
   "query": []
}
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "pageCount": 0,
   "pageSize": 0,
   "pageNumber": 0,
   "previousPage": "",
   "currentPage": "",
   "nextPage": "",
   "types": [],
   "results": []
}
  */
UsersApi.prototype.postSearch = function postSearch(body){
    var requestPath = '/api/v2/users/search';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get user.
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {array} expand - Which fields, if any, to expand Valid Values: routingStatus, presence, conversationSummary, outOfOffice, geolocation, station, authorization, profileSkills
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "chat": {
      "jabberId": ""
   },
   "department": "",
   "email": "",
   "primaryContactInfo": [],
   "addresses": [],
   "state": "",
   "title": "",
   "username": "",
   "images": [],
   "version": 0,
   "routingStatus": {
      "userId": "",
      "status": "",
      "startTime": ""
   },
   "presence": {
      "id": "",
      "name": "",
      "source": "",
      "primary": true,
      "presenceDefinition": {},
      "message": "",
      "modifiedDate": "",
      "selfUri": ""
   },
   "conversationSummary": {
      "userId": "",
      "call": {},
      "callback": {},
      "email": {},
      "chat": {},
      "socialExpression": {},
      "video": {}
   },
   "outOfOffice": {
      "id": "",
      "name": "",
      "user": {},
      "startDate": "",
      "endDate": "",
      "active": true,
      "selfUri": ""
   },
   "geolocation": {
      "id": "",
      "name": "",
      "type": "",
      "primary": true,
      "latitude": {},
      "longitude": {},
      "country": "",
      "region": "",
      "city": "",
      "selfUri": ""
   },
   "station": {
      "associatedStation": {},
      "effectiveStation": {},
      "defaultStation": {},
      "lastAssociatedStation": {}
   },
   "authorization": {
      "roles": [],
      "permissions": [],
      "permissionPolicies": []
   },
   "profileSkills": [],
   "selfUri": ""
}
  */
UsersApi.prototype.getUserId = function getUserId(userId, expand){
    var requestPath = '/api/v2/users/{userId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    requestQuery["expand"] = expand;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete user
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  */
UsersApi.prototype.deleteUserId = function deleteUserId(userId){
    var requestPath = '/api/v2/users/{userId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update user
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {} body - User
  * @example
  * Body Example:
  * {
   "name": "",
   "chat": {
      "jabberId": ""
   },
   "department": "",
   "email": "",
   "addresses": [],
   "title": "",
   "username": "",
   "images": [],
   "version": 0
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "chat": {
      "jabberId": ""
   },
   "department": "",
   "email": "",
   "primaryContactInfo": [],
   "addresses": [],
   "state": "",
   "title": "",
   "username": "",
   "images": [],
   "version": 0,
   "routingStatus": {
      "userId": "",
      "status": "",
      "startTime": ""
   },
   "presence": {
      "id": "",
      "name": "",
      "source": "",
      "primary": true,
      "presenceDefinition": {},
      "message": "",
      "modifiedDate": "",
      "selfUri": ""
   },
   "conversationSummary": {
      "userId": "",
      "call": {},
      "callback": {},
      "email": {},
      "chat": {},
      "socialExpression": {},
      "video": {}
   },
   "outOfOffice": {
      "id": "",
      "name": "",
      "user": {},
      "startDate": "",
      "endDate": "",
      "active": true,
      "selfUri": ""
   },
   "geolocation": {
      "id": "",
      "name": "",
      "type": "",
      "primary": true,
      "latitude": {},
      "longitude": {},
      "country": "",
      "region": "",
      "city": "",
      "selfUri": ""
   },
   "station": {
      "associatedStation": {},
      "effectiveStation": {},
      "defaultStation": {},
      "lastAssociatedStation": {}
   },
   "authorization": {
      "roles": [],
      "permissions": [],
      "permissionPolicies": []
   },
   "profileSkills": [],
   "selfUri": ""
}
  */
UsersApi.prototype.patchUserId = function patchUserId(userId, body){
    var requestPath = '/api/v2/users/{userId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a user's CallForwarding
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "user": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "enabled": true,
   "phoneNumber": "",
   "modifiedDate": "",
   "selfUri": ""
}
  */
UsersApi.prototype.getUserIdCallforwarding = function getUserIdCallforwarding(userId){
    var requestPath = '/api/v2/users/{userId}/callforwarding';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a user's CallForwarding
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {} body - Call forwarding
  * @example
  * Body Example:
  * {
   "name": "",
   "user": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "enabled": true,
   "phoneNumber": "",
   "modifiedDate": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "user": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "enabled": true,
   "phoneNumber": "",
   "modifiedDate": "",
   "selfUri": ""
}
  */
UsersApi.prototype.putUserIdCallforwarding = function putUserIdCallforwarding(userId, body){
    var requestPath = '/api/v2/users/{userId}/callforwarding';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Patch a user's CallForwarding
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {} body - Call forwarding
  * @example
  * Body Example:
  * {
   "name": "",
   "user": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "enabled": true,
   "phoneNumber": "",
   "modifiedDate": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "user": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "enabled": true,
   "phoneNumber": "",
   "modifiedDate": "",
   "selfUri": ""
}
  */
UsersApi.prototype.patchUserIdCallforwarding = function patchUserIdCallforwarding(userId, body){
    var requestPath = '/api/v2/users/{userId}/callforwarding';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a user's Geolocation
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - user Id
  * @param {string} clientId - client Id
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "primary": true,
   "latitude": {},
   "longitude": {},
   "country": "",
   "region": "",
   "city": "",
   "selfUri": ""
}
  */
UsersApi.prototype.getUserIdGeolocationsClientId = function getUserIdGeolocationsClientId(userId, clientId){
    var requestPath = '/api/v2/users/{userId}/geolocations/{clientId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(clientId === undefined || clientId === null){
      throw new Error('Missing required  parameter: clientId');
    }
    requestPath = requestPath.replace('{clientId}', clientId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Patch a user's Geolocation
  * @description The geolocation object can be patched one of three ways. Option 1: Set the 'primary' property to true. This will set the client as the user's primary geolocation source.  Option 2: Provide the 'latitude' and 'longitude' values.  This will enqueue an asynchronous update of the 'city', 'region', and 'country', generating a notification. A subsequent GET operation will include the new values for 'city', 'region' and 'country'.  Option 3:  Provide the 'city', 'region', 'country' values.  Option 1 can be combined with Option 2 or Option 3.  For example, update the client as primary and provide latitude and longitude values.
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - user Id
  * @param {string} clientId - client Id
  * @param {} body - Geolocation
  * @example
  * Body Example:
  * {
   "name": "",
   "type": "",
   "primary": true,
   "latitude": {},
   "longitude": {},
   "country": "",
   "region": "",
   "city": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "type": "",
   "primary": true,
   "latitude": {},
   "longitude": {},
   "country": "",
   "region": "",
   "city": "",
   "selfUri": ""
}
  */
UsersApi.prototype.patchUserIdGeolocationsClientId = function patchUserIdGeolocationsClientId(userId, clientId, body){
    var requestPath = '/api/v2/users/{userId}/geolocations/{clientId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(clientId === undefined || clientId === null){
      throw new Error('Missing required  parameter: clientId');
    }
    requestPath = requestPath.replace('{clientId}', clientId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a OutOfOffice
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "user": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "startDate": "",
   "endDate": "",
   "active": true,
   "selfUri": ""
}
  */
UsersApi.prototype.getUserIdOutofoffice = function getUserIdOutofoffice(userId){
    var requestPath = '/api/v2/users/{userId}/outofoffice';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update an OutOfOffice
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {} body - The updated UserPresence
  * @example
  * Body Example:
  * {
   "name": "",
   "user": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   },
   "startDate": "",
   "endDate": "",
   "active": true
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "user": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "startDate": "",
   "endDate": "",
   "active": true,
   "selfUri": ""
}
  */
UsersApi.prototype.putUserIdOutofoffice = function putUserIdOutofoffice(userId, body){
    var requestPath = '/api/v2/users/{userId}/outofoffice';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get queues for user
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {boolean} joined - Is joined to the queue
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
UsersApi.prototype.getUserIdQueues = function getUserIdQueues(userId, pageSize, pageNumber, joined){
    var requestPath = '/api/v2/users/{userId}/queues';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["joined"] = joined;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Join or unjoin a set of queues for a user
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {} body - User Queues
  * @example
  * Body Example:
  * [
 {
  "name": "",
  "description": "",
  "version": 0,
  "dateCreated": "",
  "dateModified": "",
  "modifiedBy": "",
  "createdBy": "",
  "state": "",
  "modifiedByApp": "",
  "createdByApp": "",
  "mediaSettings": {},
  "bullseye": {
   "rings": []
  },
  "acwSettings": {
   "wrapupPrompt": "",
   "timeoutMs": 0
  },
  "skillEvaluationMethod": "",
  "queueFlow": {
   "id": "",
   "name": "",
   "selfUri": ""
  },
  "callingPartyName": "",
  "callingPartyNumber": "",
  "joined": true,
  "memberCount": 0
 }
]
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "mediaSettings": {},
   "bullseye": {
      "rings": []
   },
   "acwSettings": {
      "wrapupPrompt": "",
      "timeoutMs": 0
   },
   "skillEvaluationMethod": "",
   "queueFlow": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callingPartyName": "",
   "callingPartyNumber": "",
   "joined": true,
   "memberCount": 0,
   "selfUri": ""
}
  */
UsersApi.prototype.patchUserIdQueues = function patchUserIdQueues(userId, body){
    var requestPath = '/api/v2/users/{userId}/queues';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Join or unjoin a queue for a user
  * @memberOf UsersApi
  * @instance
  * @param {string} queueId - Queue ID
  * @param {string} userId - User ID
  * @param {} body - Queue Member
  * @example
  * Body Example:
  * {
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "mediaSettings": {},
   "bullseye": {
      "rings": []
   },
   "acwSettings": {
      "wrapupPrompt": "",
      "timeoutMs": 0
   },
   "skillEvaluationMethod": "",
   "queueFlow": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callingPartyName": "",
   "callingPartyNumber": "",
   "joined": true,
   "memberCount": 0
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "description": "",
   "version": 0,
   "dateCreated": "",
   "dateModified": "",
   "modifiedBy": "",
   "createdBy": "",
   "state": "",
   "modifiedByApp": "",
   "createdByApp": "",
   "mediaSettings": {},
   "bullseye": {
      "rings": []
   },
   "acwSettings": {
      "wrapupPrompt": "",
      "timeoutMs": 0
   },
   "skillEvaluationMethod": "",
   "queueFlow": {
      "id": "",
      "name": "",
      "selfUri": ""
   },
   "callingPartyName": "",
   "callingPartyNumber": "",
   "joined": true,
   "memberCount": 0,
   "selfUri": ""
}
  */
UsersApi.prototype.patchUserIdQueuesQueueId = function patchUserIdQueuesQueueId(queueId, userId, body){
    var requestPath = '/api/v2/users/{userId}/queues/{queueId}';
    var requestQuery = {};
    var requestBody;

    if(queueId === undefined || queueId === null){
      throw new Error('Missing required  parameter: queueId');
    }
    requestPath = requestPath.replace('{queueId}', queueId);
    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};

/**
  * @summary Returns a listing of roles and permissions for a user.
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @example
  * 200 Response Example:
  * {
   "roles": [],
   "permissions": [],
   "permissionPolicies": []
}
  */
UsersApi.prototype.getUserIdRoles = function getUserIdRoles(userId){
    var requestPath = '/api/v2/users/{userId}/roles';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Sets the user's roles
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {} body - List of roles
  * @example
  * 200 Response Example:
  * {
   "roles": [],
   "permissions": [],
   "permissionPolicies": []
}
  */
UsersApi.prototype.putUserIdRoles = function putUserIdRoles(userId, body){
    var requestPath = '/api/v2/users/{userId}/roles';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Removes all the roles from the user.
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  */
UsersApi.prototype.deleteUserIdRoles = function deleteUserIdRoles(userId){
    var requestPath = '/api/v2/users/{userId}/roles';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary List routing skills for user
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @param {string} sortOrder - Ascending or descending sort order
  ascending,
  descending,
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
UsersApi.prototype.getUserIdRoutingskills = function getUserIdRoutingskills(userId, pageSize, pageNumber, sortOrder){
    var requestPath = '/api/v2/users/{userId}/routingskills';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    requestQuery["sortOrder"] = sortOrder;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Add routing skill to user
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {} body - Skill
  * @example
  * Body Example:
  * {
   "name": "",
   "proficiency": {},
   "state": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "proficiency": {},
   "state": "",
   "skillUri": "",
   "selfUri": ""
}
  */
UsersApi.prototype.postUserIdRoutingskills = function postUserIdRoutingskills(userId, body){
    var requestPath = '/api/v2/users/{userId}/routingskills';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update routing skill proficiency or state.
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {string} skillId - skillId
  * @param {} body - Skill
  * @example
  * Body Example:
  * {
   "name": "",
   "proficiency": {},
   "state": ""
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "name": "",
   "proficiency": {},
   "state": "",
   "skillUri": "",
   "selfUri": ""
}
  */
UsersApi.prototype.putUserIdRoutingskillsSkillId = function putUserIdRoutingskillsSkillId(userId, skillId, body){
    var requestPath = '/api/v2/users/{userId}/routingskills/{skillId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(skillId === undefined || skillId === null){
      throw new Error('Missing required  parameter: skillId');
    }
    requestPath = requestPath.replace('{skillId}', skillId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Remove routing skill from user
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {string} skillId - skillId
  */
UsersApi.prototype.deleteUserIdRoutingskillsSkillId = function deleteUserIdRoutingskillsSkillId(userId, skillId){
    var requestPath = '/api/v2/users/{userId}/routingskills/{skillId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(skillId === undefined || skillId === null){
      throw new Error('Missing required  parameter: skillId');
    }
    requestPath = requestPath.replace('{skillId}', skillId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Fetch the routing status of a user
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @example
  * 200 Response Example:
  * {
   "userId": "",
   "status": "",
   "startTime": ""
}
  */
UsersApi.prototype.getUserIdRoutingstatus = function getUserIdRoutingstatus(userId){
    var requestPath = '/api/v2/users/{userId}/routingstatus';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update the routing status of a user
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {} body - Routing Status
  * @example
  * Body Example:
  * {
   "userId": "",
   "status": "",
   "startTime": ""
}
  * @example
  * 200 Response Example:
  * {
   "userId": "",
   "status": "",
   "startTime": ""
}
  */
UsersApi.prototype.putUserIdRoutingstatus = function putUserIdRoutingstatus(userId, body){
    var requestPath = '/api/v2/users/{userId}/routingstatus';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get station information for user
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @example
  * 200 Response Example:
  * {
   "associatedStation": {
      "id": "",
      "associatedUser": {},
      "associatedDate": "",
      "defaultUser": {},
      "providerInfo": {}
   },
   "effectiveStation": {
      "id": "",
      "associatedUser": {},
      "associatedDate": "",
      "defaultUser": {},
      "providerInfo": {}
   },
   "defaultStation": {
      "id": "",
      "associatedUser": {},
      "associatedDate": "",
      "defaultUser": {},
      "providerInfo": {}
   },
   "lastAssociatedStation": {
      "id": "",
      "associatedUser": {},
      "associatedDate": "",
      "defaultUser": {},
      "providerInfo": {}
   }
}
  */
UsersApi.prototype.getUserIdStation = function getUserIdStation(userId){
    var requestPath = '/api/v2/users/{userId}/station';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Clear associated station
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  */
UsersApi.prototype.deleteUserIdStationAssociatedstation = function deleteUserIdStationAssociatedstation(userId){
    var requestPath = '/api/v2/users/{userId}/station/associatedstation';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Set associated station
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {string} stationId - stationId
  */
UsersApi.prototype.putUserIdStationAssociatedstationStationId = function putUserIdStationAssociatedstationStationId(userId, stationId){
    var requestPath = '/api/v2/users/{userId}/station/associatedstation/{stationId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(stationId === undefined || stationId === null){
      throw new Error('Missing required  parameter: stationId');
    }
    requestPath = requestPath.replace('{stationId}', stationId);
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Clear default station
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  */
UsersApi.prototype.deleteUserIdStationDefaultstation = function deleteUserIdStationDefaultstation(userId){
    var requestPath = '/api/v2/users/{userId}/station/defaultstation';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Set default station
  * @memberOf UsersApi
  * @instance
  * @param {string} userId - User ID
  * @param {string} stationId - stationId
  */
UsersApi.prototype.putUserIdStationDefaultstationStationId = function putUserIdStationDefaultstationStationId(userId, stationId){
    var requestPath = '/api/v2/users/{userId}/station/defaultstation/{stationId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(stationId === undefined || stationId === null){
      throw new Error('Missing required  parameter: stationId');
    }
    requestPath = requestPath.replace('{stationId}', stationId);
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};


module.exports = UsersApi;

},{}],32:[function(require,module,exports){
/**
* @class UtilitiesApi
* @example
* var api = new purecloud.platform.UtilitiesApi(pureCloudSession);
*/
function UtilitiesApi(session) {
    if(!(this instanceof UtilitiesApi)) {
        return new UtilitiesApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('UtilitiesApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Returns the information about an X509 PEM encoded certificate or certificate chain.
  * @memberOf UtilitiesApi
  * @instance
  * @param {} body - Certificate
  * @example
  * Body Example:
  * {
   "certificate": ""
}
  * @example
  * 200 Response Example:
  * {
   "certificateDetails": []
}
  */
UtilitiesApi.prototype.postDetails = function postDetails(body){
    var requestPath = '/api/v2/certificate/details';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('POST', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get the current system date/time
  * @memberOf UtilitiesApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "currentDate": ""
}
  */
UtilitiesApi.prototype.getDate = function getDate(){
    var requestPath = '/api/v2/date';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get time zones list
  * @memberOf UtilitiesApi
  * @instance
  * @param {integer} pageSize - Page size
  * @param {integer} pageNumber - Page number
  * @example
  * 200 Response Example:
  * {
   "pageSize": 0,
   "pageNumber": 0,
   "total": 0,
   "entities": [],
   "selfUri": "",
   "firstUri": "",
   "previousUri": "",
   "nextUri": "",
   "lastUri": "",
   "pageCount": 0
}
  */
UtilitiesApi.prototype.getTimezones = function getTimezones(pageSize, pageNumber){
    var requestPath = '/api/v2/timezones';
    var requestQuery = {};
    var requestBody;

    requestQuery["pageSize"] = pageSize;
    requestQuery["pageNumber"] = pageNumber;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};


module.exports = UtilitiesApi;

},{}],33:[function(require,module,exports){
/**
* @class VoicemailApi
* @example
* var api = new purecloud.platform.VoicemailApi(pureCloudSession);
*/
function VoicemailApi(session) {
    if(!(this instanceof VoicemailApi)) {
        return new VoicemailApi(session);
    }
    if(!(session && session.makeRequest)) {
        throw new Error('VoicemailApi requires a PureCloudSession');
    }
    this.session = session;
}

/**
  * @summary Get mailbox information
  * @memberOf VoicemailApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "usageSizeBytes": 0,
   "totalCount": 0,
   "unreadCount": 0,
   "voicemailPolicy": {
      "enabled": true,
      "alertTimeoutSeconds": 0,
      "minimumRecordingTimeSeconds": 0,
      "maximumRecordingTimeSeconds": 0,
      "unavailableMessageUri": "",
      "namePromptMessageUri": "",
      "fullMessageUri": "",
      "pin": "",
      "quotaSizeBytes": 0,
      "createdDate": "",
      "modifiedDate": ""
   },
   "createdDate": "",
   "modifiedDate": ""
}
  */
VoicemailApi.prototype.getMailbox = function getMailbox(){
    var requestPath = '/api/v2/voicemail/mailbox';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary List voicemail messages
  * @memberOf VoicemailApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "total": 0,
   "entities": [],
   "selfUri": ""
}
  */
VoicemailApi.prototype.getMessages = function getMessages(){
    var requestPath = '/api/v2/voicemail/messages';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete all voicemail messages
  * @memberOf VoicemailApi
  * @instance
  */
VoicemailApi.prototype.deleteMessages = function deleteMessages(){
    var requestPath = '/api/v2/voicemail/messages';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get message.
  * @memberOf VoicemailApi
  * @instance
  * @param {string} messageId - Message ID
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "conversation": {
      "id": "",
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": "",
      "selfUri": ""
   },
   "read": true,
   "audioRecordingDurationSeconds": 0,
   "audioRecordingSizeBytes": 0,
   "createdDate": "",
   "modifiedDate": "",
   "callerAddress": "",
   "callerName": "",
   "callerUser": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "selfUri": ""
}
  */
VoicemailApi.prototype.getMessagesMessageId = function getMessagesMessageId(messageId){
    var requestPath = '/api/v2/voicemail/messages/{messageId}';
    var requestQuery = {};
    var requestBody;

    if(messageId === undefined || messageId === null){
      throw new Error('Missing required  parameter: messageId');
    }
    requestPath = requestPath.replace('{messageId}', messageId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a message.
  * @memberOf VoicemailApi
  * @instance
  * @param {string} messageId - Message ID
  * @param {} body - VoicemailMessage
  * @example
  * Body Example:
  * {
   "conversation": {
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": ""
   },
   "read": true,
   "audioRecordingDurationSeconds": 0,
   "audioRecordingSizeBytes": 0,
   "createdDate": "",
   "modifiedDate": "",
   "callerAddress": "",
   "callerName": "",
   "callerUser": {
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "addresses": [],
      "title": "",
      "username": "",
      "images": [],
      "version": 0
   }
}
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "conversation": {
      "id": "",
      "name": "",
      "startTime": "",
      "endTime": "",
      "address": "",
      "participants": [],
      "conversationIds": [],
      "maxParticipants": 0,
      "recordingState": "",
      "state": "",
      "selfUri": ""
   },
   "read": true,
   "audioRecordingDurationSeconds": 0,
   "audioRecordingSizeBytes": 0,
   "createdDate": "",
   "modifiedDate": "",
   "callerAddress": "",
   "callerName": "",
   "callerUser": {
      "id": "",
      "name": "",
      "chat": {},
      "department": "",
      "email": "",
      "primaryContactInfo": [],
      "addresses": [],
      "state": "",
      "title": "",
      "username": "",
      "images": [],
      "version": 0,
      "routingStatus": {},
      "presence": {},
      "conversationSummary": {},
      "outOfOffice": {},
      "geolocation": {},
      "station": {},
      "authorization": {},
      "profileSkills": [],
      "selfUri": ""
   },
   "selfUri": ""
}
  */
VoicemailApi.prototype.putMessagesMessageId = function putMessagesMessageId(messageId, body){
    var requestPath = '/api/v2/voicemail/messages/{messageId}';
    var requestQuery = {};
    var requestBody;

    if(messageId === undefined || messageId === null){
      throw new Error('Missing required  parameter: messageId');
    }
    requestPath = requestPath.replace('{messageId}', messageId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Delete a message.
  * @memberOf VoicemailApi
  * @instance
  * @param {string} messageId - Message ID
  */
VoicemailApi.prototype.deleteMessagesMessageId = function deleteMessagesMessageId(messageId){
    var requestPath = '/api/v2/voicemail/messages/{messageId}';
    var requestQuery = {};
    var requestBody;

    if(messageId === undefined || messageId === null){
      throw new Error('Missing required  parameter: messageId');
    }
    requestPath = requestPath.replace('{messageId}', messageId);
    return this.session.makeRequest('DELETE', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get media playback URI for this message
  * @memberOf VoicemailApi
  * @instance
  * @param {string} messageId - Message ID
  * @param {string} formatId - The desired media format.
  WAV,
  WEBM,
  WAV_ULAW,
  OGG_VORBIS,
  OGG_OPUS,
  NONE,
  * @example
  * 200 Response Example:
  * {
   "id": "",
   "mediaFileUri": "",
   "mediaImageUri": ""
}
  */
VoicemailApi.prototype.getMessagesMessageIdMedia = function getMessagesMessageIdMedia(messageId, formatId){
    var requestPath = '/api/v2/voicemail/messages/{messageId}/media';
    var requestQuery = {};
    var requestBody;

    if(messageId === undefined || messageId === null){
      throw new Error('Missing required  parameter: messageId');
    }
    requestPath = requestPath.replace('{messageId}', messageId);
    requestQuery["formatId"] = formatId;
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a policy
  * @memberOf VoicemailApi
  * @instance
  * @example
  * 200 Response Example:
  * {
   "enabled": true,
   "retentionTimeDays": 0,
   "alertTimeoutSeconds": 0,
   "minimumRecordingTimeSeconds": 0,
   "maximumRecordingTimeSeconds": 0,
   "unavailableMessageUri": "",
   "namePromptMessageUri": "",
   "fullMessageUri": "",
   "compressSilence": true,
   "pinConfiguration": {
      "minimumLength": 0,
      "maximumLength": 0
   },
   "quotaSizeBytes": 0,
   "createdDate": "",
   "modifiedDate": "",
   "voicemailExtension": "",
   "pinRequired": true
}
  */
VoicemailApi.prototype.getPolicy = function getPolicy(){
    var requestPath = '/api/v2/voicemail/policy';
    var requestQuery = {};
    var requestBody;

    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a policy
  * @memberOf VoicemailApi
  * @instance
  * @param {} body - Policy
  * @example
  * Body Example:
  * {
   "enabled": true,
   "retentionTimeDays": 0,
   "alertTimeoutSeconds": 0,
   "minimumRecordingTimeSeconds": 0,
   "maximumRecordingTimeSeconds": 0,
   "unavailableMessageUri": "",
   "namePromptMessageUri": "",
   "fullMessageUri": "",
   "compressSilence": true,
   "pinConfiguration": {
      "minimumLength": 0,
      "maximumLength": 0
   },
   "quotaSizeBytes": 0,
   "createdDate": "",
   "modifiedDate": "",
   "voicemailExtension": "",
   "pinRequired": true
}
  * @example
  * 200 Response Example:
  * {
   "enabled": true,
   "retentionTimeDays": 0,
   "alertTimeoutSeconds": 0,
   "minimumRecordingTimeSeconds": 0,
   "maximumRecordingTimeSeconds": 0,
   "unavailableMessageUri": "",
   "namePromptMessageUri": "",
   "fullMessageUri": "",
   "compressSilence": true,
   "pinConfiguration": {
      "minimumLength": 0,
      "maximumLength": 0
   },
   "quotaSizeBytes": 0,
   "createdDate": "",
   "modifiedDate": "",
   "voicemailExtension": "",
   "pinRequired": true
}
  */
VoicemailApi.prototype.putPolicy = function putPolicy(body){
    var requestPath = '/api/v2/voicemail/policy';
    var requestQuery = {};
    var requestBody;

    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PUT', requestPath, requestQuery, requestBody);
};

/**
  * @summary Get a user's voicemail policy
  * @memberOf VoicemailApi
  * @instance
  * @param {string} userId - User ID
  * @example
  * 200 Response Example:
  * {
   "enabled": true,
   "alertTimeoutSeconds": 0,
   "minimumRecordingTimeSeconds": 0,
   "maximumRecordingTimeSeconds": 0,
   "unavailableMessageUri": "",
   "namePromptMessageUri": "",
   "fullMessageUri": "",
   "pin": "",
   "quotaSizeBytes": 0,
   "createdDate": "",
   "modifiedDate": ""
}
  */
VoicemailApi.prototype.getUserpoliciesUserId = function getUserpoliciesUserId(userId){
    var requestPath = '/api/v2/voicemail/userpolicies/{userId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    return this.session.makeRequest('GET', requestPath, requestQuery, requestBody);
};

/**
  * @summary Update a user's voicemail policy
  * @memberOf VoicemailApi
  * @instance
  * @param {string} userId - User ID
  * @param {} body - The user's voicemail policy
  * @example
  * Body Example:
  * {
   "enabled": true,
   "alertTimeoutSeconds": 0,
   "minimumRecordingTimeSeconds": 0,
   "maximumRecordingTimeSeconds": 0,
   "unavailableMessageUri": "",
   "namePromptMessageUri": "",
   "fullMessageUri": "",
   "pin": "",
   "quotaSizeBytes": 0,
   "createdDate": "",
   "modifiedDate": ""
}
  * @example
  * 200 Response Example:
  * {
   "enabled": true,
   "alertTimeoutSeconds": 0,
   "minimumRecordingTimeSeconds": 0,
   "maximumRecordingTimeSeconds": 0,
   "unavailableMessageUri": "",
   "namePromptMessageUri": "",
   "fullMessageUri": "",
   "pin": "",
   "quotaSizeBytes": 0,
   "createdDate": "",
   "modifiedDate": ""
}
  */
VoicemailApi.prototype.patchUserpoliciesUserId = function patchUserpoliciesUserId(userId, body){
    var requestPath = '/api/v2/voicemail/userpolicies/{userId}';
    var requestQuery = {};
    var requestBody;

    if(userId === undefined || userId === null){
      throw new Error('Missing required  parameter: userId');
    }
    requestPath = requestPath.replace('{userId}', userId);
    if(body === undefined || body === null){
      throw new Error('Missing required  parameter: body');
    }
    if(body !== undefined && body !== null){
      requestBody = body;
    }
    return this.session.makeRequest('PATCH', requestPath, requestQuery, requestBody);
};


module.exports = VoicemailApi;

},{}],34:[function(require,module,exports){

var superagent = require('superagent');
var Promise = require('es6-promise').Promise;
require('es6-promise').polyfill();

//API VERSION - 0.64.2
/**
  * @description With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
  * @class
  * @param {string} options.strategy - Authentication strategy: "token", "implicit", "client-credentials"
  * @param {string} options.environment - (Optional, default "mypurecloud.com") Environment the session use, e.g. mypurecloud.ie, mypurecloud.com.au, etc.
  * @param {string} options.clientId - (Optional) Client identifier for "implicit" or "client-credentials" strategies
  * @param {string} options.clientSecret - (Optional) Client secret key for "client-credentials" strategy
  * @param {string} options.redirectUrl - (Optional) Callback URL for "implicit" strategy
  * @param {string} options.token - (Optional) Existing token for "token" strategy
  * @param {string} options.storageKey - (Optional) Key to set in localStorage with the authentication token
  * @param {number} options.timeout - (Optional) Request timeout in millisecondw
  **/
function PureCloudSession(options) {
    if(!(this instanceof PureCloudSession)) {
        return new PureCloudSession(options);
    }

    if(!options.timeout){
        options.timeout = 2000;
    }

    this.options = options;

    this._setValuesFromUrlHash();

    this.options.token = this._getToken();
    this.setEnvironment(this.options.environment);

}

/**
  * @description Sets the environment used by the session
  * @param {string} environment - (Optional, default "mypurecloud.com") Environment the session use, e.g. mypurecloud.ie, mypurecloud.com.au, etc.
  **/
PureCloudSession.prototype.setEnvironment = function setEnvironment(environment) {
    this.options.environment = environment || 'mypurecloud.com';
    this.apiUrl = 'https://api.' + this.options.environment;
    this.authUrl = 'https://login.' + this.options.environment;
};


/**
  * @description Sets an error handler to be called any time there is a 401 Unauthenticated error returned by the api
  * @param {function} errorHandler - The function to call.
  **/
PureCloudSession.prototype.setUnauthenticatedErrorHandler = function setEnvironment(errorHandler) {
    this.unauthenticatedErrorHandler = errorHandler;
}

/**
  * @description Attempts to login with the appropriate authentication strategy
  * @returns Promise which resolves on successful authentication, otherwise rejects with an error
  **/
PureCloudSession.prototype.login = function login() {
    var self = this;
    return this.options.token ? this._testTokenAccess().catch(function(){
            self._authenticate();
        }) : this._authenticate();
};

PureCloudSession.prototype._authenticate = function _authenticate() {
  var strategy = this.options.strategy;
  switch(strategy) {
    case 'token':
      var token = this.options.token;
      return this._loginWithToken(token);
    case 'implicit':
      var implicitclientId = this.options.clientId;
      var redirectUrl = this.options.redirectUrl;
      var state = this.options.state;
      return this._loginWithImplicitGrant(implicitclientId, redirectUrl, state);
    case 'client-credentials':
      var clientId = this.options.clientId;
      var clientSecret = this.options.clientSecret;
      return this._loginWithClientCredentials(clientId, clientSecret);
    default:
      throw new Error('Authentication strategy "'+strategy+'" is not supported.');
  }
};

PureCloudSession.prototype._testTokenAccess = function _testTokenAccess() {
    if(this.options.strategy === 'implicit') {
      var checkUrl = this.apiUrl + "/api/v2/users/me";
      return this._makeRequest('get', checkUrl);
    }
    return Promise.resolve();
};

PureCloudSession.prototype._loginWithToken = function _loginWithToken(token) {
    if(!token) {
        throw new Error('Options requires a "token" key for the "token" strategy');
    }
    return Promise.resolve();
};

PureCloudSession.prototype._loginWithImplicitGrant = function(clientId, redirectUrl, state) {
    var query = {
        response_type: 'token',
        client_id: encodeURIComponent(clientId),
        redirect_uri: encodeURI(redirectUrl),
        state: state
    };

    function qs(url, key) {
        var val = query[key];
        if(!val) return url;
        return url + '&' + key + '=' + val;
    }

    var url = Object.keys(query).reduce(qs, this.authUrl + '/authorize?');
    window.location.replace(url);
};

PureCloudSession.prototype._setValuesFromUrlHash = function setValuesFromUrlHash() {
    if(!(typeof window !== 'undefined' && window.location.hash)) return;
    var hash = window.location.hash
        .slice(1).split('&')
        .reduce(function(obj, pair) {
            var keyValue = pair.split('=');
            obj[keyValue[0]] = keyValue[1];
            return obj;
        }, {});

    if(hash.access_token) this._setToken(hash.access_token);
    if(hash.state) this.options.state = hash.state;
};

PureCloudSession.prototype._loginWithClientCredentials = function(clientId, clientSecret) {
    var self = this;
    var url = this.authUrl + '/token';
    var data = {grant_type: 'client_credentials'};
    var request = this._baseRequest('post', url)
        .set('Content-Type', 'application/x-www-form-urlencoded')
        .auth(clientId, clientSecret)
        .send(data);
    return this._sendRequest(request)
        .then(function(body) {
            self._setToken(body.access_token);
        });
};

PureCloudSession.prototype._getToken = function _getToken() {
    if(this.options.token) return this.options.token;
    if(this.options.storageKey && PureCloudSession.hasLocalStorage) {
        return localStorage.getItem(this.options.storageKey);
    }
};

PureCloudSession.prototype._setToken = function _setToken(token) {
    this.options.token = token;
    if(this.options.storageKey && PureCloudSession.hasLocalStorage) {
        localStorage.setItem(this.options.storageKey, token);
    }
};

PureCloudSession.hasLocalStorage = (function() {
    try {
        localStorage.setItem("mod", "mod");
        localStorage.removeItem("mod");
        return true;
    } catch(e) {
        return false;
    }
}).call(this);

/**
  * @description Deauthenticates the session and removes any stored token
  **/
PureCloudSession.prototype.logout = function logout() {
    if(PureCloudSession.hasLocalStorage) {
        this._setToken(null);
    }
	window.location.replace(this.authUrl + "/logout");
};

/**
  * @description Makes authenticated requests to PureCloud
  * @param {string} method - HTTP method verb, e.g. "get", "post"
  * @param {string} url - URL to request
  * @param {object} query - (Optional) query parameters
  * @param {object} body - (Optional) request body payload
  * @returns Promise resolving to the response body, otherwise rejects with an error
  */
PureCloudSession.prototype.makeRequest = function makeRequest(method, url, query, body) {
    return this._makeRequest(method, url, query, body);
};

PureCloudSession.prototype._makeRequest = function _makeRequest(method, url, query, body) {
    var bearer = 'bearer ' + this.options.token;

    if(this.debugLog){
        var trace = method + " " + url;
        if(query && Object.keys(query).count > 0 && query[Object.keys(query)[0]]){
            trace += "\nQuery Params: " + JSON.stringify(query);
        }

        if(body){
            trace += "\nBody: " + JSON.stringify(body);
        }

        this.debugLog(trace);
    }

    var request = this._baseRequest(method, url)
        .set('Authorization', bearer)
        .query(query)
        .send(body);
    return this._sendRequest(request);
};

PureCloudSession.prototype._baseRequest = function _baseRequest(method, url) {
    method = method.toLowerCase();
    if(url.charAt(0) === '/') url = this.apiUrl + url;

    var request = superagent[method](url)
        .type('json')
        .accept('json')
        .timeout(this.options.timeout);

    if (typeof window === 'undefined' ) {
        var userAgent = 'PureCloud SDK/Javascript 0.64.2';
        request = request.set('User-Agent', userAgent);
    }

    return request;
};

PureCloudSession.prototype._sendRequest = function _sendRequest(request) {
    var self = this;
    return new Promise(function(resolve, reject) {
        request.end(function(error, res) {
            if(self.debugLog){
                if(res){
                    self.debugLog(res.headers);
                }

                self.debugLog(error || res.error || res.body);
            }


            if(res && res.unauthorized && self.unauthenticatedErrorHandler){
                self.unauthenticatedErrorHandler(error);
            }

            if(error){
                return reject(error);
            }
            if(res.error) {
                return reject(res);
            }
            resolve(res.body);
        });
    });
};

/**
  * @description Conveinence method for making GET requests
  * @param {string} url - URL to request
  * @param {object} query - (Optional) query parameters
  * @returns Promise resolving to the response body, otherwise rejects with an error
  */
PureCloudSession.prototype.get = function get(url, query) {
  return this.makeRequest('get', url, query);
};

module.exports = PureCloudSession;

},{"es6-promise":36,"superagent":39}],35:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],36:[function(require,module,exports){
(function (process,global){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
 * @version   3.2.1
 */

(function() {
    "use strict";
    function lib$es6$promise$utils$$objectOrFunction(x) {
      return typeof x === 'function' || (typeof x === 'object' && x !== null);
    }

    function lib$es6$promise$utils$$isFunction(x) {
      return typeof x === 'function';
    }

    function lib$es6$promise$utils$$isMaybeThenable(x) {
      return typeof x === 'object' && x !== null;
    }

    var lib$es6$promise$utils$$_isArray;
    if (!Array.isArray) {
      lib$es6$promise$utils$$_isArray = function (x) {
        return Object.prototype.toString.call(x) === '[object Array]';
      };
    } else {
      lib$es6$promise$utils$$_isArray = Array.isArray;
    }

    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
    var lib$es6$promise$asap$$len = 0;
    var lib$es6$promise$asap$$vertxNext;
    var lib$es6$promise$asap$$customSchedulerFn;

    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
      lib$es6$promise$asap$$len += 2;
      if (lib$es6$promise$asap$$len === 2) {
        // If len is 2, that means that we need to schedule an async flush.
        // If additional callbacks are queued before the queue is flushed, they
        // will be processed by this flush that we are scheduling.
        if (lib$es6$promise$asap$$customSchedulerFn) {
          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
        } else {
          lib$es6$promise$asap$$scheduleFlush();
        }
      }
    }

    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
    }

    function lib$es6$promise$asap$$setAsap(asapFn) {
      lib$es6$promise$asap$$asap = asapFn;
    }

    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
    var lib$es6$promise$asap$$isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

    // test for web worker but not in IE10
    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
      typeof importScripts !== 'undefined' &&
      typeof MessageChannel !== 'undefined';

    // node
    function lib$es6$promise$asap$$useNextTick() {
      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
      // see https://github.com/cujojs/when/issues/410 for details
      return function() {
        process.nextTick(lib$es6$promise$asap$$flush);
      };
    }

    // vertx
    function lib$es6$promise$asap$$useVertxTimer() {
      return function() {
        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
      };
    }

    function lib$es6$promise$asap$$useMutationObserver() {
      var iterations = 0;
      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
      var node = document.createTextNode('');
      observer.observe(node, { characterData: true });

      return function() {
        node.data = (iterations = ++iterations % 2);
      };
    }

    // web worker
    function lib$es6$promise$asap$$useMessageChannel() {
      var channel = new MessageChannel();
      channel.port1.onmessage = lib$es6$promise$asap$$flush;
      return function () {
        channel.port2.postMessage(0);
      };
    }

    function lib$es6$promise$asap$$useSetTimeout() {
      return function() {
        setTimeout(lib$es6$promise$asap$$flush, 1);
      };
    }

    var lib$es6$promise$asap$$queue = new Array(1000);
    function lib$es6$promise$asap$$flush() {
      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
        var callback = lib$es6$promise$asap$$queue[i];
        var arg = lib$es6$promise$asap$$queue[i+1];

        callback(arg);

        lib$es6$promise$asap$$queue[i] = undefined;
        lib$es6$promise$asap$$queue[i+1] = undefined;
      }

      lib$es6$promise$asap$$len = 0;
    }

    function lib$es6$promise$asap$$attemptVertx() {
      try {
        var r = require;
        var vertx = r('vertx');
        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
        return lib$es6$promise$asap$$useVertxTimer();
      } catch(e) {
        return lib$es6$promise$asap$$useSetTimeout();
      }
    }

    var lib$es6$promise$asap$$scheduleFlush;
    // Decide what async method to use to triggering processing of queued callbacks:
    if (lib$es6$promise$asap$$isNode) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
    } else if (lib$es6$promise$asap$$isWorker) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
    } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();
    } else {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
    }
    function lib$es6$promise$then$$then(onFulfillment, onRejection) {
      var parent = this;

      var child = new this.constructor(lib$es6$promise$$internal$$noop);

      if (child[lib$es6$promise$$internal$$PROMISE_ID] === undefined) {
        lib$es6$promise$$internal$$makePromise(child);
      }

      var state = parent._state;

      if (state) {
        var callback = arguments[state - 1];
        lib$es6$promise$asap$$asap(function(){
          lib$es6$promise$$internal$$invokeCallback(state, child, callback, parent._result);
        });
      } else {
        lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
      }

      return child;
    }
    var lib$es6$promise$then$$default = lib$es6$promise$then$$then;
    function lib$es6$promise$promise$resolve$$resolve(object) {
      /*jshint validthis:true */
      var Constructor = this;

      if (object && typeof object === 'object' && object.constructor === Constructor) {
        return object;
      }

      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$resolve(promise, object);
      return promise;
    }
    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
    var lib$es6$promise$$internal$$PROMISE_ID = Math.random().toString(36).substring(16);

    function lib$es6$promise$$internal$$noop() {}

    var lib$es6$promise$$internal$$PENDING   = void 0;
    var lib$es6$promise$$internal$$FULFILLED = 1;
    var lib$es6$promise$$internal$$REJECTED  = 2;

    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$selfFulfillment() {
      return new TypeError("You cannot resolve a promise with itself");
    }

    function lib$es6$promise$$internal$$cannotReturnOwn() {
      return new TypeError('A promises callback cannot return that same promise.');
    }

    function lib$es6$promise$$internal$$getThen(promise) {
      try {
        return promise.then;
      } catch(error) {
        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
        return lib$es6$promise$$internal$$GET_THEN_ERROR;
      }
    }

    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
      try {
        then.call(value, fulfillmentHandler, rejectionHandler);
      } catch(e) {
        return e;
      }
    }

    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
       lib$es6$promise$asap$$asap(function(promise) {
        var sealed = false;
        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
          if (sealed) { return; }
          sealed = true;
          if (thenable !== value) {
            lib$es6$promise$$internal$$resolve(promise, value);
          } else {
            lib$es6$promise$$internal$$fulfill(promise, value);
          }
        }, function(reason) {
          if (sealed) { return; }
          sealed = true;

          lib$es6$promise$$internal$$reject(promise, reason);
        }, 'Settle: ' + (promise._label || ' unknown promise'));

        if (!sealed && error) {
          sealed = true;
          lib$es6$promise$$internal$$reject(promise, error);
        }
      }, promise);
    }

    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, thenable._result);
      } else {
        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
          lib$es6$promise$$internal$$resolve(promise, value);
        }, function(reason) {
          lib$es6$promise$$internal$$reject(promise, reason);
        });
      }
    }

    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable, then) {
      if (maybeThenable.constructor === promise.constructor &&
          then === lib$es6$promise$then$$default &&
          constructor.resolve === lib$es6$promise$promise$resolve$$default) {
        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
      } else {
        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
        } else if (then === undefined) {
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        } else if (lib$es6$promise$utils$$isFunction(then)) {
          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
        } else {
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        }
      }
    }

    function lib$es6$promise$$internal$$resolve(promise, value) {
      if (promise === value) {
        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());
      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
        lib$es6$promise$$internal$$handleMaybeThenable(promise, value, lib$es6$promise$$internal$$getThen(value));
      } else {
        lib$es6$promise$$internal$$fulfill(promise, value);
      }
    }

    function lib$es6$promise$$internal$$publishRejection(promise) {
      if (promise._onerror) {
        promise._onerror(promise._result);
      }

      lib$es6$promise$$internal$$publish(promise);
    }

    function lib$es6$promise$$internal$$fulfill(promise, value) {
      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }

      promise._result = value;
      promise._state = lib$es6$promise$$internal$$FULFILLED;

      if (promise._subscribers.length !== 0) {
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
      }
    }

    function lib$es6$promise$$internal$$reject(promise, reason) {
      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
      promise._state = lib$es6$promise$$internal$$REJECTED;
      promise._result = reason;

      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
    }

    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
      var subscribers = parent._subscribers;
      var length = subscribers.length;

      parent._onerror = null;

      subscribers[length] = child;
      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;

      if (length === 0 && parent._state) {
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
      }
    }

    function lib$es6$promise$$internal$$publish(promise) {
      var subscribers = promise._subscribers;
      var settled = promise._state;

      if (subscribers.length === 0) { return; }

      var child, callback, detail = promise._result;

      for (var i = 0; i < subscribers.length; i += 3) {
        child = subscribers[i];
        callback = subscribers[i + settled];

        if (child) {
          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
        } else {
          callback(detail);
        }
      }

      promise._subscribers.length = 0;
    }

    function lib$es6$promise$$internal$$ErrorObject() {
      this.error = null;
    }

    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
      try {
        return callback(detail);
      } catch(e) {
        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
      }
    }

    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
          value, error, succeeded, failed;

      if (hasCallback) {
        value = lib$es6$promise$$internal$$tryCatch(callback, detail);

        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
          failed = true;
          error = value.error;
          value = null;
        } else {
          succeeded = true;
        }

        if (promise === value) {
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
          return;
        }

      } else {
        value = detail;
        succeeded = true;
      }

      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
        // noop
      } else if (hasCallback && succeeded) {
        lib$es6$promise$$internal$$resolve(promise, value);
      } else if (failed) {
        lib$es6$promise$$internal$$reject(promise, error);
      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
        lib$es6$promise$$internal$$fulfill(promise, value);
      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, value);
      }
    }

    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
      try {
        resolver(function resolvePromise(value){
          lib$es6$promise$$internal$$resolve(promise, value);
        }, function rejectPromise(reason) {
          lib$es6$promise$$internal$$reject(promise, reason);
        });
      } catch(e) {
        lib$es6$promise$$internal$$reject(promise, e);
      }
    }

    var lib$es6$promise$$internal$$id = 0;
    function lib$es6$promise$$internal$$nextId() {
      return lib$es6$promise$$internal$$id++;
    }

    function lib$es6$promise$$internal$$makePromise(promise) {
      promise[lib$es6$promise$$internal$$PROMISE_ID] = lib$es6$promise$$internal$$id++;
      promise._state = undefined;
      promise._result = undefined;
      promise._subscribers = [];
    }

    function lib$es6$promise$promise$all$$all(entries) {
      return new lib$es6$promise$enumerator$$default(this, entries).promise;
    }
    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
    function lib$es6$promise$promise$race$$race(entries) {
      /*jshint validthis:true */
      var Constructor = this;

      if (!lib$es6$promise$utils$$isArray(entries)) {
        return new Constructor(function(resolve, reject) {
          reject(new TypeError('You must pass an array to race.'));
        });
      } else {
        return new Constructor(function(resolve, reject) {
          var length = entries.length;
          for (var i = 0; i < length; i++) {
            Constructor.resolve(entries[i]).then(resolve, reject);
          }
        });
      }
    }
    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
    function lib$es6$promise$promise$reject$$reject(reason) {
      /*jshint validthis:true */
      var Constructor = this;
      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$reject(promise, reason);
      return promise;
    }
    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;


    function lib$es6$promise$promise$$needsResolver() {
      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
    }

    function lib$es6$promise$promise$$needsNew() {
      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
    }

    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
    /**
      Promise objects represent the eventual result of an asynchronous operation. The
      primary way of interacting with a promise is through its `then` method, which
      registers callbacks to receive either a promise's eventual value or the reason
      why the promise cannot be fulfilled.

      Terminology
      -----------

      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
      - `thenable` is an object or function that defines a `then` method.
      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
      - `exception` is a value that is thrown using the throw statement.
      - `reason` is a value that indicates why a promise was rejected.
      - `settled` the final resting state of a promise, fulfilled or rejected.

      A promise can be in one of three states: pending, fulfilled, or rejected.

      Promises that are fulfilled have a fulfillment value and are in the fulfilled
      state.  Promises that are rejected have a rejection reason and are in the
      rejected state.  A fulfillment value is never a thenable.

      Promises can also be said to *resolve* a value.  If this value is also a
      promise, then the original promise's settled state will match the value's
      settled state.  So a promise that *resolves* a promise that rejects will
      itself reject, and a promise that *resolves* a promise that fulfills will
      itself fulfill.


      Basic Usage:
      ------------

      ```js
      var promise = new Promise(function(resolve, reject) {
        // on success
        resolve(value);

        // on failure
        reject(reason);
      });

      promise.then(function(value) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Advanced Usage:
      ---------------

      Promises shine when abstracting away asynchronous interactions such as
      `XMLHttpRequest`s.

      ```js
      function getJSON(url) {
        return new Promise(function(resolve, reject){
          var xhr = new XMLHttpRequest();

          xhr.open('GET', url);
          xhr.onreadystatechange = handler;
          xhr.responseType = 'json';
          xhr.setRequestHeader('Accept', 'application/json');
          xhr.send();

          function handler() {
            if (this.readyState === this.DONE) {
              if (this.status === 200) {
                resolve(this.response);
              } else {
                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
              }
            }
          };
        });
      }

      getJSON('/posts.json').then(function(json) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Unlike callbacks, promises are great composable primitives.

      ```js
      Promise.all([
        getJSON('/posts'),
        getJSON('/comments')
      ]).then(function(values){
        values[0] // => postsJSON
        values[1] // => commentsJSON

        return values;
      });
      ```

      @class Promise
      @param {function} resolver
      Useful for tooling.
      @constructor
    */
    function lib$es6$promise$promise$$Promise(resolver) {
      this[lib$es6$promise$$internal$$PROMISE_ID] = lib$es6$promise$$internal$$nextId();
      this._result = this._state = undefined;
      this._subscribers = [];

      if (lib$es6$promise$$internal$$noop !== resolver) {
        typeof resolver !== 'function' && lib$es6$promise$promise$$needsResolver();
        this instanceof lib$es6$promise$promise$$Promise ? lib$es6$promise$$internal$$initializePromise(this, resolver) : lib$es6$promise$promise$$needsNew();
      }
    }

    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;

    lib$es6$promise$promise$$Promise.prototype = {
      constructor: lib$es6$promise$promise$$Promise,

    /**
      The primary way of interacting with a promise is through its `then` method,
      which registers callbacks to receive either a promise's eventual value or the
      reason why the promise cannot be fulfilled.

      ```js
      findUser().then(function(user){
        // user is available
      }, function(reason){
        // user is unavailable, and you are given the reason why
      });
      ```

      Chaining
      --------

      The return value of `then` is itself a promise.  This second, 'downstream'
      promise is resolved with the return value of the first promise's fulfillment
      or rejection handler, or rejected if the handler throws an exception.

      ```js
      findUser().then(function (user) {
        return user.name;
      }, function (reason) {
        return 'default name';
      }).then(function (userName) {
        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
        // will be `'default name'`
      });

      findUser().then(function (user) {
        throw new Error('Found user, but still unhappy');
      }, function (reason) {
        throw new Error('`findUser` rejected and we're unhappy');
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
      });
      ```
      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

      ```js
      findUser().then(function (user) {
        throw new PedagogicalException('Upstream error');
      }).then(function (value) {
        // never reached
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // The `PedgagocialException` is propagated all the way down to here
      });
      ```

      Assimilation
      ------------

      Sometimes the value you want to propagate to a downstream promise can only be
      retrieved asynchronously. This can be achieved by returning a promise in the
      fulfillment or rejection handler. The downstream promise will then be pending
      until the returned promise is settled. This is called *assimilation*.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // The user's comments are now available
      });
      ```

      If the assimliated promise rejects, then the downstream promise will also reject.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // If `findCommentsByAuthor` fulfills, we'll have the value here
      }, function (reason) {
        // If `findCommentsByAuthor` rejects, we'll have the reason here
      });
      ```

      Simple Example
      --------------

      Synchronous Example

      ```javascript
      var result;

      try {
        result = findResult();
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js
      findResult(function(result, err){
        if (err) {
          // failure
        } else {
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findResult().then(function(result){
        // success
      }, function(reason){
        // failure
      });
      ```

      Advanced Example
      --------------

      Synchronous Example

      ```javascript
      var author, books;

      try {
        author = findAuthor();
        books  = findBooksByAuthor(author);
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js

      function foundBooks(books) {

      }

      function failure(reason) {

      }

      findAuthor(function(author, err){
        if (err) {
          failure(err);
          // failure
        } else {
          try {
            findBoooksByAuthor(author, function(books, err) {
              if (err) {
                failure(err);
              } else {
                try {
                  foundBooks(books);
                } catch(reason) {
                  failure(reason);
                }
              }
            });
          } catch(error) {
            failure(err);
          }
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findAuthor().
        then(findBooksByAuthor).
        then(function(books){
          // found books
      }).catch(function(reason){
        // something went wrong
      });
      ```

      @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      Useful for tooling.
      @return {Promise}
    */
      then: lib$es6$promise$then$$default,

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.

      ```js
      function findAuthor(){
        throw new Error('couldn't find that author');
      }

      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }

      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```

      @method catch
      @param {Function} onRejection
      Useful for tooling.
      @return {Promise}
    */
      'catch': function(onRejection) {
        return this.then(null, onRejection);
      }
    };
    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;
    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
      this._instanceConstructor = Constructor;
      this.promise = new Constructor(lib$es6$promise$$internal$$noop);

      if (!this.promise[lib$es6$promise$$internal$$PROMISE_ID]) {
        lib$es6$promise$$internal$$makePromise(this.promise);
      }

      if (lib$es6$promise$utils$$isArray(input)) {
        this._input     = input;
        this.length     = input.length;
        this._remaining = input.length;

        this._result = new Array(this.length);

        if (this.length === 0) {
          lib$es6$promise$$internal$$fulfill(this.promise, this._result);
        } else {
          this.length = this.length || 0;
          this._enumerate();
          if (this._remaining === 0) {
            lib$es6$promise$$internal$$fulfill(this.promise, this._result);
          }
        }
      } else {
        lib$es6$promise$$internal$$reject(this.promise, lib$es6$promise$enumerator$$validationError());
      }
    }

    function lib$es6$promise$enumerator$$validationError() {
      return new Error('Array Methods must be provided an Array');
    }

    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
      var length  = this.length;
      var input   = this._input;

      for (var i = 0; this._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
        this._eachEntry(input[i], i);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
      var c = this._instanceConstructor;
      var resolve = c.resolve;

      if (resolve === lib$es6$promise$promise$resolve$$default) {
        var then = lib$es6$promise$$internal$$getThen(entry);

        if (then === lib$es6$promise$then$$default &&
            entry._state !== lib$es6$promise$$internal$$PENDING) {
          this._settledAt(entry._state, i, entry._result);
        } else if (typeof then !== 'function') {
          this._remaining--;
          this._result[i] = entry;
        } else if (c === lib$es6$promise$promise$$default) {
          var promise = new c(lib$es6$promise$$internal$$noop);
          lib$es6$promise$$internal$$handleMaybeThenable(promise, entry, then);
          this._willSettleAt(promise, i);
        } else {
          this._willSettleAt(new c(function(resolve) { resolve(entry); }), i);
        }
      } else {
        this._willSettleAt(resolve(entry), i);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
      var promise = this.promise;

      if (promise._state === lib$es6$promise$$internal$$PENDING) {
        this._remaining--;

        if (state === lib$es6$promise$$internal$$REJECTED) {
          lib$es6$promise$$internal$$reject(promise, value);
        } else {
          this._result[i] = value;
        }
      }

      if (this._remaining === 0) {
        lib$es6$promise$$internal$$fulfill(promise, this._result);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
      var enumerator = this;

      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
      }, function(reason) {
        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
      });
    };
    function lib$es6$promise$polyfill$$polyfill() {
      var local;

      if (typeof global !== 'undefined') {
          local = global;
      } else if (typeof self !== 'undefined') {
          local = self;
      } else {
          try {
              local = Function('return this')();
          } catch (e) {
              throw new Error('polyfill failed because global object is unavailable in this environment');
          }
      }

      var P = local.Promise;

      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
        return;
      }

      local.Promise = lib$es6$promise$promise$$default;
    }
    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;

    var lib$es6$promise$umd$$ES6Promise = {
      'Promise': lib$es6$promise$promise$$default,
      'polyfill': lib$es6$promise$polyfill$$default
    };

    /* global define:true module:true window: true */
    if (typeof define === 'function' && define['amd']) {
      define(function() { return lib$es6$promise$umd$$ES6Promise; });
    } else if (typeof module !== 'undefined' && module['exports']) {
      module['exports'] = lib$es6$promise$umd$$ES6Promise;
    } else if (typeof this !== 'undefined') {
      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
    }

    lib$es6$promise$polyfill$$default();
}).call(this);


}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":37}],37:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],38:[function(require,module,exports){

/**
 * Reduce `arr` with `fn`.
 *
 * @param {Array} arr
 * @param {Function} fn
 * @param {Mixed} initial
 *
 * TODO: combatible error handling?
 */

module.exports = function(arr, fn, initial){  
  var idx = 0;
  var len = arr.length;
  var curr = arguments.length == 3
    ? initial
    : arr[idx++];

  while (idx < len) {
    curr = fn.call(null, curr, arr[idx], ++idx, arr);
  }
  
  return curr;
};
},{}],39:[function(require,module,exports){
/**
 * Module dependencies.
 */

var Emitter = require('emitter');
var reduce = require('reduce');
var requestBase = require('./request-base');
var isObject = require('./is-object');

/**
 * Root reference for iframes.
 */

var root;
if (typeof window !== 'undefined') { // Browser window
  root = window;
} else if (typeof self !== 'undefined') { // Web Worker
  root = self;
} else { // Other environments
  root = this;
}

/**
 * Noop.
 */

function noop(){};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * TODO: future proof, move to compoent land
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isHost(obj) {
  var str = {}.toString.call(obj);

  switch (str) {
    case '[object File]':
    case '[object Blob]':
    case '[object FormData]':
      return true;
    default:
      return false;
  }
}

/**
 * Expose `request`.
 */

var request = module.exports = require('./request').bind(null, Request);

/**
 * Determine XHR.
 */

request.getXHR = function () {
  if (root.XMLHttpRequest
      && (!root.location || 'file:' != root.location.protocol
          || !root.ActiveXObject)) {
    return new XMLHttpRequest;
  } else {
    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
  }
  return false;
};

/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

var trim = ''.trim
  ? function(s) { return s.trim(); }
  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) return obj;
  var pairs = [];
  for (var key in obj) {
    if (null != obj[key]) {
      pushEncodedKeyValuePair(pairs, key, obj[key]);
        }
      }
  return pairs.join('&');
}

/**
 * Helps 'serialize' with serializing arrays.
 * Mutates the pairs array.
 *
 * @param {Array} pairs
 * @param {String} key
 * @param {Mixed} val
 */

function pushEncodedKeyValuePair(pairs, key, val) {
  if (Array.isArray(val)) {
    return val.forEach(function(v) {
      pushEncodedKeyValuePair(pairs, key, v);
    });
  }
  pairs.push(encodeURIComponent(key)
    + '=' + encodeURIComponent(val));
}

/**
 * Expose serialization method.
 */

 request.serializeObject = serialize;

 /**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var parts;
  var pair;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    parts = pair.split('=');
    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
  }

  return obj;
}

/**
 * Expose parser.
 */

request.parseString = parseString;

/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  xml: 'application/xml',
  urlencoded: 'application/x-www-form-urlencoded',
  'form': 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

 request.serialize = {
   'application/x-www-form-urlencoded': serialize,
   'application/json': JSON.stringify
 };

 /**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse
};

/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  lines.pop(); // trailing CRLF

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');
    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}

/**
 * Check if `mime` is json or has +json structured syntax suffix.
 *
 * @param {String} mime
 * @return {Boolean}
 * @api private
 */

function isJSON(mime) {
  return /[\/+]json\b/.test(mime);
}

/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

function type(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function params(str){
  return reduce(str.split(/ *; */), function(obj, str){
    var parts = str.split(/ *= */)
      , key = parts.shift()
      , val = parts.shift();

    if (key && val) obj[key] = val;
    return obj;
  }, {});
};

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

function Response(req, options) {
  options = options || {};
  this.req = req;
  this.xhr = this.req.xhr;
  // responseText is accessible only if responseType is '' or 'text' and on older browsers
  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
     ? this.xhr.responseText
     : null;
  this.statusText = this.req.xhr.statusText;
  this.setStatusProperties(this.xhr.status);
  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.
  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
  this.setHeaderProperties(this.header);
  this.body = this.req.method != 'HEAD'
    ? this.parseBody(this.text ? this.text : this.xhr.response)
    : null;
}

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

Response.prototype.get = function(field){
  return this.header[field.toLowerCase()];
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

Response.prototype.setHeaderProperties = function(header){
  // content-type
  var ct = this.header['content-type'] || '';
  this.type = type(ct);

  // params
  var obj = params(ct);
  for (var key in obj) this[key] = obj[key];
};

/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype.parseBody = function(str){
  var parse = request.parse[this.type];
  if (!parse && isJSON(this.type)) {
    parse = request.parse['application/json'];
  }
  return parse && str && (str.length || str instanceof Object)
    ? parse(str)
    : null;
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

Response.prototype.setStatusProperties = function(status){
  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
  if (status === 1223) {
    status = 204;
  }

  var type = status / 100 | 0;

  // status / class
  this.status = this.statusCode = status;
  this.statusType = type;

  // basics
  this.info = 1 == type;
  this.ok = 2 == type;
  this.clientError = 4 == type;
  this.serverError = 5 == type;
  this.error = (4 == type || 5 == type)
    ? this.toError()
    : false;

  // sugar
  this.accepted = 202 == status;
  this.noContent = 204 == status;
  this.badRequest = 400 == status;
  this.unauthorized = 401 == status;
  this.notAcceptable = 406 == status;
  this.notFound = 404 == status;
  this.forbidden = 403 == status;
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var url = req.url;

  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.url = url;

  return err;
};

/**
 * Expose `Response`.
 */

request.Response = Response;

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {}; // preserves header name case
  this._header = {}; // coerces header names to lowercase
  this.on('end', function(){
    var err = null;
    var res = null;

    try {
      res = new Response(self);
    } catch(e) {
      err = new Error('Parser is unable to parse the response');
      err.parse = true;
      err.original = e;
      // issue #675: return the raw response if the response parsing fails
      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;
      // issue #876: return the http status code if the response parsing fails
      err.statusCode = self.xhr && self.xhr.status ? self.xhr.status : null;
      return self.callback(err);
    }

    self.emit('response', res);

    if (err) {
      return self.callback(err, res);
    }

    if (res.status >= 200 && res.status < 300) {
      return self.callback(err, res);
    }

    var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
    new_err.original = err;
    new_err.response = res;
    new_err.status = res.status;

    self.callback(new_err, res);
  });
}

/**
 * Mixin `Emitter` and `requestBase`.
 */

Emitter(Request.prototype);
for (var key in requestBase) {
  Request.prototype[key] = requestBase[key];
}

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */

Request.prototype.abort = function(){
  if (this.aborted) return;
  this.aborted = true;
  this.xhr && this.xhr.abort();
  this.clearTimeout();
  this.emit('abort');
  return this;
};

/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  this.set('Content-Type', request.types[type] || type);
  return this;
};

/**
 * Set responseType to `val`. Presently valid responseTypes are 'blob' and 
 * 'arraybuffer'.
 *
 * Examples:
 *
 *      req.get('/')
 *        .responseType('blob')
 *        .end(callback);
 *
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.responseType = function(val){
  this._responseType = val;
  return this;
};

/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.accept = function(type){
  this.set('Accept', request.types[type] || type);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} pass
 * @param {Object} options with 'type' property 'auto' or 'basic' (default 'basic')
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass, options){
  if (!options) {
    options = {
      type: 'basic'
    }
  }

  switch (options.type) {
    case 'basic':
      var str = btoa(user + ':' + pass);
      this.set('Authorization', 'Basic ' + str);
    break;

    case 'auto':
      this.username = user;
      this.password = pass;
    break;
  }
  return this;
};

/**
* Add query-string `val`.
*
* Examples:
*
*   request.get('/shoes')
*     .query('size=10')
*     .query({ color: 'blue' })
*
* @param {Object|String} val
* @return {Request} for chaining
* @api public
*/

Request.prototype.query = function(val){
  if ('string' != typeof val) val = serialize(val);
  if (val) this._query.push(val);
  return this;
};

/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `filename`.
 *
 * ``` js
 * request.post('/upload')
 *   .attach(new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {Blob|File} file
 * @param {String} filename
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.attach = function(field, file, filename){
  this._getFormData().append(field, file, filename || file.name);
  return this;
};

Request.prototype._getFormData = function(){
  if (!this._formData) {
    this._formData = new root.FormData();
  }
  return this._formData;
};

/**
 * Send `data` as the request body, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"}')
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
  *      request.post('/user')
  *        .send('name=tobi')
  *        .send('species=ferret')
  *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.send = function(data){
  var obj = isObject(data);
  var type = this._header['content-type'];

  // merge
  if (obj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    if (!type) this.type('form');
    type = this._header['content-type'];
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!obj || isHost(data)) return this;
  if (!type) this.type('json');
  return this;
};

/**
 * @deprecated
 */
Response.prototype.parse = function serialize(fn){
  if (root.console) {
    console.warn("Client-side parse() method has been renamed to serialize(). This method is not compatible with superagent v2.0");
  }
  this.serialize(fn);
  return this;
};

Response.prototype.serialize = function serialize(fn){
  this._parser = fn;
  return this;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  var fn = this._callback;
  this.clearTimeout();
  fn(err, res);
};

/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

Request.prototype.crossDomainError = function(){
  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
  err.crossDomain = true;

  err.status = this.status;
  err.method = this.method;
  err.url = this.url;

  this.callback(err);
};

/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

Request.prototype.timeoutError = function(){
  var timeout = this._timeout;
  var err = new Error('timeout of ' + timeout + 'ms exceeded');
  err.timeout = timeout;
  this.callback(err);
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

Request.prototype.withCredentials = function(){
  this._withCredentials = true;
  return this;
};

/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.end = function(fn){
  var self = this;
  var xhr = this.xhr = request.getXHR();
  var query = this._query.join('&');
  var timeout = this._timeout;
  var data = this._formData || this._data;

  // store callback
  this._callback = fn || noop;

  // state change
  xhr.onreadystatechange = function(){
    if (4 != xhr.readyState) return;

    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
    // result in the error "Could not complete the operation due to error c00c023f"
    var status;
    try { status = xhr.status } catch(e) { status = 0; }

    if (0 == status) {
      if (self.timedout) return self.timeoutError();
      if (self.aborted) return;
      return self.crossDomainError();
    }
    self.emit('end');
  };

  // progress
  var handleProgress = function(e){
    if (e.total > 0) {
      e.percent = e.loaded / e.total * 100;
    }
    e.direction = 'download';
    self.emit('progress', e);
  };
  if (this.hasListeners('progress')) {
    xhr.onprogress = handleProgress;
  }
  try {
    if (xhr.upload && this.hasListeners('progress')) {
      xhr.upload.onprogress = handleProgress;
    }
  } catch(e) {
    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
    // Reported here:
    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
  }

  // timeout
  if (timeout && !this._timer) {
    this._timer = setTimeout(function(){
      self.timedout = true;
      self.abort();
    }, timeout);
  }

  // querystring
  if (query) {
    query = request.serializeObject(query);
    this.url += ~this.url.indexOf('?')
      ? '&' + query
      : '?' + query;
  }

  // initiate request
  if (this.username && this.password) {
    xhr.open(this.method, this.url, true, this.username, this.password);
  } else {
    xhr.open(this.method, this.url, true);
  }

  // CORS
  if (this._withCredentials) xhr.withCredentials = true;

  // body
  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {
    // serialize stuff
    var contentType = this._header['content-type'];
    var serialize = this._parser || request.serialize[contentType ? contentType.split(';')[0] : ''];
    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];
    if (serialize) data = serialize(data);
  }

  // set header fields
  for (var field in this.header) {
    if (null == this.header[field]) continue;
    xhr.setRequestHeader(field, this.header[field]);
  }

  if (this._responseType) {
    xhr.responseType = this._responseType;
  }

  // send stuff
  this.emit('request', this);

  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
  // We need null here if data is undefined
  xhr.send(typeof data !== 'undefined' ? data : null);
  return this;
};


/**
 * Expose `Request`.
 */

request.Request = Request;

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.get = function(url, data, fn){
  var req = request('GET', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.head = function(url, data, fn){
  var req = request('HEAD', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * DELETE `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

function del(url, fn){
  var req = request('DELETE', url);
  if (fn) req.end(fn);
  return req;
};

request['del'] = del;
request['delete'] = del;

/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} data
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.patch = function(url, data, fn){
  var req = request('PATCH', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} data
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.post = function(url, data, fn){
  var req = request('POST', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.put = function(url, data, fn){
  var req = request('PUT', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

},{"./is-object":40,"./request":42,"./request-base":41,"emitter":35,"reduce":38}],40:[function(require,module,exports){
/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isObject(obj) {
  return null != obj && 'object' == typeof obj;
}

module.exports = isObject;

},{}],41:[function(require,module,exports){
/**
 * Module of mixed-in functions shared between node and client code
 */
var isObject = require('./is-object');

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

exports.clearTimeout = function _clearTimeout(){
  this._timeout = 0;
  clearTimeout(this._timer);
  return this;
};

/**
 * Force given parser
 *
 * Sets the body parser no matter type.
 *
 * @param {Function}
 * @api public
 */

exports.parse = function parse(fn){
  this._parser = fn;
  return this;
};

/**
 * Set timeout to `ms`.
 *
 * @param {Number} ms
 * @return {Request} for chaining
 * @api public
 */

exports.timeout = function timeout(ms){
  this._timeout = ms;
  return this;
};

/**
 * Faux promise support
 *
 * @param {Function} fulfill
 * @param {Function} reject
 * @return {Request}
 */

exports.then = function then(fulfill, reject) {
  return this.end(function(err, res) {
    err ? reject(err) : fulfill(res);
  });
}

/**
 * Allow for extension
 */

exports.use = function use(fn) {
  fn(this);
  return this;
}


/**
 * Get request header `field`.
 * Case-insensitive.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

exports.get = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Get case-insensitive header `field` value.
 * This is a deprecated internal API. Use `.get(field)` instead.
 *
 * (getHeader is no longer used internally by the superagent code base)
 *
 * @param {String} field
 * @return {String}
 * @api private
 * @deprecated
 */

exports.getHeader = exports.get;

/**
 * Set header `field` to `val`, or multiple fields with one object.
 * Case-insensitive.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

exports.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Remove header `field`.
 * Case-insensitive.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 */
exports.unset = function(field){
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};

/**
 * Write the field `name` and `val` for "multipart/form-data"
 * request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 * ```
 *
 * @param {String} name
 * @param {String|Blob|File|Buffer|fs.ReadStream} val
 * @return {Request} for chaining
 * @api public
 */
exports.field = function(name, val) {
  this._getFormData().append(name, val);
  return this;
};

},{"./is-object":40}],42:[function(require,module,exports){
// The node and browser modules expose versions of this with the
// appropriate constructor function bound as first argument
/**
 * Issue a request:
 *
 * Examples:
 *
 *    request('GET', '/users').end(callback)
 *    request('/users').end(callback)
 *    request('/users', callback)
 *
 * @param {String} method
 * @param {String|Function} url or callback
 * @return {Request}
 * @api public
 */

function request(RequestConstructor, method, url) {
  // callback
  if ('function' == typeof url) {
    return new RequestConstructor('GET', method).end(url);
  }

  // url first
  if (2 == arguments.length) {
    return new RequestConstructor('GET', method);
  }

  return new RequestConstructor(method, url);
}

module.exports = request;

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
